{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\Portal\\\\soc-portal\\\\src\\\\pages\\\\HomePage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport \"../styles/HomePage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HomePage() {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const App = {\n      canvas: null,\n      ctx: null,\n      width: 0,\n      height: 0,\n      particles: [],\n      deathCount: 0,\n      stepCount: 0,\n      drawnInLastFrame: 0,\n      animationFrame: null,\n      mouseX: null,\n      mouseY: null,\n      mouseRadius: 200,\n      pressure: 1,\n      setup: function () {\n        const canvas = canvasRef.current;\n        const container = canvas.parentElement;\n        this.width = container.clientWidth;\n        this.height = container.clientHeight;\n        canvas.width = this.width;\n        canvas.height = this.height;\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n        this.dataToImageRatio = 1;\n        this.ctx.imageSmoothingEnabled = false;\n        this.xC = this.width / 2;\n        this.yC = this.height / 2;\n\n        // Your custom parameters\n        this.lifespan = 1000;\n        this.popPerBirth = 5;\n        this.maxPop = 500;\n        this.birthFreq = 3;\n        this.gridSize = 8;\n        this.gridSteps = Math.floor(1000 / this.gridSize);\n        this.grid = [];\n\n        // Build grid\n        let i = 0;\n        const gridArea = 1000;\n        const gridRadius = gridArea / 2;\n        for (let xx = -gridRadius; xx < gridRadius; xx += this.gridSize) {\n          for (let yy = -gridRadius; yy < gridRadius; yy += this.gridSize) {\n            const r = Math.sqrt(xx * xx + yy * yy);\n            const r0 = 100;\n            let field;\n            if (r < r0) field = 255 / r0 * r;else field = 255 - Math.min(255, (r - r0) / 2);\n            this.grid.push({\n              x: xx,\n              y: yy,\n              busyAge: 0,\n              spotIndex: i,\n              isEdge: xx === -gridRadius || xx >= gridRadius - this.gridSize || yy === -gridRadius || yy >= gridRadius - this.gridSize,\n              field: field\n            });\n            i++;\n          }\n        }\n        this.gridMaxIndex = i;\n\n        // Mouse interaction\n        canvas.addEventListener('mousemove', e => {\n          const rect = canvas.getBoundingClientRect();\n          this.mouseX = e.clientX - rect.left;\n          this.mouseY = e.clientY - rect.top;\n        });\n        canvas.addEventListener('mouseout', () => {\n          this.mouseX = null;\n        });\n\n        // Click to spawn worm cluster\n        canvas.addEventListener('click', e => {\n          const rect = canvas.getBoundingClientRect();\n          const clickX = e.clientX - rect.left;\n          const clickY = e.clientY - rect.top;\n\n          // Convert to field coordinates\n          const fieldX = (clickX - this.xC) / (1.6 * this.dataToImageRatio);\n          const fieldY = (clickY - this.yC) / (1.6 * this.dataToImageRatio);\n\n          // Spawn 10 worms at click location\n          for (let i = 0; i < 10; i++) {\n            this.birthWormAt(fieldX, fieldY);\n          }\n        });\n        this.initDraw();\n        const animate = () => {\n          this.evolve();\n          this.animationFrame = requestAnimationFrame(animate);\n        };\n        animate();\n      },\n      birthWormAt: function (x, y) {\n        // Find nearest grid spot\n        let closestSpot = this.grid[0];\n        let minDist = Infinity;\n        for (const spot of this.grid) {\n          const dist = Math.sqrt((spot.x - x) ** 2 + (spot.y - y) ** 2);\n          if (dist < minDist) {\n            minDist = dist;\n            closestSpot = spot;\n          }\n        }\n        const particle = {\n          hue: 260 + Math.sin(Date.now() * 0.001) * 20,\n          sat: 100,\n          lum: 50,\n          x: closestSpot.x,\n          y: closestSpot.y,\n          xLast: closestSpot.x,\n          yLast: closestSpot.y,\n          xSpeed: 0,\n          ySpeed: 0,\n          age: 0,\n          ageSinceStuck: 0,\n          attractor: {\n            oldIndex: closestSpot.spotIndex,\n            gridSpotIndex: closestSpot.spotIndex\n          },\n          name: 'worm-' + Date.now() + '-' + Math.random()\n        };\n        this.particles.push(particle);\n      },\n      evolve: function () {\n        this.stepCount++;\n        this.grid.forEach(function (e) {\n          if (e.busyAge > 0) e.busyAge++;\n        });\n        if (this.stepCount % this.birthFreq === 0 && this.particles.length + this.popPerBirth < this.maxPop) {\n          this.birth();\n        }\n        this.move();\n        this.draw();\n      },\n      birth: function () {\n        const gridSpotIndex = Math.floor(Math.random() * this.gridMaxIndex);\n        const gridSpot = this.grid[gridSpotIndex];\n        const particle = {\n          hue: 260 + Math.sin(Date.now() * 0.001) * 20,\n          sat: 100,\n          lum: 50,\n          x: gridSpot.x,\n          y: gridSpot.y,\n          xLast: gridSpot.x,\n          yLast: gridSpot.y,\n          xSpeed: 0,\n          ySpeed: 0,\n          age: 0,\n          ageSinceStuck: 0,\n          attractor: {\n            oldIndex: gridSpotIndex,\n            gridSpotIndex: gridSpotIndex\n          },\n          name: 'seed-' + Math.ceil(10000000 * Math.random())\n        };\n        this.particles.push(particle);\n      },\n      kill: function (particleName) {\n        this.particles = this.particles.filter(seed => seed.name !== particleName);\n        this.deathCount++;\n      },\n      move: function () {\n        for (let i = 0; i < this.particles.length; i++) {\n          const p = this.particles[i];\n          p.xLast = p.x;\n          p.yLast = p.y;\n          let index = p.attractor.gridSpotIndex;\n          let gridSpot = this.grid[index];\n\n          // Mouse attraction only (no repulsion)\n          if (this.mouseX && this.mouseY) {\n            const mouseFieldX = (this.mouseX - this.xC) / (1.6 * this.dataToImageRatio);\n            const mouseFieldY = (this.mouseY - this.yC) / (1.6 * this.dataToImageRatio);\n            const dx = mouseFieldX - gridSpot.x;\n            const dy = mouseFieldY - gridSpot.y;\n            const dist = Math.sqrt(dx * dx + dy * dy);\n            if (dist < this.mouseRadius) {\n              // Gently influence the attractor point toward mouse\n              gridSpot.x += dx * 0.01;\n              gridSpot.y += dy * 0.01;\n            }\n          }\n\n          // Original worm movement logic\n          if (Math.random() < 0.5) {\n            if (!gridSpot.isEdge) {\n              const topIndex = index - 1;\n              const bottomIndex = index + 1;\n              const leftIndex = index - this.gridSteps;\n              const rightIndex = index + this.gridSteps;\n              const neighbors = [];\n              if (gridSpot.isEdge !== 'top') neighbors.push(this.grid[topIndex]);\n              if (gridSpot.isEdge !== 'bottom') neighbors.push(this.grid[bottomIndex]);\n              if (gridSpot.isEdge !== 'left') neighbors.push(this.grid[leftIndex]);\n              if (gridSpot.isEdge !== 'right') neighbors.push(this.grid[rightIndex]);\n              if (neighbors.length > 0) {\n                const chaos = 30;\n                const maxFieldSpot = neighbors.reduce((max, spot) => spot.field + chaos * Math.random() > max.field + chaos * Math.random() ? spot : max);\n                if (maxFieldSpot.busyAge === 0 || maxFieldSpot.busyAge > 15) {\n                  p.ageSinceStuck = 0;\n                  p.attractor.oldIndex = index;\n                  p.attractor.gridSpotIndex = maxFieldSpot.spotIndex;\n                  gridSpot = maxFieldSpot;\n                  gridSpot.busyAge = 1;\n                } else {\n                  p.ageSinceStuck++;\n                }\n              } else {\n                p.ageSinceStuck++;\n              }\n              if (p.ageSinceStuck === 10) this.kill(p.name);\n            } else {\n              p.ageSinceStuck++;\n            }\n          }\n\n          // Worm physics\n          const k = 8,\n            visc = 0.4;\n          const dx = p.x - gridSpot.x;\n          const dy = p.y - gridSpot.y;\n          const xAcc = -k * dx;\n          const yAcc = -k * dy;\n          p.xSpeed += xAcc;\n          p.ySpeed += yAcc;\n          p.xSpeed *= visc;\n          p.ySpeed *= visc;\n          p.x += 0.1 * p.xSpeed;\n          p.y += 0.1 * p.ySpeed;\n          p.age++;\n          if (p.age > this.lifespan) {\n            this.kill(p.name);\n          }\n        }\n      },\n      initDraw: function () {\n        this.ctx.fillStyle = 'black';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n      },\n      draw: function () {\n        this.drawnInLastFrame = 0;\n        if (!this.particles.length) return false;\n\n        // Original worm trail effect\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n        for (let i = 0; i < this.particles.length; i++) {\n          const p = this.particles[i];\n          const h = p.hue + this.stepCount / 30;\n          const s = p.sat;\n          const l = p.lum;\n\n          // Convert coordinates\n          const last = this.dataXYtoCanvasXY(p.xLast, p.yLast);\n          const now = this.dataXYtoCanvasXY(p.x, p.y);\n          const attracSpot = this.grid[p.attractor.gridSpotIndex];\n          const attracXY = this.dataXYtoCanvasXY(attracSpot.x, attracSpot.y);\n          const oldAttracSpot = this.grid[p.attractor.oldIndex];\n          const oldAttracXY = this.dataXYtoCanvasXY(oldAttracSpot.x, oldAttracSpot.y);\n\n          // Draw worm trail\n          this.ctx.beginPath();\n          this.ctx.strokeStyle = `hsla(${h}, ${s}%, ${l}%, 1)`;\n          this.ctx.moveTo(last.x, last.y);\n          this.ctx.lineTo(now.x, now.y);\n          this.ctx.lineWidth = 1.5;\n          this.ctx.stroke();\n\n          // Draw attractor connection\n          this.ctx.beginPath();\n          this.ctx.strokeStyle = `hsla(${h}, ${s}%, ${l}%, 0.5)`;\n          this.ctx.moveTo(oldAttracXY.x, oldAttracXY.y);\n          this.ctx.lineTo(attracXY.x, attracXY.y);\n          this.ctx.arc(attracXY.x, attracXY.y, 1.5, 0, 2 * Math.PI);\n          this.ctx.stroke();\n          this.drawnInLastFrame++;\n        }\n      },\n      dataXYtoCanvasXY: function (x, y) {\n        const zoom = 1.6;\n        return {\n          x: this.xC + x * zoom * this.dataToImageRatio,\n          y: this.yC + y * zoom * this.dataToImageRatio\n        };\n      }\n    };\n    App.setup();\n    return () => {\n      if (App.animationFrame) {\n        cancelAnimationFrame(App.animationFrame);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"effect-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"particle-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"banner1\",\n        children: \"Cyber\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"banner2\",\n        children: \"Vigiliance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"banner3\",\n        children: \"Centre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","HomePage","_s","canvasRef","App","canvas","ctx","width","height","particles","deathCount","stepCount","drawnInLastFrame","animationFrame","mouseX","mouseY","mouseRadius","pressure","setup","current","container","parentElement","clientWidth","clientHeight","getContext","dataToImageRatio","imageSmoothingEnabled","xC","yC","lifespan","popPerBirth","maxPop","birthFreq","gridSize","gridSteps","Math","floor","grid","i","gridArea","gridRadius","xx","yy","r","sqrt","r0","field","min","push","x","y","busyAge","spotIndex","isEdge","gridMaxIndex","addEventListener","e","rect","getBoundingClientRect","clientX","left","clientY","top","clickX","clickY","fieldX","fieldY","birthWormAt","initDraw","animate","evolve","requestAnimationFrame","closestSpot","minDist","Infinity","spot","dist","particle","hue","sin","Date","now","sat","lum","xLast","yLast","xSpeed","ySpeed","age","ageSinceStuck","attractor","oldIndex","gridSpotIndex","name","random","forEach","length","birth","move","draw","gridSpot","ceil","kill","particleName","filter","seed","p","index","mouseFieldX","mouseFieldY","dx","dy","topIndex","bottomIndex","leftIndex","rightIndex","neighbors","chaos","maxFieldSpot","reduce","max","k","visc","xAcc","yAcc","fillStyle","fillRect","h","s","l","last","dataXYtoCanvasXY","attracSpot","attracXY","oldAttracSpot","oldAttracXY","beginPath","strokeStyle","moveTo","lineTo","lineWidth","stroke","arc","PI","zoom","cancelAnimationFrame","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/Portal/soc-portal/src/pages/HomePage.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport \"../styles/HomePage.css\";\r\n\r\nfunction HomePage() {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const App = {\r\n      canvas: null,\r\n      ctx: null,\r\n      width: 0,\r\n      height: 0,\r\n      particles: [],\r\n      deathCount: 0,\r\n      stepCount: 0,\r\n      drawnInLastFrame: 0,\r\n      animationFrame: null,\r\n      mouseX: null,\r\n      mouseY: null,\r\n      mouseRadius: 200,\r\n      pressure: 1,\r\n\r\n      setup: function() {\r\n        const canvas = canvasRef.current;\r\n        const container = canvas.parentElement;\r\n        \r\n        this.width = container.clientWidth;\r\n        this.height = container.clientHeight;\r\n        canvas.width = this.width;\r\n        canvas.height = this.height;\r\n        \r\n        this.canvas = canvas;\r\n        this.ctx = canvas.getContext(\"2d\");\r\n        this.dataToImageRatio = 1;\r\n        this.ctx.imageSmoothingEnabled = false;\r\n        this.xC = this.width / 2;\r\n        this.yC = this.height / 2;\r\n        \r\n        // Your custom parameters\r\n        this.lifespan = 1000;\r\n        this.popPerBirth = 5;\r\n        this.maxPop = 500;\r\n        this.birthFreq = 3;\r\n        this.gridSize = 8;\r\n        this.gridSteps = Math.floor(1000 / this.gridSize);\r\n        this.grid = [];\r\n        \r\n        // Build grid\r\n        let i = 0;\r\n        const gridArea = 1000;\r\n        const gridRadius = gridArea / 2;\r\n        for (let xx = -gridRadius; xx < gridRadius; xx += this.gridSize) {\r\n          for (let yy = -gridRadius; yy < gridRadius; yy += this.gridSize) {\r\n            const r = Math.sqrt(xx*xx + yy*yy);\r\n            const r0 = 100;\r\n            let field;\r\n            \r\n            if (r < r0) field = 255 / r0 * r;\r\n            else field = 255 - Math.min(255, (r - r0)/2);\r\n            \r\n            this.grid.push({\r\n              x: xx,\r\n              y: yy,\r\n              busyAge: 0,\r\n              spotIndex: i,\r\n              isEdge: (xx === -gridRadius || \r\n                      xx >= (gridRadius - this.gridSize) || \r\n                      yy === -gridRadius || \r\n                      yy >= (gridRadius - this.gridSize)),\r\n              field: field\r\n            });\r\n            i++;\r\n          }\r\n        }\r\n        this.gridMaxIndex = i;\r\n        \r\n        // Mouse interaction\r\n        canvas.addEventListener('mousemove', (e) => {\r\n          const rect = canvas.getBoundingClientRect();\r\n          this.mouseX = e.clientX - rect.left;\r\n          this.mouseY = e.clientY - rect.top;\r\n        });\r\n        \r\n        canvas.addEventListener('mouseout', () => {\r\n          this.mouseX = null;\r\n        });\r\n        \r\n        // Click to spawn worm cluster\r\n        canvas.addEventListener('click', (e) => {\r\n          const rect = canvas.getBoundingClientRect();\r\n          const clickX = e.clientX - rect.left;\r\n          const clickY = e.clientY - rect.top;\r\n          \r\n          // Convert to field coordinates\r\n          const fieldX = (clickX - this.xC) / (1.6 * this.dataToImageRatio);\r\n          const fieldY = (clickY - this.yC) / (1.6 * this.dataToImageRatio);\r\n          \r\n          // Spawn 10 worms at click location\r\n          for (let i = 0; i < 10; i++) {\r\n            this.birthWormAt(fieldX, fieldY);\r\n          }\r\n        });\r\n        \r\n        this.initDraw();\r\n        \r\n        const animate = () => {\r\n          this.evolve();\r\n          this.animationFrame = requestAnimationFrame(animate);\r\n        };\r\n        animate();\r\n      },\r\n\r\n      birthWormAt: function(x, y) {\r\n        // Find nearest grid spot\r\n        let closestSpot = this.grid[0];\r\n        let minDist = Infinity;\r\n        \r\n        for (const spot of this.grid) {\r\n          const dist = Math.sqrt((spot.x - x)**2 + (spot.y - y)**2);\r\n          if (dist < minDist) {\r\n            minDist = dist;\r\n            closestSpot = spot;\r\n          }\r\n        }\r\n        \r\n        const particle = {\r\n          hue: 260 + Math.sin(Date.now()*0.001)*20,\r\n          sat: 100,\r\n          lum: 50,\r\n          x: closestSpot.x, \r\n          y: closestSpot.y,\r\n          xLast: closestSpot.x, \r\n          yLast: closestSpot.y,\r\n          xSpeed: 0, \r\n          ySpeed: 0,\r\n          age: 0,\r\n          ageSinceStuck: 0,\r\n          attractor: {\r\n            oldIndex: closestSpot.spotIndex,\r\n            gridSpotIndex: closestSpot.spotIndex,\r\n          },\r\n          name: 'worm-' + Date.now() + '-' + Math.random()\r\n        };\r\n        this.particles.push(particle);\r\n      },\r\n\r\n      evolve: function() {\r\n        this.stepCount++;\r\n        \r\n        this.grid.forEach(function(e) {\r\n          if (e.busyAge > 0) e.busyAge++;\r\n        });\r\n        \r\n        if (this.stepCount % this.birthFreq === 0 && \r\n            (this.particles.length + this.popPerBirth) < this.maxPop) {\r\n          this.birth();\r\n        }\r\n        this.move();\r\n        this.draw();\r\n      },\r\n\r\n      birth: function() {\r\n        const gridSpotIndex = Math.floor(Math.random() * this.gridMaxIndex);\r\n        const gridSpot = this.grid[gridSpotIndex];\r\n        \r\n        const particle = {\r\n          hue: 260 + Math.sin(Date.now()*0.001)*20,\r\n          sat: 100,\r\n          lum: 50,\r\n          x: gridSpot.x, \r\n          y: gridSpot.y,\r\n          xLast: gridSpot.x, \r\n          yLast: gridSpot.y,\r\n          xSpeed: 0, \r\n          ySpeed: 0,\r\n          age: 0,\r\n          ageSinceStuck: 0,\r\n          attractor: {\r\n            oldIndex: gridSpotIndex,\r\n            gridSpotIndex: gridSpotIndex,\r\n          },\r\n          name: 'seed-' + Math.ceil(10000000 * Math.random())\r\n        };\r\n        this.particles.push(particle);\r\n      },\r\n\r\n      kill: function(particleName) {\r\n        this.particles = this.particles.filter(seed => seed.name !== particleName);\r\n        this.deathCount++;\r\n      },\r\n\r\n      move: function() {\r\n        for (let i = 0; i < this.particles.length; i++) {\r\n          const p = this.particles[i];\r\n          p.xLast = p.x; \r\n          p.yLast = p.y;\r\n          \r\n          let index = p.attractor.gridSpotIndex;\r\n          let gridSpot = this.grid[index];\r\n          \r\n          // Mouse attraction only (no repulsion)\r\n          if (this.mouseX && this.mouseY) {\r\n            const mouseFieldX = (this.mouseX - this.xC) / (1.6 * this.dataToImageRatio);\r\n            const mouseFieldY = (this.mouseY - this.yC) / (1.6 * this.dataToImageRatio);\r\n            const dx = mouseFieldX - gridSpot.x;\r\n            const dy = mouseFieldY - gridSpot.y;\r\n            const dist = Math.sqrt(dx*dx + dy*dy);\r\n            \r\n            if (dist < this.mouseRadius) {\r\n              // Gently influence the attractor point toward mouse\r\n              gridSpot.x += dx * 0.01;\r\n              gridSpot.y += dy * 0.01;\r\n            }\r\n          }\r\n          \r\n          // Original worm movement logic\r\n          if (Math.random() < 0.5) {\r\n            if (!gridSpot.isEdge) {\r\n              const topIndex = index - 1;\r\n              const bottomIndex = index + 1;\r\n              const leftIndex = index - this.gridSteps;\r\n              const rightIndex = index + this.gridSteps;\r\n              \r\n              const neighbors = [];\r\n              if (gridSpot.isEdge !== 'top') neighbors.push(this.grid[topIndex]);\r\n              if (gridSpot.isEdge !== 'bottom') neighbors.push(this.grid[bottomIndex]);\r\n              if (gridSpot.isEdge !== 'left') neighbors.push(this.grid[leftIndex]);\r\n              if (gridSpot.isEdge !== 'right') neighbors.push(this.grid[rightIndex]);\r\n              \r\n              if (neighbors.length > 0) {\r\n                const chaos = 30;\r\n                const maxFieldSpot = neighbors.reduce((max, spot) => \r\n                  (spot.field + chaos * Math.random()) > \r\n                  (max.field + chaos * Math.random()) ? spot : max\r\n                );\r\n                \r\n                if (maxFieldSpot.busyAge === 0 || maxFieldSpot.busyAge > 15) {\r\n                  p.ageSinceStuck = 0;\r\n                  p.attractor.oldIndex = index;\r\n                  p.attractor.gridSpotIndex = maxFieldSpot.spotIndex;\r\n                  gridSpot = maxFieldSpot;\r\n                  gridSpot.busyAge = 1;\r\n                } else {\r\n                  p.ageSinceStuck++;\r\n                }\r\n              } else {\r\n                p.ageSinceStuck++;\r\n              }\r\n              \r\n              if (p.ageSinceStuck === 10) this.kill(p.name);\r\n            } else {\r\n              p.ageSinceStuck++;\r\n            }\r\n          }\r\n          \r\n          // Worm physics\r\n          const k = 8, visc = 0.4;\r\n          const dx = p.x - gridSpot.x;\r\n          const dy = p.y - gridSpot.y;\r\n          \r\n          const xAcc = -k * dx;\r\n          const yAcc = -k * dy;\r\n          \r\n          p.xSpeed += xAcc; \r\n          p.ySpeed += yAcc;\r\n          p.xSpeed *= visc; \r\n          p.ySpeed *= visc;\r\n          \r\n          p.x += 0.1 * p.xSpeed; \r\n          p.y += 0.1 * p.ySpeed;\r\n          p.age++;\r\n          \r\n          if (p.age > this.lifespan) {\r\n            this.kill(p.name);\r\n          }\r\n        }\r\n      },\r\n\r\n      initDraw: function() {\r\n        this.ctx.fillStyle = 'black';\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n      },\r\n\r\n      draw: function() {\r\n        this.drawnInLastFrame = 0;\r\n        if (!this.particles.length) return false;\r\n        \r\n        // Original worm trail effect\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        \r\n        for (let i = 0; i < this.particles.length; i++) {\r\n          const p = this.particles[i];\r\n          const h = p.hue + this.stepCount/30;\r\n          const s = p.sat;\r\n          const l = p.lum;\r\n          \r\n          // Convert coordinates\r\n          const last = this.dataXYtoCanvasXY(p.xLast, p.yLast);\r\n          const now = this.dataXYtoCanvasXY(p.x, p.y);\r\n          const attracSpot = this.grid[p.attractor.gridSpotIndex];\r\n          const attracXY = this.dataXYtoCanvasXY(attracSpot.x, attracSpot.y);\r\n          const oldAttracSpot = this.grid[p.attractor.oldIndex];\r\n          const oldAttracXY = this.dataXYtoCanvasXY(oldAttracSpot.x, oldAttracSpot.y);\r\n          \r\n          // Draw worm trail\r\n          this.ctx.beginPath();\r\n          this.ctx.strokeStyle = `hsla(${h}, ${s}%, ${l}%, 1)`;\r\n          this.ctx.moveTo(last.x, last.y);\r\n          this.ctx.lineTo(now.x, now.y);\r\n          this.ctx.lineWidth = 1.5;\r\n          this.ctx.stroke();\r\n          \r\n          // Draw attractor connection\r\n          this.ctx.beginPath();\r\n          this.ctx.strokeStyle = `hsla(${h}, ${s}%, ${l}%, 0.5)`;\r\n          this.ctx.moveTo(oldAttracXY.x, oldAttracXY.y);\r\n          this.ctx.lineTo(attracXY.x, attracXY.y);\r\n          this.ctx.arc(attracXY.x, attracXY.y, 1.5, 0, 2 * Math.PI);\r\n          this.ctx.stroke();\r\n          \r\n          this.drawnInLastFrame++;\r\n        }\r\n      },\r\n\r\n      dataXYtoCanvasXY: function(x, y) {\r\n        const zoom = 1.6;\r\n        return {\r\n          x: this.xC + x * zoom * this.dataToImageRatio,\r\n          y: this.yC + y * zoom * this.dataToImageRatio\r\n        };\r\n      }\r\n    };\r\n\r\n    App.setup();\r\n\r\n    return () => {\r\n      if (App.animationFrame) {\r\n        cancelAnimationFrame(App.animationFrame);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      <div className=\"effect-area\">\r\n        <canvas ref={canvasRef} className=\"particle-canvas\" />\r\n        <p className=\"banner1\">Cyber</p>\r\n        <p className=\"banner2\">Vigiliance</p>\r\n        <p className=\"banner3\">Centre</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}