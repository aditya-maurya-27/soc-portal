{"ast":null,"code":"var _jsxFileName = \"C:\\\\OfficeData\\\\Projects\\\\soc-portal\\\\src\\\\pages\\\\Roster.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport Modal from \"react-modal\";\nimport { useAuth } from \"../context/AuthContext\";\nimport \"../styles/Roster.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst shiftTimeMapping = {\n  Night: {\n    start: \"00:00\",\n    end: \"08:00\"\n  },\n  Morning: {\n    start: \"08:00\",\n    end: \"16:00\"\n  },\n  Evening: {\n    start: \"16:00\",\n    end: \"00:00\"\n  }\n};\nconst Roster = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const isAdmin = (user === null || user === void 0 ? void 0 : user.role) === \"admin\";\n  const [cabStatusList, setCabStatusList] = useState([]);\n  const [activeTab, setActiveTab] = useState(\"tab1\");\n  const [shifts, setShifts] = useState([]);\n  const [selectedEmployeeForNotes, setSelectedEmployeeForNotes] = useState(\"\");\n  const [employeeNotes, setEmployeeNotes] = useState({});\n  const shiftColorMap = useRef({});\n  const [selectedShift, setSelectedShift] = useState(null);\n  const [comment, setComment] = useState(\"\");\n  const [isSaving, setIsSaving] = useState(false);\n  const [saveStatus, setSaveStatus] = useState({\n    success: null,\n    message: ''\n  });\n  const [commentsMap, setCommentsMap] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [newShiftDate, setNewShiftDate] = useState(\"\");\n  const [newShiftType, setNewShiftType] = useState(\"Night\");\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\n  const [analysts, setAnalysts] = useState([]);\n  const [cabOpted, setCabOpted] = useState(false);\n  const [editShiftType, setEditShiftType] = useState(\"Night\");\n  const [editShiftDate, setEditShiftDate] = useState(\"\");\n  const [editEmployeeId, setEditEmployeeId] = useState(\"\");\n  const shiftColorPool = [\"#061e48\", \"#260e20\", \"#081e2c\", \"#220024\", \"#002620\", \"#3d0000\", \"#001020\", \"#2c003e\", \"#250a46\", \"#0d0d20\", \"#1d0652\", \"#180a19\", \"#460000\", \"#3e120e\", \"#320f0b\", \"#3c1410\", \"#370a0a\", \"#461200\", \"#5c2007\", \"#502916\", \"#69340f\", \"#4e3206\", \"#46220a\", \"#3e2400\", \"#382c00\", \"#332e0f\", \"#00202e\", \"#1c004c\", \"#1c0032\", \"#1f0330\", \"#091a12\", \"#0f151c\", \"#061020\", \"#420516\", \"#0d0d17\", \"#04131a\", \"#20110c\", \"#0d1b2a\", \"#0e0e18\", \"#141c26\", \"#0a1422\", \"#1f1024\", \"#0c1e1e\", \"#0e0e0e\", \"#001a33\", \"#101010\", \"#160e07\", \"#190a12\", \"#08162c\", \"#16162a\", \"#150422\", \"#2e003e\", \"#000f1a\", \"#0e1316\", \"#001f3f\", \"#160a16\", \"#460046\", \"#400020\", \"#4c1a33\", \"#381432\", \"#521535\", \"#3c0017\", \"#551a35\", \"#260701\", \"#0c0c12\", \"#100e1b\", \"#1e1818\", \"#171720\", \"#0f0f18\", \"#111418\", \"#35013f\", \"#0d2617\"];\n  const isMountedRef = useRef(true);\n  useEffect(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  useEffect(() => {\n    if (!user) {\n      setIsModalOpen(false);\n      setIsAddModalOpen(false);\n    }\n  }, [user]);\n  const fetchShifts = () => {\n    fetch(\"http://localhost:5000/api/shifts\").then(res => res.json()).then(data => {\n      if (isMountedRef.current) setShifts(data);\n    }).catch(err => {\n      if (isMountedRef.current) console.error(\"Failed to fetch shifts:\", err);\n    });\n  };\n  useEffect(() => {\n    fetchShifts();\n    fetch(\"http://localhost:5000/api/analysts\").then(res => res.json()).then(data => {\n      if (isMountedRef.current) setAnalysts(data);\n    }).catch(err => {\n      if (isMountedRef.current) console.error(\"Failed to fetch analysts:\", err);\n    });\n  }, []);\n  const handleEmployeeToggle = username => {\n    setSelectedEmployees(prev => prev.includes(username) ? prev.filter(u => u !== username) : [...prev, username]);\n  };\n  const isUserInShift = () => {\n    return cabStatusList.some(emp => emp.username === (user === null || user === void 0 ? void 0 : user.username));\n  };\n  const handleCabToggle = async () => {\n    const newCabOpted = !cabOpted;\n    setCabOpted(newCabOpted);\n    try {\n      await fetch(`http://localhost:5000/api/update_cab_status`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          shift_id: selectedShift.id,\n          employee_id: user.id,\n          cab_facility: newCabOpted ? \"Yes\" : \"No\"\n        })\n      });\n      setCabStatusList(prevList => prevList.map(emp => emp.username === user.username ? {\n        ...emp,\n        cab_facility: newCabOpted ? \"Yes\" : \"No\"\n      } : emp));\n    } catch (err) {\n      if (isMountedRef.current) console.error(\"Failed to update cab status:\", err);\n    }\n  };\n  const handleEventClick = async info => {\n    const shift = info.event;\n    if (!isMountedRef.current) return;\n    setSelectedShift(shift);\n    setComment(commentsMap[shift.id] || \"\");\n\n    // Admin logic remains the same\n    if (isAdmin) {\n      const date = shift.start.toISOString().slice(0, 10);\n      let shiftType = \"Morning\";\n      if (shift.title.includes(\"Morning\")) shiftType = \"Morning\";else if (shift.title.includes(\"Evening\")) shiftType = \"Evening\";else if (shift.title.includes(\"Night\")) shiftType = \"Night\";\n      const firstEmp = shift.title.split(\" - \")[0];\n      const matchedEmp = analysts.find(emp => emp.username === firstEmp);\n      setEditShiftType(shiftType);\n      setEditShiftDate(date);\n      setEditEmployeeId((matchedEmp === null || matchedEmp === void 0 ? void 0 : matchedEmp.id) || \"\");\n    }\n    try {\n      var _cabData$find, _cabData$;\n      // 1. First fetch cab status (contains employee info)\n      const cabResponse = await fetch(`http://localhost:5000/api/shifts/${shift.id}/cab-status`);\n      if (!cabResponse.ok) throw new Error(\"Failed to fetch cab status\");\n      const cabData = await cabResponse.json();\n      if (!isMountedRef.current) return;\n      setCabStatusList(cabData);\n      if (!isAdmin && cabData.length > 0) {\n        const currentUser = cabData.find(emp => emp.username === user.username);\n        setCabOpted((currentUser === null || currentUser === void 0 ? void 0 : currentUser.cab_facility) === \"Yes\");\n      }\n\n      // 2. Then fetch notes for this shift\n      const notesResponse = await fetch(`http://localhost:5000/api/shifts/${shift.id}/notes`);\n      if (!notesResponse.ok) throw new Error(\"Failed to fetch notes\");\n      const notesData = await notesResponse.json();\n\n      // Debug logs to verify data\n      console.log(\"Cab Data:\", cabData);\n      console.log(\"Notes Data:\", notesData);\n\n      // Create mapping of username to note\n      const notesMap = {};\n      notesData.forEach(note => {\n        // Find the employee in cabData - using id from cab status that matches employee_id in notes\n        const employee = cabData.find(emp => emp.id === note.employee_id);\n        if (employee) {\n          notesMap[employee.username] = note.note;\n        }\n      });\n      console.log(\"Notes Map:\", notesMap); // Debug log\n      setEmployeeNotes(notesMap);\n\n      // Set default selected employee (current user if in shift, otherwise first employee)\n      const defaultEmployee = ((_cabData$find = cabData.find(emp => emp.username === (user === null || user === void 0 ? void 0 : user.username))) === null || _cabData$find === void 0 ? void 0 : _cabData$find.username) || ((_cabData$ = cabData[0]) === null || _cabData$ === void 0 ? void 0 : _cabData$.username) || '';\n      setSelectedEmployeeForNotes(defaultEmployee);\n    } catch (error) {\n      console.error(\"Error fetching shift data:\", error);\n      if (isMountedRef.current) {\n        setCabStatusList([]);\n        setEmployeeNotes({});\n      }\n    }\n    if (isMountedRef.current) setIsModalOpen(true);\n  };\n  const isWithinShift = () => {\n    if (!selectedShift) return false;\n    const now = new Date();\n    const start = new Date(selectedShift.start);\n    const end = new Date(selectedShift.end);\n    return now >= start && now <= end;\n  };\n  const handleSave = async () => {\n    if (!selectedShift || !selectedEmployeeForNotes) {\n      setSaveStatus({\n        success: false,\n        message: \"No shift or employee selected\"\n      });\n      return;\n    }\n    try {\n      setIsSaving(true);\n      setSaveStatus({\n        success: null,\n        message: ''\n      });\n\n      // Find the employee in the shift\n      const employee = cabStatusList.find(emp => emp.username === selectedEmployeeForNotes);\n      if (!employee && !isAdmin) {\n        throw new Error(\"You are not assigned to this shift\");\n      }\n\n      // Prepare the note content (handle empty strings)\n      const noteToSave = employeeNotes[selectedEmployeeForNotes] || \"\";\n      const response = await fetch(\"http://localhost:5000/api/save_notes\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          shift_id: selectedShift.id,\n          employee_id: employee === null || employee === void 0 ? void 0 : employee.id,\n          // Safe access with optional chaining\n          notes: noteToSave,\n          is_admin: isAdmin // Send admin status to backend\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || errorData.message || \"Failed to save notes\");\n      }\n\n      // Update local state with the saved note\n      setEmployeeNotes(prev => ({\n        ...prev,\n        [selectedEmployeeForNotes]: noteToSave\n      }));\n      setSaveStatus({\n        success: true,\n        message: \"Notes saved successfully!\",\n        timestamp: new Date().toISOString()\n      });\n\n      // Refresh notes from server to ensure consistency\n      try {\n        const notesResponse = await fetch(`http://localhost:5000/api/shifts/${selectedShift.id}/notes`);\n        if (notesResponse.ok) {\n          const notesData = await notesResponse.json();\n          const updatedNotes = {};\n          notesData.forEach(note => {\n            const emp = cabStatusList.find(e => e.id === note.employee_id);\n            if (emp) updatedNotes[emp.username] = note.note;\n          });\n          setEmployeeNotes(updatedNotes);\n        }\n      } catch (refreshError) {\n        console.warn(\"Couldn't refresh notes:\", refreshError);\n      }\n    } catch (err) {\n      console.error(\"Error saving notes:\", err);\n      setSaveStatus({\n        success: false,\n        message: err.message || \"An unexpected error occurred\"\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  const handleAddShift = async () => {\n    if (selectedEmployees.length === 0 || !newShiftDate || !newShiftType) {\n      alert(\"Please fill all fields.\");\n      return;\n    }\n    const {\n      start,\n      end\n    } = shiftTimeMapping[newShiftType];\n    const startDateTime = `${newShiftDate}T${start}:00`;\n    let endDate = new Date(newShiftDate);\n    if (end === \"00:00\") {\n      endDate.setDate(endDate.getDate() + 1);\n    }\n    const endDateStr = endDate.toISOString().split('T')[0];\n    const endDateTime = `${endDateStr}T${end}:00`;\n    const selectedEmployeeObjects = analysts.filter(emp => selectedEmployees.includes(emp.username));\n    try {\n      for (let emp of selectedEmployeeObjects) {\n        const response = await fetch(\"http://localhost:5000/api/create_shift\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            start_datetime: startDateTime,\n            end_datetime: endDateTime,\n            employee_ids: [emp.id],\n            shift_type: newShiftType.toLowerCase()\n          })\n        });\n        const data = await response.json();\n        if (!response.ok) {\n          alert(\"Error: \" + data.error);\n          return;\n        }\n      }\n      fetchShifts();\n      alert(\"Shift(s) created successfully!\");\n    } catch (err) {\n      console.error(\"Failed to create shift:\", err);\n      alert(\"Failed to create shift. Check console for details.\");\n    }\n    setIsAddModalOpen(false);\n    setSelectedEmployees([]);\n  };\n  const handleEditShift = async () => {\n    try {\n      var _analysts$find;\n      const shiftId = selectedShift.id;\n      const {\n        start,\n        end\n      } = shiftTimeMapping[editShiftType];\n      const startDateTime = new Date(`${editShiftDate}T${start}`);\n      let endDateTime = new Date(`${editShiftDate}T${end}`);\n      if (end === \"00:00\") {\n        endDateTime.setDate(endDateTime.getDate() + 1);\n      }\n      const selectedUsername = ((_analysts$find = analysts.find(emp => emp.id === editEmployeeId)) === null || _analysts$find === void 0 ? void 0 : _analysts$find.username) || \"\";\n      const isDuplicate = shifts.some(shift => {\n        const sameStart = new Date(shift.start).getTime() === startDateTime.getTime();\n        const sameEnd = new Date(shift.end).getTime() === endDateTime.getTime();\n        const sameEmployee = shift.title.includes(selectedUsername);\n        const differentShift = String(shift.id) !== String(shiftId);\n        return differentShift && sameStart && sameEnd && sameEmployee;\n      });\n      if (isDuplicate) {\n        alert(\"Another shift already exists in that slot!\");\n        return;\n      }\n      const response = await fetch(\"http://localhost:5000/api/edit_shift\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          shift_id: shiftId,\n          date: editShiftDate,\n          shift_type: editShiftType.toLowerCase(),\n          employee_id: editEmployeeId\n        })\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        alert(\"Error: \" + result.error);\n        return;\n      }\n      fetchShifts();\n      setIsModalOpen(false);\n      alert(\"Shift updated successfully!\");\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to edit shift.\");\n    }\n  };\n  const handleDeleteShift = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/delete_shift\", {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          shift_id: selectedShift.id\n        })\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        alert(\"Error: \" + result.error);\n        return;\n      }\n      fetchShifts();\n      setIsModalOpen(false);\n      alert(\"Shift deleted successfully!\");\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to delete shift.\");\n    }\n  };\n  const slotLabelContent = arg => {\n    if (arg.date.getHours() === 0) return \"Night\";\n    if (arg.date.getHours() === 8) return \"Morning\";\n    if (arg.date.getHours() === 16) return \"Evening\";\n    return \"\";\n  };\n  const slotLaneContent = arg => {\n    const hour = arg.date.getHours();\n    if (hour !== 0 && hour !== 8 && hour !== 16) {\n      return {\n        display: \"none\"\n      };\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        name: \"tab\",\n        id: \"tab1\",\n        className: \"tab tab--1\",\n        defaultChecked: true,\n        onChange: () => setActiveTab(\"tab1\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"tab_label\",\n        htmlFor: \"tab1\",\n        children: \"Shifts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        name: \"tab\",\n        id: \"tab2\",\n        className: \"tab tab--2\",\n        onChange: () => setActiveTab(\"tab2\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"tab_label\",\n        htmlFor: \"tab2\",\n        children: \"Shift Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        name: \"tab\",\n        id: \"tab3\",\n        className: \"tab tab--3\",\n        onChange: () => setActiveTab(\"tab3\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"tab_label\",\n        htmlFor: \"tab3\",\n        children: \"Cab Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        name: \"tab\",\n        id: \"tab4\",\n        className: \"tab tab--4\",\n        onChange: () => setActiveTab(\"tab4\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"tab_label\",\n        htmlFor: \"tab4\",\n        children: \"Notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"indicator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: [activeTab === \"tab1\" && /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 11\n      }, this), activeTab === \"tab2\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Shift summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 34\n      }, this), activeTab === \"tab3\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Cab status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 34\n      }, this), activeTab === \"tab4\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 431,\n    columnNumber: 5\n  }, this);\n};\n_s(Roster, \"833wGCQN8dBmCQh9j5JN37KkwX4=\", false, function () {\n  return [useAuth];\n});\n_c = Roster;\nexport default Roster;\nvar _c;\n$RefreshReg$(_c, \"Roster\");","map":{"version":3,"names":["React","useState","useEffect","useRef","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","Modal","useAuth","jsxDEV","_jsxDEV","setAppElement","shiftTimeMapping","Night","start","end","Morning","Evening","Roster","_s","user","isAdmin","role","cabStatusList","setCabStatusList","activeTab","setActiveTab","shifts","setShifts","selectedEmployeeForNotes","setSelectedEmployeeForNotes","employeeNotes","setEmployeeNotes","shiftColorMap","selectedShift","setSelectedShift","comment","setComment","isSaving","setIsSaving","saveStatus","setSaveStatus","success","message","commentsMap","setCommentsMap","isModalOpen","setIsModalOpen","isAddModalOpen","setIsAddModalOpen","newShiftDate","setNewShiftDate","newShiftType","setNewShiftType","selectedEmployees","setSelectedEmployees","analysts","setAnalysts","cabOpted","setCabOpted","editShiftType","setEditShiftType","editShiftDate","setEditShiftDate","editEmployeeId","setEditEmployeeId","shiftColorPool","isMountedRef","current","fetchShifts","fetch","then","res","json","data","catch","err","console","error","handleEmployeeToggle","username","prev","includes","filter","u","isUserInShift","some","emp","handleCabToggle","newCabOpted","method","headers","body","JSON","stringify","shift_id","id","employee_id","cab_facility","prevList","map","handleEventClick","info","shift","event","date","toISOString","slice","shiftType","title","firstEmp","split","matchedEmp","find","_cabData$find","_cabData$","cabResponse","ok","Error","cabData","length","currentUser","notesResponse","notesData","log","notesMap","forEach","note","employee","defaultEmployee","isWithinShift","now","Date","handleSave","noteToSave","response","notes","is_admin","errorData","timestamp","updatedNotes","e","refreshError","warn","handleAddShift","alert","startDateTime","endDate","setDate","getDate","endDateStr","endDateTime","selectedEmployeeObjects","start_datetime","end_datetime","employee_ids","shift_type","toLowerCase","handleEditShift","_analysts$find","shiftId","selectedUsername","isDuplicate","sameStart","getTime","sameEnd","sameEmployee","differentShift","String","result","handleDeleteShift","slotLabelContent","arg","getHours","slotLaneContent","hour","display","className","children","type","name","defaultChecked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","_c","$RefreshReg$"],"sources":["C:/OfficeData/Projects/soc-portal/src/pages/Roster.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport Modal from \"react-modal\";\r\nimport { useAuth } from \"../context/AuthContext\";\r\nimport \"../styles/Roster.css\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nconst shiftTimeMapping = {\r\n  Night: { start: \"00:00\", end: \"08:00\" },\r\n  Morning: { start: \"08:00\", end: \"16:00\" },\r\n  Evening: { start: \"16:00\", end: \"00:00\" },\r\n};\r\n\r\nconst Roster = () => {\r\n  const { user } = useAuth();\r\n  const isAdmin = user?.role === \"admin\";\r\n  const [cabStatusList, setCabStatusList] = useState([]);\r\n  const [activeTab, setActiveTab] = useState(\"tab1\");\r\n  const [shifts, setShifts] = useState([]);\r\n  const [selectedEmployeeForNotes, setSelectedEmployeeForNotes] = useState(\"\");\r\n  const [employeeNotes, setEmployeeNotes] = useState({});\r\n  const shiftColorMap = useRef({});\r\n  const [selectedShift, setSelectedShift] = useState(null);\r\n  const [comment, setComment] = useState(\"\");\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [saveStatus, setSaveStatus] = useState({ success: null, message: '' });\r\n  const [commentsMap, setCommentsMap] = useState({});\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\r\n  const [newShiftDate, setNewShiftDate] = useState(\"\");\r\n  const [newShiftType, setNewShiftType] = useState(\"Night\");\r\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n  const [analysts, setAnalysts] = useState([]);\r\n  const [cabOpted, setCabOpted] = useState(false);\r\n  const [editShiftType, setEditShiftType] = useState(\"Night\");\r\n  const [editShiftDate, setEditShiftDate] = useState(\"\");\r\n  const [editEmployeeId, setEditEmployeeId] = useState(\"\");\r\n  const shiftColorPool = [\r\n    \"#061e48\", \"#260e20\", \"#081e2c\", \"#220024\", \"#002620\", \"#3d0000\", \"#001020\", \"#2c003e\",\r\n    \"#250a46\", \"#0d0d20\", \"#1d0652\", \"#180a19\", \"#460000\", \"#3e120e\", \"#320f0b\", \"#3c1410\",\r\n    \"#370a0a\", \"#461200\", \"#5c2007\", \"#502916\", \"#69340f\", \"#4e3206\", \"#46220a\", \"#3e2400\",\r\n    \"#382c00\", \"#332e0f\", \"#00202e\", \"#1c004c\", \"#1c0032\", \"#1f0330\", \"#091a12\", \"#0f151c\",\r\n    \"#061020\", \"#420516\", \"#0d0d17\", \"#04131a\", \"#20110c\", \"#0d1b2a\", \"#0e0e18\", \"#141c26\",\r\n    \"#0a1422\", \"#1f1024\", \"#0c1e1e\", \"#0e0e0e\", \"#001a33\", \"#101010\", \"#160e07\", \"#190a12\",\r\n    \"#08162c\", \"#16162a\", \"#150422\", \"#2e003e\", \"#000f1a\", \"#0e1316\", \"#001f3f\", \"#160a16\",\r\n    \"#460046\", \"#400020\", \"#4c1a33\", \"#381432\", \"#521535\", \"#3c0017\", \"#551a35\", \"#260701\",\r\n    \"#0c0c12\", \"#100e1b\", \"#1e1818\", \"#171720\", \"#0f0f18\", \"#111418\", \"#35013f\", \"#0d2617\"\r\n  ];\r\n\r\n\r\n\r\n\r\n  const isMountedRef = useRef(true);\r\n  useEffect(() => {\r\n    isMountedRef.current = true;\r\n    return () => {\r\n      isMountedRef.current = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setIsModalOpen(false);\r\n      setIsAddModalOpen(false);\r\n    }\r\n  }, [user]);\r\n\r\n  const fetchShifts = () => {\r\n    fetch(\"http://localhost:5000/api/shifts\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (isMountedRef.current) setShifts(data);\r\n      })\r\n      .catch((err) => {\r\n        if (isMountedRef.current) console.error(\"Failed to fetch shifts:\", err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchShifts();\r\n    fetch(\"http://localhost:5000/api/analysts\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (isMountedRef.current) setAnalysts(data);\r\n      })\r\n      .catch((err) => {\r\n        if (isMountedRef.current) console.error(\"Failed to fetch analysts:\", err);\r\n      });\r\n  }, []);\r\n\r\n  const handleEmployeeToggle = (username) => {\r\n    setSelectedEmployees((prev) =>\r\n      prev.includes(username) ? prev.filter((u) => u !== username) : [...prev, username]\r\n    );\r\n  };\r\n\r\n  const isUserInShift = () => {\r\n    return cabStatusList.some((emp) => emp.username === user?.username);\r\n  };\r\n\r\n  const handleCabToggle = async () => {\r\n    const newCabOpted = !cabOpted;\r\n    setCabOpted(newCabOpted);\r\n    try {\r\n      await fetch(`http://localhost:5000/api/update_cab_status`, {\r\n        method: \"PATCH\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          shift_id: selectedShift.id,\r\n          employee_id: user.id,\r\n          cab_facility: newCabOpted ? \"Yes\" : \"No\",\r\n        }),\r\n      });\r\n      setCabStatusList(prevList =>\r\n        prevList.map(emp =>\r\n          emp.username === user.username\r\n            ? { ...emp, cab_facility: newCabOpted ? \"Yes\" : \"No\" }\r\n            : emp\r\n        )\r\n      );\r\n    } catch (err) {\r\n      if (isMountedRef.current) console.error(\"Failed to update cab status:\", err);\r\n    }\r\n  };\r\n\r\n  const handleEventClick = async (info) => {\r\n    const shift = info.event;\r\n    if (!isMountedRef.current) return;\r\n\r\n    setSelectedShift(shift);\r\n    setComment(commentsMap[shift.id] || \"\");\r\n\r\n    // Admin logic remains the same\r\n    if (isAdmin) {\r\n      const date = shift.start.toISOString().slice(0, 10);\r\n      let shiftType = \"Morning\";\r\n      if (shift.title.includes(\"Morning\")) shiftType = \"Morning\";\r\n      else if (shift.title.includes(\"Evening\")) shiftType = \"Evening\";\r\n      else if (shift.title.includes(\"Night\")) shiftType = \"Night\";\r\n\r\n      const firstEmp = shift.title.split(\" - \")[0];\r\n      const matchedEmp = analysts.find((emp) => emp.username === firstEmp);\r\n\r\n      setEditShiftType(shiftType);\r\n      setEditShiftDate(date);\r\n      setEditEmployeeId(matchedEmp?.id || \"\");\r\n    }\r\n\r\n    try {\r\n      // 1. First fetch cab status (contains employee info)\r\n      const cabResponse = await fetch(`http://localhost:5000/api/shifts/${shift.id}/cab-status`);\r\n      if (!cabResponse.ok) throw new Error(\"Failed to fetch cab status\");\r\n      const cabData = await cabResponse.json();\r\n\r\n      if (!isMountedRef.current) return;\r\n\r\n      setCabStatusList(cabData);\r\n      if (!isAdmin && cabData.length > 0) {\r\n        const currentUser = cabData.find((emp) => emp.username === user.username);\r\n        setCabOpted(currentUser?.cab_facility === \"Yes\");\r\n      }\r\n\r\n      // 2. Then fetch notes for this shift\r\n      const notesResponse = await fetch(`http://localhost:5000/api/shifts/${shift.id}/notes`);\r\n      if (!notesResponse.ok) throw new Error(\"Failed to fetch notes\");\r\n      const notesData = await notesResponse.json();\r\n\r\n      // Debug logs to verify data\r\n      console.log(\"Cab Data:\", cabData);\r\n      console.log(\"Notes Data:\", notesData);\r\n\r\n      // Create mapping of username to note\r\n      const notesMap = {};\r\n      notesData.forEach(note => {\r\n        // Find the employee in cabData - using id from cab status that matches employee_id in notes\r\n        const employee = cabData.find(emp => emp.id === note.employee_id);\r\n        if (employee) {\r\n          notesMap[employee.username] = note.note;\r\n        }\r\n      });\r\n\r\n      console.log(\"Notes Map:\", notesMap); // Debug log\r\n      setEmployeeNotes(notesMap);\r\n\r\n      // Set default selected employee (current user if in shift, otherwise first employee)\r\n      const defaultEmployee = cabData.find(emp => emp.username === user?.username)?.username ||\r\n        (cabData[0]?.username || '');\r\n      setSelectedEmployeeForNotes(defaultEmployee);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error fetching shift data:\", error);\r\n      if (isMountedRef.current) {\r\n        setCabStatusList([]);\r\n        setEmployeeNotes({});\r\n      }\r\n    }\r\n\r\n    if (isMountedRef.current) setIsModalOpen(true);\r\n  };\r\n\r\n  const isWithinShift = () => {\r\n    if (!selectedShift) return false;\r\n    const now = new Date();\r\n    const start = new Date(selectedShift.start);\r\n    const end = new Date(selectedShift.end);\r\n    return now >= start && now <= end;\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!selectedShift || !selectedEmployeeForNotes) {\r\n      setSaveStatus({ success: false, message: \"No shift or employee selected\" });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSaving(true);\r\n      setSaveStatus({ success: null, message: '' });\r\n\r\n      // Find the employee in the shift\r\n      const employee = cabStatusList.find(emp => emp.username === selectedEmployeeForNotes);\r\n      if (!employee && !isAdmin) {\r\n        throw new Error(\"You are not assigned to this shift\");\r\n      }\r\n\r\n      // Prepare the note content (handle empty strings)\r\n      const noteToSave = employeeNotes[selectedEmployeeForNotes] || \"\";\r\n\r\n      const response = await fetch(\"http://localhost:5000/api/save_notes\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          shift_id: selectedShift.id,\r\n          employee_id: employee?.id, // Safe access with optional chaining\r\n          notes: noteToSave,\r\n          is_admin: isAdmin // Send admin status to backend\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.error || errorData.message || \"Failed to save notes\");\r\n      }\r\n\r\n      // Update local state with the saved note\r\n      setEmployeeNotes(prev => ({\r\n        ...prev,\r\n        [selectedEmployeeForNotes]: noteToSave\r\n      }));\r\n\r\n      setSaveStatus({\r\n        success: true,\r\n        message: \"Notes saved successfully!\",\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      // Refresh notes from server to ensure consistency\r\n      try {\r\n        const notesResponse = await fetch(`http://localhost:5000/api/shifts/${selectedShift.id}/notes`);\r\n        if (notesResponse.ok) {\r\n          const notesData = await notesResponse.json();\r\n          const updatedNotes = {};\r\n          notesData.forEach(note => {\r\n            const emp = cabStatusList.find(e => e.id === note.employee_id);\r\n            if (emp) updatedNotes[emp.username] = note.note;\r\n          });\r\n          setEmployeeNotes(updatedNotes);\r\n        }\r\n      } catch (refreshError) {\r\n        console.warn(\"Couldn't refresh notes:\", refreshError);\r\n      }\r\n\r\n    } catch (err) {\r\n      console.error(\"Error saving notes:\", err);\r\n      setSaveStatus({\r\n        success: false,\r\n        message: err.message || \"An unexpected error occurred\"\r\n      });\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n\r\n  const handleAddShift = async () => {\r\n    if (selectedEmployees.length === 0 || !newShiftDate || !newShiftType) {\r\n      alert(\"Please fill all fields.\");\r\n      return;\r\n    }\r\n\r\n    const { start, end } = shiftTimeMapping[newShiftType];\r\n\r\n    const startDateTime = `${newShiftDate}T${start}:00`;\r\n\r\n    let endDate = new Date(newShiftDate);\r\n    if (end === \"00:00\") {\r\n      endDate.setDate(endDate.getDate() + 1);\r\n    }\r\n    const endDateStr = endDate.toISOString().split('T')[0];\r\n    const endDateTime = `${endDateStr}T${end}:00`;\r\n\r\n    const selectedEmployeeObjects = analysts.filter((emp) =>\r\n      selectedEmployees.includes(emp.username)\r\n    );\r\n\r\n    try {\r\n      for (let emp of selectedEmployeeObjects) {\r\n        const response = await fetch(\r\n          \"http://localhost:5000/api/create_shift\",\r\n          {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n              start_datetime: startDateTime,\r\n              end_datetime: endDateTime,\r\n              employee_ids: [emp.id],\r\n              shift_type: newShiftType.toLowerCase(),\r\n            }),\r\n          }\r\n        );\r\n\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n          alert(\"Error: \" + data.error);\r\n          return;\r\n        }\r\n      }\r\n\r\n      fetchShifts();\r\n      alert(\"Shift(s) created successfully!\");\r\n    } catch (err) {\r\n      console.error(\"Failed to create shift:\", err);\r\n      alert(\"Failed to create shift. Check console for details.\");\r\n    }\r\n\r\n    setIsAddModalOpen(false);\r\n    setSelectedEmployees([]);\r\n  };\r\n\r\n\r\n  const handleEditShift = async () => {\r\n    try {\r\n      const shiftId = selectedShift.id;\r\n\r\n      const { start, end } = shiftTimeMapping[editShiftType];\r\n      const startDateTime = new Date(`${editShiftDate}T${start}`);\r\n      let endDateTime = new Date(`${editShiftDate}T${end}`);\r\n      if (end === \"00:00\") {\r\n        endDateTime.setDate(endDateTime.getDate() + 1);\r\n      }\r\n\r\n      const selectedUsername =\r\n        analysts.find((emp) => emp.id === editEmployeeId)?.username || \"\";\r\n\r\n      const isDuplicate = shifts.some((shift) => {\r\n        const sameStart = new Date(shift.start).getTime() === startDateTime.getTime();\r\n        const sameEnd = new Date(shift.end).getTime() === endDateTime.getTime();\r\n        const sameEmployee = shift.title.includes(selectedUsername);\r\n        const differentShift = String(shift.id) !== String(shiftId);\r\n        return differentShift && sameStart && sameEnd && sameEmployee;\r\n      });\r\n\r\n      if (isDuplicate) {\r\n        alert(\"Another shift already exists in that slot!\");\r\n        return;\r\n      }\r\n\r\n      const response = await fetch(\"http://localhost:5000/api/edit_shift\", {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          shift_id: shiftId,\r\n          date: editShiftDate,\r\n          shift_type: editShiftType.toLowerCase(),\r\n          employee_id: editEmployeeId,\r\n        }),\r\n      });\r\n      const result = await response.json();\r\n      if (!response.ok) {\r\n        alert(\"Error: \" + result.error);\r\n        return;\r\n      }\r\n      fetchShifts();\r\n      setIsModalOpen(false);\r\n      alert(\"Shift updated successfully!\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"Failed to edit shift.\");\r\n    }\r\n  };\r\n  const handleDeleteShift = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/delete_shift\", {\r\n        method: \"DELETE\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ shift_id: selectedShift.id }),\r\n      });\r\n      const result = await response.json();\r\n      if (!response.ok) {\r\n        alert(\"Error: \" + result.error);\r\n        return;\r\n      }\r\n      fetchShifts();\r\n      setIsModalOpen(false);\r\n      alert(\"Shift deleted successfully!\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"Failed to delete shift.\");\r\n    }\r\n  };\r\n\r\n  const slotLabelContent = (arg) => {\r\n    if (arg.date.getHours() === 0) return \"Night\";\r\n    if (arg.date.getHours() === 8) return \"Morning\";\r\n    if (arg.date.getHours() === 16) return \"Evening\";\r\n    return \"\";\r\n  };\r\n\r\n  const slotLaneContent = (arg) => {\r\n    const hour = arg.date.getHours();\r\n    if (hour !== 0 && hour !== 8 && hour !== 16) {\r\n      return { display: \"none\" };\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n\r\n      <div className=\"tab-container\">\r\n        <input type=\"radio\" name=\"tab\" id=\"tab1\" className=\"tab tab--1\" defaultChecked onChange={() => setActiveTab(\"tab1\")} />\r\n        <label className=\"tab_label\" htmlFor=\"tab1\">Shifts</label>\r\n\r\n        <input type=\"radio\" name=\"tab\" id=\"tab2\" className=\"tab tab--2\" onChange={() => setActiveTab(\"tab2\")} />\r\n        <label className=\"tab_label\" htmlFor=\"tab2\">Shift Summary</label>\r\n\r\n        <input type=\"radio\" name=\"tab\" id=\"tab3\" className=\"tab tab--3\" onChange={() => setActiveTab(\"tab3\")} />\r\n        <label className=\"tab_label\" htmlFor=\"tab3\">Cab Status</label>\r\n\r\n        <input type=\"radio\" name=\"tab\" id=\"tab4\" className=\"tab tab--4\" onChange={() => setActiveTab(\"tab4\")} />\r\n        <label className=\"tab_label\" htmlFor=\"tab4\">Notes</label>\r\n\r\n        <div className=\"indicator\"></div>\r\n      </div>\r\n\r\n      <div className=\"tab-content\">\r\n        {activeTab === \"tab1\" &&\r\n          <div>\r\n\r\n\r\n\r\n\r\n          </div>\r\n        }\r\n        {activeTab === \"tab2\" && <div>Shift summary</div>}\r\n        {activeTab === \"tab3\" && <div>Cab status</div>}\r\n        {activeTab === \"tab4\" && <div>Notes</div>}\r\n      </div>\r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n      );\r\n};\r\n\r\nexport default Roster;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}