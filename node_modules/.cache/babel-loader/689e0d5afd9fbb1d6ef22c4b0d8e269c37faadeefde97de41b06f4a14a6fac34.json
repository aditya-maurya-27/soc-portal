{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\Portal\\\\soc-portal\\\\src\\\\pages\\\\HomePage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport \"../styles/HomePage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HomePage() {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const App = {\n      canvas: null,\n      ctx: null,\n      width: 0,\n      height: 0,\n      particles: [],\n      deathCount: 0,\n      stepCount: 0,\n      drawnInLastFrame: 0,\n      animationFrame: null,\n      setup: function () {\n        const canvas = canvasRef.current;\n        const container = canvas.parentElement;\n        this.width = container.clientWidth;\n        this.height = container.clientHeight;\n        canvas.width = this.width;\n        canvas.height = this.height;\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n        this.dataToImageRatio = 1;\n        this.ctx.imageSmoothingEnabled = false;\n        this.xC = this.width / 2;\n        this.yC = this.height / 2;\n\n        // Parameters for worm-like effect\n        this.lifespan = 1000;\n        this.popPerBirth = 5;\n        this.maxPop = 500;\n        this.birthFreq = 3;\n        this.gridSize = 8;\n        this.gridSteps = Math.floor(1000 / this.gridSize);\n        this.grid = [];\n\n        // Improved grid generation for even distribution\n        let i = 0;\n        const gridArea = 1000;\n        const gridRadius = gridArea / 2;\n        const rings = 15; // Number of concentric circles\n\n        // Create evenly distributed grid points\n        for (let r = 0; r < rings; r++) {\n          const radius = r / rings * gridRadius;\n          const circumference = 2 * Math.PI * radius;\n          const pointsOnRing = Math.max(4, Math.floor(circumference / this.gridSize));\n          for (let p = 0; p < pointsOnRing; p++) {\n            const angle = p / pointsOnRing * Math.PI * 2;\n            const x = radius * Math.cos(angle);\n            const y = radius * Math.sin(angle);\n            const rDist = Math.sqrt(x * x + y * y);\n            const r0 = 100;\n            let field = rDist < r0 ? 255 / r0 * rDist : 255 - Math.min(255, (rDist - r0) / 2);\n            this.grid.push({\n              x: x,\n              y: y,\n              busyAge: 0,\n              spotIndex: i,\n              isEdge: false,\n              field: field\n            });\n            i++;\n          }\n        }\n        this.gridMaxIndex = i;\n        this.initDraw();\n        const animate = () => {\n          this.evolve();\n          this.animationFrame = requestAnimationFrame(animate);\n        };\n        animate();\n        this.handleResize = this.handleResize.bind(this);\n        window.addEventListener('resize', this.handleResize);\n      },\n      handleResize: function () {\n        const container = canvasRef.current.parentElement;\n        this.width = container.clientWidth;\n        this.height = container.clientHeight;\n        canvasRef.current.width = this.width;\n        canvasRef.current.height = this.height;\n        this.xC = this.width / 2;\n        this.yC = this.height / 2;\n      },\n      evolve: function () {\n        this.stepCount++;\n        this.grid.forEach(function (e) {\n          if (e.busyAge > 0) e.busyAge++;\n        });\n        if (this.stepCount % this.birthFreq === 0 && this.particles.length + this.popPerBirth < this.maxPop) {\n          this.birth();\n        }\n        this.move();\n        this.draw();\n      },\n      birth: function () {\n        // Get random angle and radius (using sqrt for even distribution)\n        const angle = Math.random() * Math.PI * 2;\n        const radius = Math.sqrt(Math.random()) * 500;\n        const x = radius * Math.cos(angle);\n        const y = radius * Math.sin(angle);\n\n        // Find closest grid spot\n        let closestSpot = this.grid[0];\n        let minDist = Infinity;\n        this.grid.forEach(spot => {\n          const dist = Math.hypot(spot.x - x, spot.y - y);\n          if (dist < minDist) {\n            minDist = dist;\n            closestSpot = spot;\n          }\n        });\n        const particle = {\n          hue: 275 + Math.sin(Date.now() * 0.001) * 20,\n          sat: 100,\n          lum: 50,\n          x: closestSpot.x,\n          y: closestSpot.y,\n          xLast: closestSpot.x,\n          yLast: closestSpot.y,\n          xSpeed: 0,\n          ySpeed: 0,\n          age: 0,\n          ageSinceStuck: 0,\n          attractor: {\n            oldIndex: closestSpot.spotIndex,\n            gridSpotIndex: closestSpot.spotIndex\n          },\n          name: 'worm-' + Math.ceil(10000000 * Math.random())\n        };\n        this.particles.push(particle);\n      },\n      kill: function (particleName) {\n        this.particles = this.particles.filter(seed => seed.name !== particleName);\n        this.deathCount++;\n      },\n      move: function () {\n        for (let i = 0; i < this.particles.length; i++) {\n          const p = this.particles[i];\n          p.xLast = p.x;\n          p.yLast = p.y;\n          let index = p.attractor.gridSpotIndex;\n          let gridSpot = this.grid[index];\n          if (Math.random() < 0.5) {\n            if (!gridSpot.isEdge) {\n              const topIndex = index - 1;\n              const bottomIndex = index + 1;\n              const leftIndex = index - this.gridSteps;\n              const rightIndex = index + this.gridSteps;\n              const neighbors = [];\n              if (topIndex >= 0) neighbors.push(this.grid[topIndex]);\n              if (bottomIndex < this.grid.length) neighbors.push(this.grid[bottomIndex]);\n              if (leftIndex >= 0) neighbors.push(this.grid[leftIndex]);\n              if (rightIndex < this.grid.length) neighbors.push(this.grid[rightIndex]);\n              if (neighbors.length > 0) {\n                const chaos = 30;\n                const maxFieldSpot = neighbors.reduce((max, spot) => spot.field + chaos * Math.random() > max.field + chaos * Math.random() ? spot : max);\n                if (maxFieldSpot.busyAge === 0 || maxFieldSpot.busyAge > 15) {\n                  p.ageSinceStuck = 0;\n                  p.attractor.oldIndex = index;\n                  p.attractor.gridSpotIndex = maxFieldSpot.spotIndex;\n                  gridSpot = maxFieldSpot;\n                  gridSpot.busyAge = 1;\n                } else {\n                  p.ageSinceStuck++;\n                }\n              } else {\n                p.ageSinceStuck++;\n              }\n              if (p.ageSinceStuck === 10) this.kill(p.name);\n            } else {\n              p.ageSinceStuck++;\n            }\n          }\n          const k = 8,\n            visc = 0.4;\n          const dx = p.x - gridSpot.x;\n          const dy = p.y - gridSpot.y;\n          const xAcc = -k * dx;\n          const yAcc = -k * dy;\n          p.xSpeed += xAcc;\n          p.ySpeed += yAcc;\n          p.xSpeed *= visc;\n          p.ySpeed *= visc;\n          p.x += 0.1 * p.xSpeed;\n          p.y += 0.1 * p.ySpeed;\n          p.age++;\n          if (p.age > this.lifespan) {\n            this.kill(p.name);\n          }\n        }\n      },\n      initDraw: function () {\n        this.ctx.fillStyle = 'black';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n      },\n      draw: function () {\n        this.drawnInLastFrame = 0;\n        if (!this.particles.length) return false;\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n        for (let i = 0; i < this.particles.length; i++) {\n          const p = this.particles[i];\n          const h = p.hue + this.stepCount / 30;\n          const s = p.sat;\n          const l = p.lum;\n          const last = this.dataXYtoCanvasXY(p.xLast, p.yLast);\n          const now = this.dataXYtoCanvasXY(p.x, p.y);\n          const attracSpot = this.grid[p.attractor.gridSpotIndex];\n          const attracXY = this.dataXYtoCanvasXY(attracSpot.x, attracSpot.y);\n          const oldAttracSpot = this.grid[p.attractor.oldIndex];\n          const oldAttracXY = this.dataXYtoCanvasXY(oldAttracSpot.x, oldAttracSpot.y);\n\n          // Worm trail\n          this.ctx.beginPath();\n          this.ctx.strokeStyle = `hsla(${h}, ${s}%, ${l}%, 1)`;\n          this.ctx.moveTo(last.x, last.y);\n          this.ctx.lineTo(now.x, now.y);\n          this.ctx.lineWidth = 1.5;\n          this.ctx.stroke();\n\n          // Worm head\n          this.ctx.beginPath();\n          this.ctx.strokeStyle = `hsla(${h}, ${s}%, ${l}%, 0.5)`;\n          this.ctx.moveTo(oldAttracXY.x, oldAttracXY.y);\n          this.ctx.lineTo(attracXY.x, attracXY.y);\n          this.ctx.arc(attracXY.x, attracXY.y, 1.5, 0, Math.PI * 2);\n          this.ctx.stroke();\n          this.drawnInLastFrame++;\n        }\n      },\n      dataXYtoCanvasXY: function (x, y) {\n        const zoom = 1.6;\n        return {\n          x: this.xC + x * zoom * this.dataToImageRatio,\n          y: this.yC + y * zoom * this.dataToImageRatio\n        };\n      }\n    };\n    App.setup();\n    return () => {\n      window.removeEventListener('resize', App.handleResize);\n      if (App.animationFrame) {\n        cancelAnimationFrame(App.animationFrame);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"effect-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"particle-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"banner\",\n        children: \"Cyber Vigiliance Centre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","HomePage","_s","canvasRef","App","canvas","ctx","width","height","particles","deathCount","stepCount","drawnInLastFrame","animationFrame","setup","current","container","parentElement","clientWidth","clientHeight","getContext","dataToImageRatio","imageSmoothingEnabled","xC","yC","lifespan","popPerBirth","maxPop","birthFreq","gridSize","gridSteps","Math","floor","grid","i","gridArea","gridRadius","rings","r","radius","circumference","PI","pointsOnRing","max","p","angle","x","cos","y","sin","rDist","sqrt","r0","field","min","push","busyAge","spotIndex","isEdge","gridMaxIndex","initDraw","animate","evolve","requestAnimationFrame","handleResize","bind","window","addEventListener","forEach","e","length","birth","move","draw","random","closestSpot","minDist","Infinity","spot","dist","hypot","particle","hue","Date","now","sat","lum","xLast","yLast","xSpeed","ySpeed","age","ageSinceStuck","attractor","oldIndex","gridSpotIndex","name","ceil","kill","particleName","filter","seed","index","gridSpot","topIndex","bottomIndex","leftIndex","rightIndex","neighbors","chaos","maxFieldSpot","reduce","k","visc","dx","dy","xAcc","yAcc","fillStyle","fillRect","h","s","l","last","dataXYtoCanvasXY","attracSpot","attracXY","oldAttracSpot","oldAttracXY","beginPath","strokeStyle","moveTo","lineTo","lineWidth","stroke","arc","zoom","removeEventListener","cancelAnimationFrame","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/Portal/soc-portal/src/pages/HomePage.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport \"../styles/HomePage.css\";\r\n\r\nfunction HomePage() {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const App = {\r\n      canvas: null,\r\n      ctx: null,\r\n      width: 0,\r\n      height: 0,\r\n      particles: [],\r\n      deathCount: 0,\r\n      stepCount: 0,\r\n      drawnInLastFrame: 0,\r\n      animationFrame: null,\r\n\r\n      setup: function() {\r\n        const canvas = canvasRef.current;\r\n        const container = canvas.parentElement;\r\n        \r\n        this.width = container.clientWidth;\r\n        this.height = container.clientHeight;\r\n        canvas.width = this.width;\r\n        canvas.height = this.height;\r\n        \r\n        this.canvas = canvas;\r\n        this.ctx = canvas.getContext(\"2d\");\r\n        this.dataToImageRatio = 1;\r\n        this.ctx.imageSmoothingEnabled = false;\r\n        this.xC = this.width / 2;\r\n        this.yC = this.height / 2;\r\n        \r\n        // Parameters for worm-like effect\r\n        this.lifespan = 1000;\r\n        this.popPerBirth = 5;\r\n        this.maxPop = 500;\r\n        this.birthFreq = 3;\r\n        this.gridSize = 8;\r\n        this.gridSteps = Math.floor(1000 / this.gridSize);\r\n        this.grid = [];\r\n        \r\n        // Improved grid generation for even distribution\r\n        let i = 0;\r\n        const gridArea = 1000;\r\n        const gridRadius = gridArea / 2;\r\n        const rings = 15; // Number of concentric circles\r\n        \r\n        // Create evenly distributed grid points\r\n        for (let r = 0; r < rings; r++) {\r\n          const radius = (r / rings) * gridRadius;\r\n          const circumference = 2 * Math.PI * radius;\r\n          const pointsOnRing = Math.max(4, Math.floor(circumference / this.gridSize));\r\n          \r\n          for (let p = 0; p < pointsOnRing; p++) {\r\n            const angle = (p / pointsOnRing) * Math.PI * 2;\r\n            const x = radius * Math.cos(angle);\r\n            const y = radius * Math.sin(angle);\r\n            \r\n            const rDist = Math.sqrt(x*x + y*y);\r\n            const r0 = 100;\r\n            let field = rDist < r0 ? (255 / r0 * rDist) : (255 - Math.min(255, (rDist - r0)/2));\r\n            \r\n            this.grid.push({\r\n              x: x,\r\n              y: y,\r\n              busyAge: 0,\r\n              spotIndex: i,\r\n              isEdge: false,\r\n              field: field\r\n            });\r\n            i++;\r\n          }\r\n        }\r\n        this.gridMaxIndex = i;\r\n        \r\n        this.initDraw();\r\n        \r\n        const animate = () => {\r\n          this.evolve();\r\n          this.animationFrame = requestAnimationFrame(animate);\r\n        };\r\n        animate();\r\n        \r\n        this.handleResize = this.handleResize.bind(this);\r\n        window.addEventListener('resize', this.handleResize);\r\n      },\r\n\r\n      handleResize: function() {\r\n        const container = canvasRef.current.parentElement;\r\n        this.width = container.clientWidth;\r\n        this.height = container.clientHeight;\r\n        canvasRef.current.width = this.width;\r\n        canvasRef.current.height = this.height;\r\n        this.xC = this.width / 2;\r\n        this.yC = this.height / 2;\r\n      },\r\n\r\n      evolve: function() {\r\n        this.stepCount++;\r\n        \r\n        this.grid.forEach(function(e) {\r\n          if (e.busyAge > 0) e.busyAge++;\r\n        });\r\n        \r\n        if (this.stepCount % this.birthFreq === 0 && \r\n            (this.particles.length + this.popPerBirth) < this.maxPop) {\r\n          this.birth();\r\n        }\r\n        this.move();\r\n        this.draw();\r\n      },\r\n\r\n      birth: function() {\r\n        // Get random angle and radius (using sqrt for even distribution)\r\n        const angle = Math.random() * Math.PI * 2;\r\n        const radius = Math.sqrt(Math.random()) * 500;\r\n        \r\n        const x = radius * Math.cos(angle);\r\n        const y = radius * Math.sin(angle);\r\n        \r\n        // Find closest grid spot\r\n        let closestSpot = this.grid[0];\r\n        let minDist = Infinity;\r\n        \r\n        this.grid.forEach(spot => {\r\n          const dist = Math.hypot(spot.x - x, spot.y - y);\r\n          if (dist < minDist) {\r\n            minDist = dist;\r\n            closestSpot = spot;\r\n          }\r\n        });\r\n        \r\n        const particle = {\r\n          hue: 275 + Math.sin(Date.now()*0.001)*20,\r\n          sat: 100,\r\n          lum: 50,\r\n          x: closestSpot.x, \r\n          y: closestSpot.y,\r\n          xLast: closestSpot.x, \r\n          yLast: closestSpot.y,\r\n          xSpeed: 0, \r\n          ySpeed: 0,\r\n          age: 0,\r\n          ageSinceStuck: 0,\r\n          attractor: {\r\n            oldIndex: closestSpot.spotIndex,\r\n            gridSpotIndex: closestSpot.spotIndex,\r\n          },\r\n          name: 'worm-' + Math.ceil(10000000 * Math.random())\r\n        };\r\n        this.particles.push(particle);\r\n      },\r\n\r\n      kill: function(particleName) {\r\n        this.particles = this.particles.filter(seed => seed.name !== particleName);\r\n        this.deathCount++;\r\n      },\r\n\r\n      move: function() {\r\n        for (let i = 0; i < this.particles.length; i++) {\r\n          const p = this.particles[i];\r\n          p.xLast = p.x; \r\n          p.yLast = p.y;\r\n          \r\n          let index = p.attractor.gridSpotIndex;\r\n          let gridSpot = this.grid[index];\r\n          \r\n          if (Math.random() < 0.5) {\r\n            if (!gridSpot.isEdge) {\r\n              const topIndex = index - 1;\r\n              const bottomIndex = index + 1;\r\n              const leftIndex = index - this.gridSteps;\r\n              const rightIndex = index + this.gridSteps;\r\n              \r\n              const neighbors = [];\r\n              if (topIndex >= 0) neighbors.push(this.grid[topIndex]);\r\n              if (bottomIndex < this.grid.length) neighbors.push(this.grid[bottomIndex]);\r\n              if (leftIndex >= 0) neighbors.push(this.grid[leftIndex]);\r\n              if (rightIndex < this.grid.length) neighbors.push(this.grid[rightIndex]);\r\n              \r\n              if (neighbors.length > 0) {\r\n                const chaos = 30;\r\n                const maxFieldSpot = neighbors.reduce((max, spot) => \r\n                  (spot.field + chaos * Math.random()) > \r\n                  (max.field + chaos * Math.random()) ? spot : max\r\n                );\r\n                \r\n                if (maxFieldSpot.busyAge === 0 || maxFieldSpot.busyAge > 15) {\r\n                  p.ageSinceStuck = 0;\r\n                  p.attractor.oldIndex = index;\r\n                  p.attractor.gridSpotIndex = maxFieldSpot.spotIndex;\r\n                  gridSpot = maxFieldSpot;\r\n                  gridSpot.busyAge = 1;\r\n                } else {\r\n                  p.ageSinceStuck++;\r\n                }\r\n              } else {\r\n                p.ageSinceStuck++;\r\n              }\r\n              \r\n              if (p.ageSinceStuck === 10) this.kill(p.name);\r\n            } else {\r\n              p.ageSinceStuck++;\r\n            }\r\n          }\r\n          \r\n          const k = 8, visc = 0.4;\r\n          const dx = p.x - gridSpot.x;\r\n          const dy = p.y - gridSpot.y;\r\n          \r\n          const xAcc = -k * dx;\r\n          const yAcc = -k * dy;\r\n          \r\n          p.xSpeed += xAcc; \r\n          p.ySpeed += yAcc;\r\n          p.xSpeed *= visc; \r\n          p.ySpeed *= visc;\r\n          \r\n          p.x += 0.1 * p.xSpeed; \r\n          p.y += 0.1 * p.ySpeed;\r\n          p.age++;\r\n          \r\n          if (p.age > this.lifespan) {\r\n            this.kill(p.name);\r\n          }\r\n        }\r\n      },\r\n\r\n      initDraw: function() {\r\n        this.ctx.fillStyle = 'black';\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n      },\r\n\r\n      draw: function() {\r\n        this.drawnInLastFrame = 0;\r\n        if (!this.particles.length) return false;\r\n        \r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        \r\n        for (let i = 0; i < this.particles.length; i++) {\r\n          const p = this.particles[i];\r\n          const h = p.hue + this.stepCount/30;\r\n          const s = p.sat;\r\n          const l = p.lum;\r\n          \r\n          const last = this.dataXYtoCanvasXY(p.xLast, p.yLast);\r\n          const now = this.dataXYtoCanvasXY(p.x, p.y);\r\n          const attracSpot = this.grid[p.attractor.gridSpotIndex];\r\n          const attracXY = this.dataXYtoCanvasXY(attracSpot.x, attracSpot.y);\r\n          const oldAttracSpot = this.grid[p.attractor.oldIndex];\r\n          const oldAttracXY = this.dataXYtoCanvasXY(oldAttracSpot.x, oldAttracSpot.y);\r\n          \r\n          // Worm trail\r\n          this.ctx.beginPath();\r\n          this.ctx.strokeStyle = `hsla(${h}, ${s}%, ${l}%, 1)`;\r\n          this.ctx.moveTo(last.x, last.y);\r\n          this.ctx.lineTo(now.x, now.y);\r\n          this.ctx.lineWidth = 1.5;\r\n          this.ctx.stroke();\r\n          \r\n          // Worm head\r\n          this.ctx.beginPath();\r\n          this.ctx.strokeStyle = `hsla(${h}, ${s}%, ${l}%, 0.5)`;\r\n          this.ctx.moveTo(oldAttracXY.x, oldAttracXY.y);\r\n          this.ctx.lineTo(attracXY.x, attracXY.y);\r\n          this.ctx.arc(attracXY.x, attracXY.y, 1.5, 0, Math.PI * 2);\r\n          this.ctx.stroke();\r\n          \r\n          this.drawnInLastFrame++;\r\n        }\r\n      },\r\n\r\n      dataXYtoCanvasXY: function(x, y) {\r\n        const zoom = 1.6;\r\n        return {\r\n          x: this.xC + x * zoom * this.dataToImageRatio,\r\n          y: this.yC + y * zoom * this.dataToImageRatio\r\n        };\r\n      }\r\n    };\r\n\r\n    App.setup();\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', App.handleResize);\r\n      if (App.animationFrame) {\r\n        cancelAnimationFrame(App.animationFrame);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      <div className=\"effect-area\">\r\n        <canvas ref={canvasRef} className=\"particle-canvas\" />\r\n        <p className=\"banner\">Cyber Vigiliance Centre</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}