{"ast":null,"code":"var _jsxFileName = \"C:\\\\OfficeData\\\\Projects\\\\soc-portal\\\\src\\\\pages\\\\Shifts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport Modal from \"react-modal\";\nimport { useAuth } from \"../context/AuthContext\";\nimport \"../styles/Shifts.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst shiftTimeMapping = {\n  Night: {\n    start: \"00:00\",\n    end: \"08:00\"\n  },\n  Morning: {\n    start: \"08:00\",\n    end: \"16:00\"\n  },\n  Evening: {\n    start: \"16:00\",\n    end: \"00:00\"\n  }\n};\nconst Shifts = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const isAdmin = (user === null || user === void 0 ? void 0 : user.role) === \"admin\";\n  const [cabStatusList, setCabStatusList] = useState([]);\n  const [shifts, setShifts] = useState([]);\n  const [selectedEmployeeForNotes, setSelectedEmployeeForNotes] = useState(\"\");\n  const [employeeNotes, setEmployeeNotes] = useState({});\n  const shiftColorMap = useRef({});\n  const [selectedShift, setSelectedShift] = useState(null);\n  const [comment, setComment] = useState(\"\");\n  const [isSaving, setIsSaving] = useState(false);\n  const [saveStatus, setSaveStatus] = useState({\n    success: null,\n    message: ''\n  });\n  const [commentsMap, setCommentsMap] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [newShiftDate, setNewShiftDate] = useState(\"\");\n  const [newShiftType, setNewShiftType] = useState(\"Night\");\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\n  const [analysts, setAnalysts] = useState([]);\n  const [cabOpted, setCabOpted] = useState(false);\n  const [editShiftType, setEditShiftType] = useState(\"Night\");\n  const [editShiftDate, setEditShiftDate] = useState(\"\");\n  const [editEmployeeId, setEditEmployeeId] = useState(\"\");\n  const shiftColorPool = [\"#0b3d91\",\n  // dark azure blue\n  \"#4b1d3f\",\n  // deep plum\n  \"#0f3b57\",\n  // midnight teal\n  \"#440047\",\n  // deep grape\n  \"#004d40\",\n  // deep teal\n  \"#3d0000\",\n  // deep maroon\n  \"#00203f\",\n  // dark navy\n  \"#2c003e\",\n  // dark purple\n  \"#4a148c\",\n  // indigo\n  \"#1a1a40\",\n  // navy black\n  \"#3a0ca3\",\n  // royal violet\n  \"#311432\",\n  // raisin black\n  \"#8B0000\",\n  // dark red\n  \"#7B241C\",\n  // deep crimson\n  \"#641E16\",\n  // dark cherry\n  \"#78281F\",\n  // wine red\n  \"#6E1414\",\n  // roasted red\n  \"#8B2500\",\n  // burnt orange\n  \"#B7410E\",\n  // rust\n  \"#A0522D\",\n  // sienna brown\n  \"#D2691E\",\n  // chocolate orange\n  \"#9C640C\",\n  // golden bronze\n  \"#8B4513\",\n  // saddle brown\n  \"#7C4700\",\n  // caramel burnt\n  \"#705700\",\n  // muddy gold\n  \"#665D1E\",\n  // dark mustard\n  \"#003f5c\",\n  // deep ocean blue\n  \"#390099\",\n  // vibrant purple\n  \"#1c0032\",\n  // dark violet\n  \"#3e065f\",\n  // cosmic purple\n  \"#123524\",\n  // pine green\n  \"#1e2a38\",\n  // shadow slate\n  \"#0c1f3f\",\n  // indigo night\n  \"#420516\",\n  // merlot\n  \"#1a1a2e\",\n  // deep blue-gray\n  \"#092635\",\n  // arctic navy\n  \"#402218\",\n  // dark brown\n  \"#0d1b2a\",\n  // dark sea navy\n  \"#1b1b2f\",\n  // gothic gray\n  \"#27374d\",\n  // dusty night blue\n  \"#132743\",\n  // midnight steel\n  \"#3e1f47\",\n  // mulberry\n  \"#183D3D\",\n  // sea moss\n  \"#1c1c1c\",\n  // nearly black\n  \"#003366\",\n  // classic navy\n  \"#212121\",\n  // pitch black\n  \"#2b1d0e\",\n  // earthy brown\n  \"#321325\",\n  // shadow magenta\n  \"#102c57\",\n  // blue slate\n  \"#2c2c54\",\n  // dusk purple\n  \"#2a0944\",\n  // grape skin\n  \"#2e003e\",\n  // plum pit\n  \"#000f1a\",\n  // true deep blue\n  \"#1b262c\",\n  // blue-black\n  \"#001f3f\",\n  // abyss blue\n  \"#2d132c\",\n  // noir rose\n  \"#8B008B\",\n  // Dark Magenta\n  \"#800040\",\n  // Deep Rose\n  \"#993366\",\n  // Dusky Pink\n  \"#702963\",\n  // Byzantium\n  \"#A52A6A\",\n  // Rose Red\n  \"#78002E\",\n  // Dark Raspberry\n  \"#AA336A\",\n  // Vintage Pink\n  \"#260701\",\n  // ember coal\n  \"#191825\",\n  // nightfall\n  \"#1f1d36\",\n  // dark orchid\n  \"#3b2f2f\",\n  // cocoa ash\n  \"#2e2e40\",\n  // grayish indigo\n  \"#1e1e2f\",\n  // subdued navy\n  \"#222831\",\n  // graphite\n  \"#35013f\",\n  // strong plum\n  \"#1A4D2E\" // deep forest green\n  ];\n  const isMountedRef = useRef(true);\n  useEffect(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  useEffect(() => {\n    if (!user) {\n      setIsModalOpen(false);\n      setIsAddModalOpen(false);\n    }\n  }, [user]);\n  const fetchShifts = () => {\n    fetch(\"http://localhost:5000/api/shifts\").then(res => res.json()).then(data => {\n      if (!isMountedRef.current) return;\n      const adjustedShifts = data.map(shift => {\n        var _shift$employees;\n        const startDateTime = `${shift.date}T${shift.start_time}`;\n        let endDateTime;\n        if (shift.shift_type === \"evening\" && shift.end_time === \"00:00:00\") {\n          const nextDay = new Date(shift.date);\n          nextDay.setDate(nextDay.getDate() + 1);\n          const nextDayStr = nextDay.toISOString().split(\"T\")[0];\n          endDateTime = `${nextDayStr}T${shift.end_time}`;\n        } else {\n          endDateTime = `${shift.date}T${shift.end_time}`;\n        }\n        return {\n          id: shift.id,\n          title: `${shift.shift_type.charAt(0).toUpperCase() + shift.shift_type.slice(1)} - ${((_shift$employees = shift.employees) === null || _shift$employees === void 0 ? void 0 : _shift$employees.join(\", \")) || \"\"}`,\n          start: startDateTime,\n          end: endDateTime\n        };\n      });\n      setShifts(adjustedShifts);\n    }).catch(err => {\n      if (isMountedRef.current) console.error(\"Failed to fetch shifts:\", err);\n    });\n  };\n  useEffect(() => {\n    fetchShifts();\n    fetch(\"http://localhost:5000/api/analysts\").then(res => res.json()).then(data => {\n      if (isMountedRef.current) setAnalysts(data);\n    }).catch(err => {\n      if (isMountedRef.current) console.error(\"Failed to fetch analysts:\", err);\n    });\n  }, []);\n  const handleEmployeeToggle = username => {\n    setSelectedEmployees(prev => prev.includes(username) ? prev.filter(u => u !== username) : [...prev, username]);\n  };\n  const isUserInShift = () => {\n    return cabStatusList.some(emp => emp.username === (user === null || user === void 0 ? void 0 : user.username));\n  };\n  const handleCabToggle = async () => {\n    const newCabOpted = !cabOpted;\n    setCabOpted(newCabOpted);\n    try {\n      await fetch(`http://localhost:5000/api/update_cab_status`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          shift_id: selectedShift.id,\n          employee_id: user.id,\n          cab_facility: newCabOpted ? \"Yes\" : \"No\"\n        })\n      });\n      setCabStatusList(prevList => prevList.map(emp => emp.username === user.username ? {\n        ...emp,\n        cab_facility: newCabOpted ? \"Yes\" : \"No\"\n      } : emp));\n    } catch (err) {\n      if (isMountedRef.current) console.error(\"Failed to update cab status:\", err);\n    }\n  };\n  const handleEventClick = async info => {\n    const shift = info.event;\n    if (!isMountedRef.current) return;\n    setSelectedShift(shift);\n    setComment(commentsMap[shift.id] || \"\");\n\n    // Admin logic remains the same\n    if (isAdmin) {\n      const date = shift.start.toISOString().slice(0, 10);\n      let shiftType = \"Morning\";\n      if (shift.title.includes(\"Morning\")) shiftType = \"Morning\";else if (shift.title.includes(\"Evening\")) shiftType = \"Evening\";else if (shift.title.includes(\"Night\")) shiftType = \"Night\";\n      const firstEmp = shift.title.split(\" - \")[0];\n      const matchedEmp = analysts.find(emp => emp.username === firstEmp);\n      setEditShiftType(shiftType);\n      setEditShiftDate(date);\n      setEditEmployeeId((matchedEmp === null || matchedEmp === void 0 ? void 0 : matchedEmp.id) || \"\");\n    }\n    try {\n      var _cabData$find, _cabData$;\n      // 1. First fetch cab status (contains employee info)\n      const cabResponse = await fetch(`http://localhost:5000/api/shifts/${shift.id}/cab-status`);\n      if (!cabResponse.ok) throw new Error(\"Failed to fetch cab status\");\n      const cabData = await cabResponse.json();\n      if (!isMountedRef.current) return;\n      setCabStatusList(cabData);\n      if (!isAdmin && cabData.length > 0) {\n        const currentUser = cabData.find(emp => emp.username === user.username);\n        setCabOpted((currentUser === null || currentUser === void 0 ? void 0 : currentUser.cab_facility) === \"Yes\");\n      }\n\n      // 2. Then fetch notes for this shift\n      const notesResponse = await fetch(`http://localhost:5000/api/shifts/${shift.id}/notes`);\n      if (!notesResponse.ok) throw new Error(\"Failed to fetch notes\");\n      const notesData = await notesResponse.json();\n\n      // Debug logs to verify data\n      console.log(\"Cab Data:\", cabData);\n      console.log(\"Notes Data:\", notesData);\n\n      // Create mapping of username to note\n      const notesMap = {};\n      notesData.forEach(note => {\n        // Find the employee in cabData - using id from cab status that matches employee_id in notes\n        const employee = cabData.find(emp => emp.id === note.employee_id);\n        if (employee) {\n          notesMap[employee.username] = note.note;\n        }\n      });\n      console.log(\"Notes Map:\", notesMap); // Debug log\n      setEmployeeNotes(notesMap);\n\n      // Set default selected employee (current user if in shift, otherwise first employee)\n      const defaultEmployee = ((_cabData$find = cabData.find(emp => emp.username === (user === null || user === void 0 ? void 0 : user.username))) === null || _cabData$find === void 0 ? void 0 : _cabData$find.username) || ((_cabData$ = cabData[0]) === null || _cabData$ === void 0 ? void 0 : _cabData$.username) || '';\n      setSelectedEmployeeForNotes(defaultEmployee);\n    } catch (error) {\n      console.error(\"Error fetching shift data:\", error);\n      if (isMountedRef.current) {\n        setCabStatusList([]);\n        setEmployeeNotes({});\n      }\n    }\n    if (isMountedRef.current) setIsModalOpen(true);\n  };\n  const isWithinShift = () => {\n    if (!selectedShift) return false;\n    const now = new Date();\n    const start = new Date(selectedShift.start);\n    const end = new Date(selectedShift.end);\n    return now >= start && now <= end;\n  };\n  const handleSave = async () => {\n    if (!selectedShift || !selectedEmployeeForNotes) {\n      setSaveStatus({\n        success: false,\n        message: \"No shift or employee selected\"\n      });\n      return;\n    }\n    try {\n      setIsSaving(true);\n      setSaveStatus({\n        success: null,\n        message: ''\n      });\n\n      // Find the employee in the shift\n      const employee = cabStatusList.find(emp => emp.username === selectedEmployeeForNotes);\n      if (!employee && !isAdmin) {\n        throw new Error(\"You are not assigned to this shift\");\n      }\n\n      // Prepare the note content (handle empty strings)\n      const noteToSave = employeeNotes[selectedEmployeeForNotes] || \"\";\n      const response = await fetch(\"http://localhost:5000/api/save_notes\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          shift_id: selectedShift.id,\n          employee_id: employee === null || employee === void 0 ? void 0 : employee.id,\n          // Safe access with optional chaining\n          notes: noteToSave,\n          is_admin: isAdmin // Send admin status to backend\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || errorData.message || \"Failed to save notes\");\n      }\n\n      // Update local state with the saved note\n      setEmployeeNotes(prev => ({\n        ...prev,\n        [selectedEmployeeForNotes]: noteToSave\n      }));\n      setSaveStatus({\n        success: true,\n        message: \"Notes saved successfully!\",\n        timestamp: new Date().toISOString()\n      });\n\n      // Refresh notes from server to ensure consistency\n      try {\n        const notesResponse = await fetch(`http://localhost:5000/api/shifts/${selectedShift.id}/notes`);\n        if (notesResponse.ok) {\n          const notesData = await notesResponse.json();\n          const updatedNotes = {};\n          notesData.forEach(note => {\n            const emp = cabStatusList.find(e => e.id === note.employee_id);\n            if (emp) updatedNotes[emp.username] = note.note;\n          });\n          setEmployeeNotes(updatedNotes);\n        }\n      } catch (refreshError) {\n        console.warn(\"Couldn't refresh notes:\", refreshError);\n      }\n    } catch (err) {\n      console.error(\"Error saving notes:\", err);\n      setSaveStatus({\n        success: false,\n        message: err.message || \"An unexpected error occurred\"\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  const handleAddShift = async () => {\n    if (selectedEmployees.length === 0 || !newShiftDate || !newShiftType) {\n      alert(\"Please fill all fields.\");\n      return;\n    }\n    const {\n      start,\n      end\n    } = shiftTimeMapping[newShiftType];\n    const startDateTime = `${newShiftDate}T${start}`;\n    let endDateTime;\n    if (newShiftType === \"Evening\" && end === \"00:00\") {\n      const nextDay = new Date(newShiftDate);\n      nextDay.setDate(nextDay.getDate() + 1);\n      const nextDayStr = nextDay.toISOString().split('T')[0];\n      endDateTime = `${nextDayStr}T${end}`;\n    } else {\n      endDateTime = `${newShiftDate}T${end}`;\n    }\n    const selectedEmployeeObjects = analysts.filter(emp => selectedEmployees.includes(emp.username));\n    try {\n      for (let emp of selectedEmployeeObjects) {\n        const response = await fetch(\"http://localhost:5000/api/create_shift\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            date: newShiftDate,\n            // ✅ required by backend\n            shift_type: newShiftType.toLowerCase(),\n            employee_ids: [emp.id],\n            start: startDateTime,\n            end: endDateTime\n          })\n        });\n        const data = await response.json();\n        if (!response.ok) {\n          alert(\"Error: \" + data.error);\n          return;\n        }\n      }\n      fetchShifts();\n      alert(\"Shift(s) created successfully!\");\n    } catch (err) {\n      console.error(\"Failed to create shift:\", err);\n      alert(\"Failed to create shift. Check console for details.\");\n    }\n    setIsAddModalOpen(false);\n    setSelectedEmployees([]);\n  };\n  const handleEditShift = async () => {\n    try {\n      var _analysts$find;\n      const shiftId = selectedShift.id;\n      const {\n        start,\n        end\n      } = shiftTimeMapping[editShiftType];\n      const startDateTime = new Date(`${editShiftDate}T${start}`);\n      let endDateTime = new Date(`${editShiftDate}T${end}`);\n      if (end === \"00:00\") {\n        endDateTime.setDate(endDateTime.getDate() + 1);\n      }\n      const selectedUsername = ((_analysts$find = analysts.find(emp => emp.id === editEmployeeId)) === null || _analysts$find === void 0 ? void 0 : _analysts$find.username) || \"\";\n      const isDuplicate = shifts.some(shift => {\n        const sameStart = new Date(shift.start).getTime() === startDateTime.getTime();\n        const sameEnd = new Date(shift.end).getTime() === endDateTime.getTime();\n        const sameEmployee = shift.title.includes(selectedUsername);\n        const differentShift = String(shift.id) !== String(shiftId);\n        return differentShift && sameStart && sameEnd && sameEmployee;\n      });\n      if (isDuplicate) {\n        alert(\"Another shift already exists in that slot!\");\n        return;\n      }\n      const response = await fetch(\"http://localhost:5000/api/edit_shift\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          shift_id: shiftId,\n          date: editShiftDate,\n          shift_type: editShiftType.toLowerCase(),\n          employee_id: editEmployeeId\n        })\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        alert(\"Error: \" + result.error);\n        return;\n      }\n      fetchShifts();\n      setIsModalOpen(false);\n      alert(\"Shift updated successfully!\");\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to edit shift.\");\n    }\n  };\n  const handleDeleteShift = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/delete_shift\", {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          shift_id: selectedShift.id\n        })\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        alert(\"Error: \" + result.error);\n        return;\n      }\n      fetchShifts();\n      setIsModalOpen(false);\n      alert(\"Shift deleted successfully!\");\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to delete shift.\");\n    }\n  };\n  const slotLabelContent = arg => {\n    if (arg.date.getHours() === 0) return \"Night\";\n    if (arg.date.getHours() === 8) return \"Morning\";\n    if (arg.date.getHours() === 16) return \"Evening\";\n    return \"\";\n  };\n  const slotLaneContent = arg => {\n    const hour = arg.date.getHours();\n    if (hour !== 0 && hour !== 8 && hour !== 16) {\n      return {\n        display: \"none\"\n      };\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"shifts-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shifts-calendar\",\n      children: [isAdmin && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsAddModalOpen(true),\n        className: \"add-shift-btn\",\n        children: \"Create Shift\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n        eventDidMount: info => {\n          const shiftId = info.event.id;\n\n          // Assign color to shift\n          if (!shiftColorMap.current[shiftId]) {\n            const randomColor = shiftColorPool[Math.floor(Math.random() * shiftColorPool.length)];\n            shiftColorMap.current[shiftId] = randomColor;\n          }\n          const color = shiftColorMap.current[shiftId];\n          info.el.style.backgroundColor = color;\n          info.el.style.color = \"#fff\";\n          info.el.style.borderColor = color;\n\n          //glare effect\n          if (window.VanillaTilt && info.el) {\n            window.VanillaTilt.init(info.el, {\n              glare: true,\n              \"max-glare\": 0.3\n            });\n          }\n        },\n        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n        initialView: \"timeGridWeek\",\n        slotDuration: \"08:00:00\",\n        slotLabelInterval: {\n          hours: 8\n        },\n        allDaySlot: false,\n        slotMinTime: \"00:00:00\",\n        slotMaxTime: \"24:00:00\",\n        events: shifts,\n        eventClick: handleEventClick,\n        slotLabelContent: slotLabelContent,\n        slotEventOverlap: false,\n        slotLaneContent: slotLaneContent,\n        headerToolbar: {\n          left: \"prev,next,today\",\n          center: \"title\",\n          right: \"timeGridDay,timeGridWeek,dayGridMonth\"\n        },\n        height: \"auto\",\n        eventOverlap: false,\n        dayMaxEventRows: true,\n        dayMaxEvents: true,\n        displayEventTime: false,\n        eventOrder: \"title\",\n        eventContent: arg => {\n          const titleParts = arg.event.title.split(\" - \");\n          const shiftTitle = titleParts[0];\n          const employeesRaw = titleParts[1] || \"\";\n          const employeeList = employeesRaw.split(\",\").map((name, index) => `<div>${index + 1}. ${name.trim()}</div>`).join(\"\");\n          return {\n            html: `<div style=\"padding: 2px;\">\n                <strong>${shiftTitle}</strong>\n                <div style=\"margin-top: 4px;\">${employeeList}</div>\n             </div>`\n          };\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      className: \"modal\",\n      overlayClassName: \"overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Shift Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 9\n      }, this), selectedShift && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"left-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Shift:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 613,\n                columnNumber: 19\n              }, this), \" \", selectedShift.title]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 612,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Start:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 616,\n                columnNumber: 19\n              }, this), \" \", new Date(selectedShift.start).toLocaleString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 615,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"End:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 620,\n                columnNumber: 19\n              }, this), \" \", new Date(selectedShift.end).toLocaleString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cab-status-list\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Cab Facility Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 625,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: cabStatusList.length === 0 ? /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"No cab data available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 628,\n                  columnNumber: 23\n                }, this) : cabStatusList.map(emp => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [emp.username, \" \\u2013 \", emp.cab_facility === \"Yes\" ? \"Yes\" : \"No\"]\n                }, emp.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 631,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 626,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 624,\n              columnNumber: 17\n            }, this), isAdmin && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Edit Shift\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 642,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                value: editShiftDate,\n                onChange: e => setEditShiftDate(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 643,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Shift Type:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 649,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: editShiftType,\n                onChange: e => setEditShiftType(e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  children: \"Morning\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 654,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  children: \"Evening\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 655,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  children: \"Night\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 656,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 650,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Employee:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 659,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: editEmployeeId,\n                onChange: e => setEditEmployeeId(e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select employee\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 664,\n                  columnNumber: 23\n                }, this), analysts.map(emp => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: emp.id,\n                  children: emp.username\n                }, emp.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 666,\n                  columnNumber: 25\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 660,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"right-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"label1\",\n              children: \"Comments / Notes:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 17\n            }, this), cabStatusList.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"notes-selector-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedEmployeeForNotes,\n                onChange: e => {\n                  setSelectedEmployeeForNotes(e.target.value);\n                },\n                className: \"notes-employee-select\",\n                disabled: cabStatusList.length === 0,\n                children: cabStatusList.map(emp => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: emp.username,\n                  children: [emp.username, \"'s Notes\", (user === null || user === void 0 ? void 0 : user.username) === emp.username ? \" (You)\" : \"\"]\n                }, emp.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 688,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 679,\n                columnNumber: 21\n              }, this), employeeNotes[selectedEmployeeForNotes] && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"last-updated\",\n                children: [\"Last updated: \", new Date().toLocaleString(), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 695,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 678,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"no-notes-message\",\n              children: \"No employees assigned to this shift\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 701,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              rows: \"10\",\n              value: employeeNotes[selectedEmployeeForNotes] || \"\",\n              onChange: e => {\n                const newNotes = {\n                  ...employeeNotes\n                };\n                newNotes[selectedEmployeeForNotes] = e.target.value;\n                setEmployeeNotes(newNotes);\n              },\n              disabled: !isAdmin && (!isWithinShift() || (user === null || user === void 0 ? void 0 : user.username) !== selectedEmployeeForNotes),\n              className: !isAdmin && (user === null || user === void 0 ? void 0 : user.username) !== selectedEmployeeForNotes ? \"notes-textarea view-only\" : \"notes-textarea\",\n              spellCheck: \"false\",\n              placeholder: isAdmin ? \"Add or edit notes here...\" : isWithinShift() ? (user === null || user === void 0 ? void 0 : user.username) === selectedEmployeeForNotes ? \"Add or edit your notes here...\" : \"Viewing another employee's notes (read-only)\" : \"Notes can only be edited during shift time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 704,\n              columnNumber: 17\n            }, this), !isWithinShift() && !isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"edit-disabled-message\",\n              children: \"\\u26A0\\uFE0F Note: Editing is only allowed during shift hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 734,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 675,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-buttons\",\n          children: [isSaving && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"save-status saving\",\n            children: \"Saving...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 742,\n            columnNumber: 28\n          }, this), saveStatus.message && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `save-status ${saveStatus.success ? 'success' : 'error'}`,\n            children: saveStatus.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 744,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSave,\n            disabled: !isWithinShift() && !isAdmin || isSaving,\n            className: \"modal-btn save-btn\",\n            children: isSaving ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"spinner\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 756,\n                columnNumber: 21\n              }, this), \" Saving...\"]\n            }, void 0, true) : 'Save Comments'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 749,\n            columnNumber: 15\n          }, this), !isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"checkbox-wrapper-35\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"cabSwitch\",\n              className: \"switch\",\n              checked: cabOpted,\n              onChange: handleCabToggle,\n              disabled: !isUserInShift()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 765,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"cabSwitch\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"switch-x-text\",\n                children: \"Cab is\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 774,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"switch-x-toggletext\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"switch-x-unchecked\",\n                  style: {\n                    color: \"red\"\n                  },\n                  children: \"Not Opted\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 776,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"switch-x-checked\",\n                  style: {\n                    color: \"lime\"\n                  },\n                  children: \"Opted\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 779,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 775,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 773,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 764,\n            columnNumber: 17\n          }, this), isAdmin && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleEditShift,\n              className: \"modal-btn edit-btn\",\n              children: \"Update Shift\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 789,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleDeleteShift,\n              className: \"modal-btn delete-btn\",\n              children: \"Delete Shift\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 792,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsModalOpen(false),\n            className: \"modal-btn cancel-btn\",\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 798,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isAddModalOpen,\n      onRequestClose: () => setIsAddModalOpen(false),\n      className: \"modal\",\n      overlayClassName: \"overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create New Shift\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 816,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 817,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: newShiftDate,\n        onChange: e => setNewShiftDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 818,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Shift Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 824,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: newShiftType,\n        onChange: e => setNewShiftType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Morning\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 829,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Evening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 830,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Night\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 825,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Employees:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 834,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"employees-checkboxes\",\n        children: analysts.map(emp => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"employee-checkbox\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: `emp-${emp.id}`,\n            checked: selectedEmployees.includes(emp.username),\n            onChange: () => handleEmployeeToggle(emp.username)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 838,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `emp-${emp.id}`,\n            children: emp.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 844,\n            columnNumber: 15\n          }, this)]\n        }, emp.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 837,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 835,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddShift,\n          className: \"modal-btn save-btn\",\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 852,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsAddModalOpen(false),\n          className: \"modal-btn cancel-btn\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 858,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 851,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 810,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 521,\n    columnNumber: 5\n  }, this);\n};\n_s(Shifts, \"0bb6QM9K0BrX3k6Wy3ihLajUj50=\", false, function () {\n  return [useAuth];\n});\n_c = Shifts;\nexport default Shifts;\nvar _c;\n$RefreshReg$(_c, \"Shifts\");","map":{"version":3,"names":["React","useState","useEffect","useRef","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","Modal","useAuth","jsxDEV","_jsxDEV","Fragment","_Fragment","setAppElement","shiftTimeMapping","Night","start","end","Morning","Evening","Shifts","_s","user","isAdmin","role","cabStatusList","setCabStatusList","shifts","setShifts","selectedEmployeeForNotes","setSelectedEmployeeForNotes","employeeNotes","setEmployeeNotes","shiftColorMap","selectedShift","setSelectedShift","comment","setComment","isSaving","setIsSaving","saveStatus","setSaveStatus","success","message","commentsMap","setCommentsMap","isModalOpen","setIsModalOpen","isAddModalOpen","setIsAddModalOpen","newShiftDate","setNewShiftDate","newShiftType","setNewShiftType","selectedEmployees","setSelectedEmployees","analysts","setAnalysts","cabOpted","setCabOpted","editShiftType","setEditShiftType","editShiftDate","setEditShiftDate","editEmployeeId","setEditEmployeeId","shiftColorPool","isMountedRef","current","fetchShifts","fetch","then","res","json","data","adjustedShifts","map","shift","_shift$employees","startDateTime","date","start_time","endDateTime","shift_type","end_time","nextDay","Date","setDate","getDate","nextDayStr","toISOString","split","id","title","charAt","toUpperCase","slice","employees","join","catch","err","console","error","handleEmployeeToggle","username","prev","includes","filter","u","isUserInShift","some","emp","handleCabToggle","newCabOpted","method","headers","body","JSON","stringify","shift_id","employee_id","cab_facility","prevList","handleEventClick","info","event","shiftType","firstEmp","matchedEmp","find","_cabData$find","_cabData$","cabResponse","ok","Error","cabData","length","currentUser","notesResponse","notesData","log","notesMap","forEach","note","employee","defaultEmployee","isWithinShift","now","handleSave","noteToSave","response","notes","is_admin","errorData","timestamp","updatedNotes","e","refreshError","warn","handleAddShift","alert","selectedEmployeeObjects","toLowerCase","employee_ids","handleEditShift","_analysts$find","shiftId","selectedUsername","isDuplicate","sameStart","getTime","sameEnd","sameEmployee","differentShift","String","result","handleDeleteShift","slotLabelContent","arg","getHours","slotLaneContent","hour","display","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","eventDidMount","randomColor","Math","floor","random","color","el","style","backgroundColor","borderColor","window","VanillaTilt","init","glare","plugins","initialView","slotDuration","slotLabelInterval","hours","allDaySlot","slotMinTime","slotMaxTime","events","eventClick","slotEventOverlap","headerToolbar","left","center","right","height","eventOverlap","dayMaxEventRows","dayMaxEvents","displayEventTime","eventOrder","eventContent","titleParts","shiftTitle","employeesRaw","employeeList","name","index","trim","html","isOpen","onRequestClose","overlayClassName","toLocaleString","type","value","onChange","target","disabled","rows","newNotes","spellCheck","placeholder","checked","htmlFor","_c","$RefreshReg$"],"sources":["C:/OfficeData/Projects/soc-portal/src/pages/Shifts.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport Modal from \"react-modal\";\r\nimport { useAuth } from \"../context/AuthContext\";\r\nimport \"../styles/Shifts.css\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nconst shiftTimeMapping = {\r\n  Night: { start: \"00:00\", end: \"08:00\" },\r\n  Morning: { start: \"08:00\", end: \"16:00\" },\r\n  Evening: { start: \"16:00\", end: \"00:00\" },\r\n};\r\n\r\nconst Shifts = () => {\r\n  const { user } = useAuth();\r\n  const isAdmin = user?.role === \"admin\";\r\n  const [cabStatusList, setCabStatusList] = useState([]);\r\n  const [shifts, setShifts] = useState([]);\r\n  const [selectedEmployeeForNotes, setSelectedEmployeeForNotes] = useState(\"\");\r\n  const [employeeNotes, setEmployeeNotes] = useState({});\r\n  const shiftColorMap = useRef({});\r\n  const [selectedShift, setSelectedShift] = useState(null);\r\n  const [comment, setComment] = useState(\"\");\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [saveStatus, setSaveStatus] = useState({ success: null, message: '' });\r\n  const [commentsMap, setCommentsMap] = useState({});\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\r\n  const [newShiftDate, setNewShiftDate] = useState(\"\");\r\n  const [newShiftType, setNewShiftType] = useState(\"Night\");\r\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n  const [analysts, setAnalysts] = useState([]);\r\n  const [cabOpted, setCabOpted] = useState(false);\r\n  const [editShiftType, setEditShiftType] = useState(\"Night\");\r\n  const [editShiftDate, setEditShiftDate] = useState(\"\");\r\n  const [editEmployeeId, setEditEmployeeId] = useState(\"\");\r\n  const shiftColorPool = [\r\n    \"#0b3d91\", // dark azure blue\r\n    \"#4b1d3f\", // deep plum\r\n    \"#0f3b57\", // midnight teal\r\n    \"#440047\", // deep grape\r\n    \"#004d40\", // deep teal\r\n    \"#3d0000\", // deep maroon\r\n    \"#00203f\", // dark navy\r\n    \"#2c003e\", // dark purple\r\n    \"#4a148c\", // indigo\r\n    \"#1a1a40\", // navy black\r\n    \"#3a0ca3\", // royal violet\r\n    \"#311432\", // raisin black\r\n    \"#8B0000\", // dark red\r\n    \"#7B241C\", // deep crimson\r\n    \"#641E16\", // dark cherry\r\n    \"#78281F\", // wine red\r\n    \"#6E1414\", // roasted red\r\n    \"#8B2500\", // burnt orange\r\n    \"#B7410E\", // rust\r\n    \"#A0522D\", // sienna brown\r\n    \"#D2691E\", // chocolate orange\r\n    \"#9C640C\", // golden bronze\r\n    \"#8B4513\", // saddle brown\r\n    \"#7C4700\", // caramel burnt\r\n    \"#705700\", // muddy gold\r\n    \"#665D1E\",  // dark mustard\r\n    \"#003f5c\", // deep ocean blue\r\n    \"#390099\", // vibrant purple\r\n    \"#1c0032\", // dark violet\r\n    \"#3e065f\", // cosmic purple\r\n    \"#123524\", // pine green\r\n    \"#1e2a38\", // shadow slate\r\n    \"#0c1f3f\", // indigo night\r\n    \"#420516\", // merlot\r\n    \"#1a1a2e\", // deep blue-gray\r\n    \"#092635\", // arctic navy\r\n    \"#402218\", // dark brown\r\n    \"#0d1b2a\", // dark sea navy\r\n    \"#1b1b2f\", // gothic gray\r\n    \"#27374d\", // dusty night blue\r\n    \"#132743\", // midnight steel\r\n    \"#3e1f47\", // mulberry\r\n    \"#183D3D\", // sea moss\r\n    \"#1c1c1c\", // nearly black\r\n    \"#003366\", // classic navy\r\n    \"#212121\", // pitch black\r\n    \"#2b1d0e\", // earthy brown\r\n    \"#321325\", // shadow magenta\r\n    \"#102c57\", // blue slate\r\n    \"#2c2c54\", // dusk purple\r\n    \"#2a0944\", // grape skin\r\n    \"#2e003e\", // plum pit\r\n    \"#000f1a\", // true deep blue\r\n    \"#1b262c\", // blue-black\r\n    \"#001f3f\", // abyss blue\r\n    \"#2d132c\", // noir rose\r\n    \"#8B008B\", // Dark Magenta\r\n    \"#800040\", // Deep Rose\r\n    \"#993366\", // Dusky Pink\r\n    \"#702963\", // Byzantium\r\n    \"#A52A6A\", // Rose Red\r\n    \"#78002E\", // Dark Raspberry\r\n    \"#AA336A\", // Vintage Pink\r\n    \"#260701\", // ember coal\r\n    \"#191825\", // nightfall\r\n    \"#1f1d36\", // dark orchid\r\n    \"#3b2f2f\", // cocoa ash\r\n    \"#2e2e40\", // grayish indigo\r\n    \"#1e1e2f\", // subdued navy\r\n    \"#222831\", // graphite\r\n    \"#35013f\", // strong plum\r\n    \"#1A4D2E\"  // deep forest green\r\n  ];\r\n\r\n\r\n\r\n  const isMountedRef = useRef(true);\r\n  useEffect(() => {\r\n    isMountedRef.current = true;\r\n    return () => {\r\n      isMountedRef.current = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setIsModalOpen(false);\r\n      setIsAddModalOpen(false);\r\n    }\r\n  }, [user]);\r\n\r\n  const fetchShifts = () => {\r\n  fetch(\"http://localhost:5000/api/shifts\")\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      if (!isMountedRef.current) return;\r\n\r\n      const adjustedShifts = data.map((shift) => {\r\n        const startDateTime = `${shift.date}T${shift.start_time}`;\r\n        let endDateTime;\r\n\r\n        if (shift.shift_type === \"evening\" && shift.end_time === \"00:00:00\") {\r\n          const nextDay = new Date(shift.date);\r\n          nextDay.setDate(nextDay.getDate() + 1);\r\n          const nextDayStr = nextDay.toISOString().split(\"T\")[0];\r\n          endDateTime = `${nextDayStr}T${shift.end_time}`;\r\n        } else {\r\n          endDateTime = `${shift.date}T${shift.end_time}`;\r\n        }\r\n\r\n        return {\r\n          id: shift.id,\r\n          title: `${shift.shift_type.charAt(0).toUpperCase() + shift.shift_type.slice(1)} - ${shift.employees?.join(\", \") || \"\"}`,\r\n          start: startDateTime,\r\n          end: endDateTime,\r\n        };\r\n      });\r\n\r\n      setShifts(adjustedShifts);\r\n    })\r\n    .catch((err) => {\r\n      if (isMountedRef.current) console.error(\"Failed to fetch shifts:\", err);\r\n    });\r\n};\r\n\r\n\r\n  useEffect(() => {\r\n    fetchShifts();\r\n    fetch(\"http://localhost:5000/api/analysts\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (isMountedRef.current) setAnalysts(data);\r\n      })\r\n      .catch((err) => {\r\n        if (isMountedRef.current) console.error(\"Failed to fetch analysts:\", err);\r\n      });\r\n  }, []);\r\n\r\n  const handleEmployeeToggle = (username) => {\r\n    setSelectedEmployees((prev) =>\r\n      prev.includes(username) ? prev.filter((u) => u !== username) : [...prev, username]\r\n    );\r\n  };\r\n\r\n  const isUserInShift = () => {\r\n    return cabStatusList.some((emp) => emp.username === user?.username);\r\n  };\r\n\r\n  const handleCabToggle = async () => {\r\n    const newCabOpted = !cabOpted;\r\n    setCabOpted(newCabOpted);\r\n    try {\r\n      await fetch(`http://localhost:5000/api/update_cab_status`, {\r\n        method: \"PATCH\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          shift_id: selectedShift.id,\r\n          employee_id: user.id,\r\n          cab_facility: newCabOpted ? \"Yes\" : \"No\",\r\n        }),\r\n      });\r\n      setCabStatusList(prevList =>\r\n        prevList.map(emp =>\r\n          emp.username === user.username\r\n            ? { ...emp, cab_facility: newCabOpted ? \"Yes\" : \"No\" }\r\n            : emp\r\n        )\r\n      );\r\n    } catch (err) {\r\n      if (isMountedRef.current) console.error(\"Failed to update cab status:\", err);\r\n    }\r\n  };\r\n\r\n  const handleEventClick = async (info) => {\r\n    const shift = info.event;\r\n    if (!isMountedRef.current) return;\r\n\r\n    setSelectedShift(shift);\r\n    setComment(commentsMap[shift.id] || \"\");\r\n\r\n    // Admin logic remains the same\r\n    if (isAdmin) {\r\n      const date = shift.start.toISOString().slice(0, 10);\r\n      let shiftType = \"Morning\";\r\n      if (shift.title.includes(\"Morning\")) shiftType = \"Morning\";\r\n      else if (shift.title.includes(\"Evening\")) shiftType = \"Evening\";\r\n      else if (shift.title.includes(\"Night\")) shiftType = \"Night\";\r\n\r\n      const firstEmp = shift.title.split(\" - \")[0];\r\n      const matchedEmp = analysts.find((emp) => emp.username === firstEmp);\r\n\r\n      setEditShiftType(shiftType);\r\n      setEditShiftDate(date);\r\n      setEditEmployeeId(matchedEmp?.id || \"\");\r\n    }\r\n\r\n    try {\r\n      // 1. First fetch cab status (contains employee info)\r\n      const cabResponse = await fetch(`http://localhost:5000/api/shifts/${shift.id}/cab-status`);\r\n      if (!cabResponse.ok) throw new Error(\"Failed to fetch cab status\");\r\n      const cabData = await cabResponse.json();\r\n\r\n      if (!isMountedRef.current) return;\r\n\r\n      setCabStatusList(cabData);\r\n      if (!isAdmin && cabData.length > 0) {\r\n        const currentUser = cabData.find((emp) => emp.username === user.username);\r\n        setCabOpted(currentUser?.cab_facility === \"Yes\");\r\n      }\r\n\r\n      // 2. Then fetch notes for this shift\r\n      const notesResponse = await fetch(`http://localhost:5000/api/shifts/${shift.id}/notes`);\r\n      if (!notesResponse.ok) throw new Error(\"Failed to fetch notes\");\r\n      const notesData = await notesResponse.json();\r\n\r\n      // Debug logs to verify data\r\n      console.log(\"Cab Data:\", cabData);\r\n      console.log(\"Notes Data:\", notesData);\r\n\r\n      // Create mapping of username to note\r\n      const notesMap = {};\r\n      notesData.forEach(note => {\r\n        // Find the employee in cabData - using id from cab status that matches employee_id in notes\r\n        const employee = cabData.find(emp => emp.id === note.employee_id);\r\n        if (employee) {\r\n          notesMap[employee.username] = note.note;\r\n        }\r\n      });\r\n\r\n      console.log(\"Notes Map:\", notesMap); // Debug log\r\n      setEmployeeNotes(notesMap);\r\n\r\n      // Set default selected employee (current user if in shift, otherwise first employee)\r\n      const defaultEmployee = cabData.find(emp => emp.username === user?.username)?.username ||\r\n        (cabData[0]?.username || '');\r\n      setSelectedEmployeeForNotes(defaultEmployee);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error fetching shift data:\", error);\r\n      if (isMountedRef.current) {\r\n        setCabStatusList([]);\r\n        setEmployeeNotes({});\r\n      }\r\n    }\r\n\r\n    if (isMountedRef.current) setIsModalOpen(true);\r\n  };\r\n\r\n  const isWithinShift = () => {\r\n    if (!selectedShift) return false;\r\n    const now = new Date();\r\n    const start = new Date(selectedShift.start);\r\n    const end = new Date(selectedShift.end);\r\n    return now >= start && now <= end;\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!selectedShift || !selectedEmployeeForNotes) {\r\n      setSaveStatus({ success: false, message: \"No shift or employee selected\" });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSaving(true);\r\n      setSaveStatus({ success: null, message: '' });\r\n\r\n      // Find the employee in the shift\r\n      const employee = cabStatusList.find(emp => emp.username === selectedEmployeeForNotes);\r\n      if (!employee && !isAdmin) {\r\n        throw new Error(\"You are not assigned to this shift\");\r\n      }\r\n\r\n      // Prepare the note content (handle empty strings)\r\n      const noteToSave = employeeNotes[selectedEmployeeForNotes] || \"\";\r\n\r\n      const response = await fetch(\"http://localhost:5000/api/save_notes\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          shift_id: selectedShift.id,\r\n          employee_id: employee?.id, // Safe access with optional chaining\r\n          notes: noteToSave,\r\n          is_admin: isAdmin // Send admin status to backend\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.error || errorData.message || \"Failed to save notes\");\r\n      }\r\n\r\n      // Update local state with the saved note\r\n      setEmployeeNotes(prev => ({\r\n        ...prev,\r\n        [selectedEmployeeForNotes]: noteToSave\r\n      }));\r\n\r\n      setSaveStatus({\r\n        success: true,\r\n        message: \"Notes saved successfully!\",\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      // Refresh notes from server to ensure consistency\r\n      try {\r\n        const notesResponse = await fetch(`http://localhost:5000/api/shifts/${selectedShift.id}/notes`);\r\n        if (notesResponse.ok) {\r\n          const notesData = await notesResponse.json();\r\n          const updatedNotes = {};\r\n          notesData.forEach(note => {\r\n            const emp = cabStatusList.find(e => e.id === note.employee_id);\r\n            if (emp) updatedNotes[emp.username] = note.note;\r\n          });\r\n          setEmployeeNotes(updatedNotes);\r\n        }\r\n      } catch (refreshError) {\r\n        console.warn(\"Couldn't refresh notes:\", refreshError);\r\n      }\r\n\r\n    } catch (err) {\r\n      console.error(\"Error saving notes:\", err);\r\n      setSaveStatus({\r\n        success: false,\r\n        message: err.message || \"An unexpected error occurred\"\r\n      });\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n\r\n  const handleAddShift = async () => {\r\n    if (selectedEmployees.length === 0 || !newShiftDate || !newShiftType) {\r\n      alert(\"Please fill all fields.\");\r\n      return;\r\n    }\r\n\r\n    const { start, end } = shiftTimeMapping[newShiftType];\r\n    const startDateTime = `${newShiftDate}T${start}`;\r\n    let endDateTime;\r\n\r\n    if (newShiftType === \"Evening\" && end === \"00:00\") {\r\n      const nextDay = new Date(newShiftDate);\r\n      nextDay.setDate(nextDay.getDate() + 1);\r\n      const nextDayStr = nextDay.toISOString().split('T')[0];\r\n      endDateTime = `${nextDayStr}T${end}`;\r\n    } else {\r\n      endDateTime = `${newShiftDate}T${end}`;\r\n    }\r\n\r\n\r\n\r\n    const selectedEmployeeObjects = analysts.filter((emp) =>\r\n      selectedEmployees.includes(emp.username)\r\n    );\r\n\r\n    try {\r\n      for (let emp of selectedEmployeeObjects) {\r\n        const response = await fetch(\r\n          \"http://localhost:5000/api/create_shift\",\r\n          {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n              date: newShiftDate, // ✅ required by backend\r\n              shift_type: newShiftType.toLowerCase(),\r\n              employee_ids: [emp.id],\r\n              start: startDateTime,\r\n              end: endDateTime\r\n            }),\r\n          }\r\n        );\r\n\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n          alert(\"Error: \" + data.error);\r\n          return;\r\n        }\r\n      }\r\n\r\n      fetchShifts();\r\n      alert(\"Shift(s) created successfully!\");\r\n    } catch (err) {\r\n      console.error(\"Failed to create shift:\", err);\r\n      alert(\"Failed to create shift. Check console for details.\");\r\n    }\r\n\r\n    setIsAddModalOpen(false);\r\n    setSelectedEmployees([]);\r\n  };\r\n\r\n\r\n  const handleEditShift = async () => {\r\n    try {\r\n      const shiftId = selectedShift.id;\r\n\r\n      const { start, end } = shiftTimeMapping[editShiftType];\r\n      const startDateTime = new Date(`${editShiftDate}T${start}`);\r\n      let endDateTime = new Date(`${editShiftDate}T${end}`);\r\n      if (end === \"00:00\") {\r\n        endDateTime.setDate(endDateTime.getDate() + 1);\r\n      }\r\n\r\n      const selectedUsername =\r\n        analysts.find((emp) => emp.id === editEmployeeId)?.username || \"\";\r\n\r\n      const isDuplicate = shifts.some((shift) => {\r\n        const sameStart = new Date(shift.start).getTime() === startDateTime.getTime();\r\n        const sameEnd = new Date(shift.end).getTime() === endDateTime.getTime();\r\n        const sameEmployee = shift.title.includes(selectedUsername);\r\n        const differentShift = String(shift.id) !== String(shiftId);\r\n        return differentShift && sameStart && sameEnd && sameEmployee;\r\n      });\r\n\r\n      if (isDuplicate) {\r\n        alert(\"Another shift already exists in that slot!\");\r\n        return;\r\n      }\r\n\r\n      const response = await fetch(\"http://localhost:5000/api/edit_shift\", {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          shift_id: shiftId,\r\n          date: editShiftDate,\r\n          shift_type: editShiftType.toLowerCase(),\r\n          employee_id: editEmployeeId,\r\n        }),\r\n      });\r\n      const result = await response.json();\r\n      if (!response.ok) {\r\n        alert(\"Error: \" + result.error);\r\n        return;\r\n      }\r\n      fetchShifts();\r\n      setIsModalOpen(false);\r\n      alert(\"Shift updated successfully!\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"Failed to edit shift.\");\r\n    }\r\n  };\r\n  const handleDeleteShift = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/delete_shift\", {\r\n        method: \"DELETE\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ shift_id: selectedShift.id }),\r\n      });\r\n      const result = await response.json();\r\n      if (!response.ok) {\r\n        alert(\"Error: \" + result.error);\r\n        return;\r\n      }\r\n      fetchShifts();\r\n      setIsModalOpen(false);\r\n      alert(\"Shift deleted successfully!\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"Failed to delete shift.\");\r\n    }\r\n  };\r\n\r\n  const slotLabelContent = (arg) => {\r\n    if (arg.date.getHours() === 0) return \"Night\";\r\n    if (arg.date.getHours() === 8) return \"Morning\";\r\n    if (arg.date.getHours() === 16) return \"Evening\";\r\n    return \"\";\r\n  };\r\n\r\n  const slotLaneContent = (arg) => {\r\n    const hour = arg.date.getHours();\r\n    if (hour !== 0 && hour !== 8 && hour !== 16) {\r\n      return { display: \"none\" };\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"shifts-wrapper\">\r\n      <div className=\"shifts-calendar\">\r\n        {isAdmin && (\r\n          <button\r\n            onClick={() => setIsAddModalOpen(true)}\r\n            className=\"add-shift-btn\"\r\n          >\r\n            Create Shift\r\n          </button>\r\n        )}\r\n        <FullCalendar\r\n          eventDidMount={(info) => {\r\n            const shiftId = info.event.id;\r\n\r\n\r\n\r\n            // Assign color to shift\r\n            if (!shiftColorMap.current[shiftId]) {\r\n              const randomColor = shiftColorPool[Math.floor(Math.random() * shiftColorPool.length)];\r\n              shiftColorMap.current[shiftId] = randomColor;\r\n            }\r\n            const color = shiftColorMap.current[shiftId];\r\n            info.el.style.backgroundColor = color;\r\n            info.el.style.color = \"#fff\";\r\n            info.el.style.borderColor = color;\r\n\r\n\r\n            //glare effect\r\n            if (window.VanillaTilt && info.el) {\r\n              window.VanillaTilt.init(info.el, {\r\n\r\n                glare: true,\r\n                \"max-glare\": 0.3,\r\n\r\n              });\r\n            }\r\n          }}\r\n\r\n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n          initialView=\"timeGridWeek\"\r\n          slotDuration=\"08:00:00\"\r\n          slotLabelInterval={{ hours: 8 }}\r\n          allDaySlot={false}\r\n          slotMinTime=\"00:00:00\"\r\n          slotMaxTime=\"24:00:00\"\r\n          events={shifts}\r\n          eventClick={handleEventClick}\r\n          slotLabelContent={slotLabelContent}\r\n          slotEventOverlap={false}\r\n          slotLaneContent={slotLaneContent}\r\n          headerToolbar={{\r\n            left: \"prev,next,today\",\r\n            center: \"title\",\r\n            right: \"timeGridDay,timeGridWeek,dayGridMonth\",\r\n          }}\r\n          height=\"auto\"\r\n          eventOverlap={false}\r\n          dayMaxEventRows={true}\r\n          dayMaxEvents={true}\r\n          displayEventTime={false}\r\n          eventOrder={\"title\"}\r\n          eventContent={(arg) => {\r\n            const titleParts = arg.event.title.split(\" - \");\r\n            const shiftTitle = titleParts[0];\r\n            const employeesRaw = titleParts[1] || \"\";\r\n            const employeeList = employeesRaw\r\n              .split(\",\")\r\n              .map((name, index) => `<div>${index + 1}. ${name.trim()}</div>`)\r\n              .join(\"\");\r\n\r\n            return {\r\n              html: `<div style=\"padding: 2px;\">\r\n                <strong>${shiftTitle}</strong>\r\n                <div style=\"margin-top: 4px;\">${employeeList}</div>\r\n             </div>`,\r\n            };\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <Modal\r\n        isOpen={isModalOpen}\r\n        onRequestClose={() => setIsModalOpen(false)}\r\n        className=\"modal\"\r\n        overlayClassName=\"overlay\"\r\n      >\r\n        <h2>Shift Details</h2>\r\n        {selectedShift && (\r\n          <>\r\n            <div className=\"modal-content\">\r\n              <div className=\"left-section\">\r\n                <p>\r\n                  <strong>Shift:</strong> {selectedShift.title}\r\n                </p>\r\n                <p>\r\n                  <strong>Start:</strong>{\" \"}\r\n                  {new Date(selectedShift.start).toLocaleString()}\r\n                </p>\r\n                <p>\r\n                  <strong>End:</strong>{\" \"}\r\n                  {new Date(selectedShift.end).toLocaleString()}\r\n                </p>\r\n\r\n                <div className=\"cab-status-list\">\r\n                  <h3>Cab Facility Status</h3>\r\n                  <ul>\r\n                    {cabStatusList.length === 0 ? (\r\n                      <li>No cab data available</li>\r\n                    ) : (\r\n                      cabStatusList.map((emp) => (\r\n                        <li key={emp.id}>\r\n                          {emp.username} – {emp.cab_facility === \"Yes\" ? \"Yes\" : \"No\"}\r\n                        </li>\r\n                      ))\r\n                    )}\r\n                  </ul>\r\n                </div>\r\n\r\n                {isAdmin && (\r\n                  <>\r\n                    <h3>Edit Shift</h3>\r\n                    <label>Date:</label>\r\n                    <input\r\n                      type=\"date\"\r\n                      value={editShiftDate}\r\n                      onChange={(e) => setEditShiftDate(e.target.value)}\r\n                    />\r\n\r\n                    <label>Shift Type:</label>\r\n                    <select\r\n                      value={editShiftType}\r\n                      onChange={(e) => setEditShiftType(e.target.value)}\r\n                    >\r\n                      <option>Morning</option>\r\n                      <option>Evening</option>\r\n                      <option>Night</option>\r\n                    </select>\r\n\r\n                    <label>Employee:</label>\r\n                    <select\r\n                      value={editEmployeeId}\r\n                      onChange={(e) => setEditEmployeeId(e.target.value)}\r\n                    >\r\n                      <option value=\"\">Select employee</option>\r\n                      {analysts.map((emp) => (\r\n                        <option key={emp.id} value={emp.id}>\r\n                          {emp.username}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"right-section\">\r\n                <label className=\"label1\">Comments / Notes:</label>\r\n                {cabStatusList.length > 0 ? (\r\n                  <div className=\"notes-selector-container\">\r\n                    <select\r\n                      value={selectedEmployeeForNotes}\r\n                      onChange={(e) => {\r\n                        setSelectedEmployeeForNotes(e.target.value);\r\n                      }}\r\n                      className=\"notes-employee-select\"\r\n                      disabled={cabStatusList.length === 0}\r\n                    >\r\n                      {cabStatusList.map((emp) => (\r\n                        <option key={emp.id} value={emp.username}>\r\n                          {emp.username}'s Notes\r\n                          {user?.username === emp.username ? \" (You)\" : \"\"}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                    {employeeNotes[selectedEmployeeForNotes] && (\r\n                      <div className=\"last-updated\">\r\n                        Last updated: {new Date().toLocaleString()} {/* Replace with actual timestamp if available */}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"no-notes-message\">No employees assigned to this shift</div>\r\n                )}\r\n\r\n                <textarea\r\n                  rows=\"10\"\r\n                  value={employeeNotes[selectedEmployeeForNotes] || \"\"}\r\n                  onChange={(e) => {\r\n                    const newNotes = { ...employeeNotes };\r\n                    newNotes[selectedEmployeeForNotes] = e.target.value;\r\n                    setEmployeeNotes(newNotes);\r\n                  }}\r\n                  disabled={\r\n                    !isAdmin &&\r\n                    (!isWithinShift() || user?.username !== selectedEmployeeForNotes)\r\n                  }\r\n                  className={\r\n                    !isAdmin && user?.username !== selectedEmployeeForNotes\r\n                      ? \"notes-textarea view-only\"\r\n                      : \"notes-textarea\"\r\n                  }\r\n                  spellCheck=\"false\"\r\n                  placeholder={\r\n                    isAdmin\r\n                      ? \"Add or edit notes here...\"\r\n                      : isWithinShift()\r\n                        ? user?.username === selectedEmployeeForNotes\r\n                          ? \"Add or edit your notes here...\"\r\n                          : \"Viewing another employee's notes (read-only)\"\r\n                        : \"Notes can only be edited during shift time\"\r\n                  }\r\n                />\r\n\r\n                {!isWithinShift() && !isAdmin && (\r\n                  <div className=\"edit-disabled-message\">\r\n                    ⚠️ Note: Editing is only allowed during shift hours\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"modal-buttons\">\r\n              {isSaving && <div className=\"save-status saving\">Saving...</div>}\r\n              {saveStatus.message && (\r\n                <div className={`save-status ${saveStatus.success ? 'success' : 'error'}`}>\r\n                  {saveStatus.message}\r\n                </div>\r\n              )}\r\n\r\n              <button\r\n                onClick={handleSave}\r\n                disabled={(!isWithinShift() && !isAdmin) || isSaving}\r\n                className=\"modal-btn save-btn\"\r\n              >\r\n                {isSaving ? (\r\n                  <>\r\n                    <span className=\"spinner\"></span> Saving...\r\n                  </>\r\n                ) : (\r\n                  'Save Comments'\r\n                )}\r\n              </button>\r\n\r\n              {!isAdmin && (\r\n                <div className=\"checkbox-wrapper-35\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id=\"cabSwitch\"\r\n                    className=\"switch\"\r\n                    checked={cabOpted}\r\n                    onChange={handleCabToggle}\r\n                    disabled={!isUserInShift()}\r\n                  />\r\n                  <label htmlFor=\"cabSwitch\">\r\n                    <span className=\"switch-x-text\">Cab is</span>\r\n                    <span className=\"switch-x-toggletext\">\r\n                      <span className=\"switch-x-unchecked\" style={{ color: \"red\" }}>\r\n                        Not Opted\r\n                      </span>\r\n                      <span className=\"switch-x-checked\" style={{ color: \"lime\" }}>\r\n                        Opted\r\n                      </span>\r\n                    </span>\r\n                  </label>\r\n                </div>\r\n              )}\r\n\r\n              {isAdmin && (\r\n                <>\r\n                  <button onClick={handleEditShift} className=\"modal-btn edit-btn\">\r\n                    Update Shift\r\n                  </button>\r\n                  <button onClick={handleDeleteShift} className=\"modal-btn delete-btn\">\r\n                    Delete Shift\r\n                  </button>\r\n                </>\r\n              )}\r\n\r\n              <button\r\n                onClick={() => setIsModalOpen(false)}\r\n                className=\"modal-btn cancel-btn\"\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </Modal>\r\n\r\n\r\n      <Modal\r\n        isOpen={isAddModalOpen}\r\n        onRequestClose={() => setIsAddModalOpen(false)}\r\n        className=\"modal\"\r\n        overlayClassName=\"overlay\"\r\n      >\r\n        <h2>Create New Shift</h2>\r\n        <label>Date:</label>\r\n        <input\r\n          type=\"date\"\r\n          value={newShiftDate}\r\n          onChange={(e) => setNewShiftDate(e.target.value)}\r\n        />\r\n\r\n        <label>Shift Type:</label>\r\n        <select\r\n          value={newShiftType}\r\n          onChange={(e) => setNewShiftType(e.target.value)}\r\n        >\r\n          <option>Morning</option>\r\n          <option>Evening</option>\r\n          <option>Night</option>\r\n        </select>\r\n\r\n        <label>Select Employees:</label>\r\n        <div className=\"employees-checkboxes\">\r\n          {analysts.map((emp) => (\r\n            <div key={emp.id} className=\"employee-checkbox\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id={`emp-${emp.id}`}\r\n                checked={selectedEmployees.includes(emp.username)}\r\n                onChange={() => handleEmployeeToggle(emp.username)}\r\n              />\r\n              <label htmlFor={`emp-${emp.id}`}>{emp.username}</label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"modal-buttons\">\r\n          <button\r\n            onClick={handleAddShift}\r\n            className=\"modal-btn save-btn\"\r\n          >\r\n            Create\r\n          </button>\r\n          <button\r\n            onClick={() => setIsAddModalOpen(false)}\r\n            className=\"modal-btn cancel-btn\"\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Shifts;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,cAAc,MAAM,wBAAwB;AACnD,OAAOC,iBAAiB,MAAM,2BAA2B;AACzD,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,OAAO,QAAQ,wBAAwB;AAChD,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9BL,KAAK,CAACM,aAAa,CAAC,OAAO,CAAC;AAE5B,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE;IAAEC,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC;EACvCC,OAAO,EAAE;IAAEF,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC;EACzCE,OAAO,EAAE;IAAEH,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ;AAC1C,CAAC;AAED,MAAMG,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM;IAAEC;EAAK,CAAC,GAAGd,OAAO,CAAC,CAAC;EAC1B,MAAMe,OAAO,GAAG,CAAAD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,IAAI,MAAK,OAAO;EACtC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAC2B,MAAM,EAAEC,SAAS,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAAC6B,wBAAwB,EAAEC,2BAA2B,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAC5E,MAAM,CAAC+B,aAAa,EAAEC,gBAAgB,CAAC,GAAGhC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAMiC,aAAa,GAAG/B,MAAM,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,CAACgC,aAAa,EAAEC,gBAAgB,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACoC,OAAO,EAAEC,UAAU,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACsC,QAAQ,EAAEC,WAAW,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACwC,UAAU,EAAEC,aAAa,CAAC,GAAGzC,QAAQ,CAAC;IAAE0C,OAAO,EAAE,IAAI;IAAEC,OAAO,EAAE;EAAG,CAAC,CAAC;EAC5E,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG7C,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAAC8C,WAAW,EAAEC,cAAc,CAAC,GAAG/C,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACgD,cAAc,EAAEC,iBAAiB,CAAC,GAAGjD,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACkD,YAAY,EAAEC,eAAe,CAAC,GAAGnD,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACoD,YAAY,EAAEC,eAAe,CAAC,GAAGrD,QAAQ,CAAC,OAAO,CAAC;EACzD,MAAM,CAACsD,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGvD,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACwD,QAAQ,EAAEC,WAAW,CAAC,GAAGzD,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC0D,QAAQ,EAAEC,WAAW,CAAC,GAAG3D,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC4D,aAAa,EAAEC,gBAAgB,CAAC,GAAG7D,QAAQ,CAAC,OAAO,CAAC;EAC3D,MAAM,CAAC8D,aAAa,EAAEC,gBAAgB,CAAC,GAAG/D,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACgE,cAAc,EAAEC,iBAAiB,CAAC,GAAGjE,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAMkE,cAAc,GAAG,CACrjE,MAAM,CAAC,IAAI,CAAC;EACjCD,SAAS,CAAC,MAAM;IACdkE,YAAY,CAACC,OAAO,GAAG,IAAI;IAC3B,OAAO,MAAM;MACXD,YAAY,CAACC,OAAO,GAAG,KAAK;IAC9B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENnE,SAAS,CAAC,MAAM;IACd,IAAI,CAACqB,IAAI,EAAE;MACTyB,cAAc,CAAC,KAAK,CAAC;MACrBE,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC,EAAE,CAAC3B,IAAI,CAAC,CAAC;EAEV,MAAM+C,WAAW,GAAGA,CAAA,KAAM;IAC1BC,KAAK,CAAC,kCAAkC,CAAC,CACtCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACd,IAAI,CAACP,YAAY,CAACC,OAAO,EAAE;MAE3B,MAAMO,cAAc,GAAGD,IAAI,CAACE,GAAG,CAAEC,KAAK,IAAK;QAAA,IAAAC,gBAAA;QACzC,MAAMC,aAAa,GAAG,GAAGF,KAAK,CAACG,IAAI,IAAIH,KAAK,CAACI,UAAU,EAAE;QACzD,IAAIC,WAAW;QAEf,IAAIL,KAAK,CAACM,UAAU,KAAK,SAAS,IAAIN,KAAK,CAACO,QAAQ,KAAK,UAAU,EAAE;UACnE,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACT,KAAK,CAACG,IAAI,CAAC;UACpCK,OAAO,CAACE,OAAO,CAACF,OAAO,CAACG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;UACtC,MAAMC,UAAU,GAAGJ,OAAO,CAACK,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACtDT,WAAW,GAAG,GAAGO,UAAU,IAAIZ,KAAK,CAACO,QAAQ,EAAE;QACjD,CAAC,MAAM;UACLF,WAAW,GAAG,GAAGL,KAAK,CAACG,IAAI,IAAIH,KAAK,CAACO,QAAQ,EAAE;QACjD;QAEA,OAAO;UACLQ,EAAE,EAAEf,KAAK,CAACe,EAAE;UACZC,KAAK,EAAE,GAAGhB,KAAK,CAACM,UAAU,CAACW,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGlB,KAAK,CAACM,UAAU,CAACa,KAAK,CAAC,CAAC,CAAC,MAAM,EAAAlB,gBAAA,GAAAD,KAAK,CAACoB,SAAS,cAAAnB,gBAAA,uBAAfA,gBAAA,CAAiBoB,IAAI,CAAC,IAAI,CAAC,KAAI,EAAE,EAAE;UACvHlF,KAAK,EAAE+D,aAAa;UACpB9D,GAAG,EAAEiE;QACP,CAAC;MACH,CAAC,CAAC;MAEFtD,SAAS,CAAC+C,cAAc,CAAC;IAC3B,CAAC,CAAC,CACDwB,KAAK,CAAEC,GAAG,IAAK;MACd,IAAIjC,YAAY,CAACC,OAAO,EAAEiC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;IACzE,CAAC,CAAC;EACN,CAAC;EAGCnG,SAAS,CAAC,MAAM;IACdoE,WAAW,CAAC,CAAC;IACbC,KAAK,CAAC,oCAAoC,CAAC,CACxCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACd,IAAIP,YAAY,CAACC,OAAO,EAAEX,WAAW,CAACiB,IAAI,CAAC;IAC7C,CAAC,CAAC,CACDyB,KAAK,CAAEC,GAAG,IAAK;MACd,IAAIjC,YAAY,CAACC,OAAO,EAAEiC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,GAAG,CAAC;IAC3E,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,oBAAoB,GAAIC,QAAQ,IAAK;IACzCjD,oBAAoB,CAAEkD,IAAI,IACxBA,IAAI,CAACC,QAAQ,CAACF,QAAQ,CAAC,GAAGC,IAAI,CAACE,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKJ,QAAQ,CAAC,GAAG,CAAC,GAAGC,IAAI,EAAED,QAAQ,CACnF,CAAC;EACH,CAAC;EAED,MAAMK,aAAa,GAAGA,CAAA,KAAM;IAC1B,OAAOpF,aAAa,CAACqF,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACP,QAAQ,MAAKlF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEkF,QAAQ,EAAC;EACrE,CAAC;EAED,MAAMQ,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAMC,WAAW,GAAG,CAACvD,QAAQ;IAC7BC,WAAW,CAACsD,WAAW,CAAC;IACxB,IAAI;MACF,MAAM3C,KAAK,CAAC,6CAA6C,EAAE;QACzD4C,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,QAAQ,EAAErF,aAAa,CAAC0D,EAAE;UAC1B4B,WAAW,EAAElG,IAAI,CAACsE,EAAE;UACpB6B,YAAY,EAAER,WAAW,GAAG,KAAK,GAAG;QACtC,CAAC;MACH,CAAC,CAAC;MACFvF,gBAAgB,CAACgG,QAAQ,IACvBA,QAAQ,CAAC9C,GAAG,CAACmC,GAAG,IACdA,GAAG,CAACP,QAAQ,KAAKlF,IAAI,CAACkF,QAAQ,GAC1B;QAAE,GAAGO,GAAG;QAAEU,YAAY,EAAER,WAAW,GAAG,KAAK,GAAG;MAAK,CAAC,GACpDF,GACN,CACF,CAAC;IACH,CAAC,CAAC,OAAOX,GAAG,EAAE;MACZ,IAAIjC,YAAY,CAACC,OAAO,EAAEiC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEF,GAAG,CAAC;IAC9E;EACF,CAAC;EAED,MAAMuB,gBAAgB,GAAG,MAAOC,IAAI,IAAK;IACvC,MAAM/C,KAAK,GAAG+C,IAAI,CAACC,KAAK;IACxB,IAAI,CAAC1D,YAAY,CAACC,OAAO,EAAE;IAE3BjC,gBAAgB,CAAC0C,KAAK,CAAC;IACvBxC,UAAU,CAACO,WAAW,CAACiC,KAAK,CAACe,EAAE,CAAC,IAAI,EAAE,CAAC;;IAEvC;IACA,IAAIrE,OAAO,EAAE;MACX,MAAMyD,IAAI,GAAGH,KAAK,CAAC7D,KAAK,CAAC0E,WAAW,CAAC,CAAC,CAACM,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;MACnD,IAAI8B,SAAS,GAAG,SAAS;MACzB,IAAIjD,KAAK,CAACgB,KAAK,CAACa,QAAQ,CAAC,SAAS,CAAC,EAAEoB,SAAS,GAAG,SAAS,CAAC,KACtD,IAAIjD,KAAK,CAACgB,KAAK,CAACa,QAAQ,CAAC,SAAS,CAAC,EAAEoB,SAAS,GAAG,SAAS,CAAC,KAC3D,IAAIjD,KAAK,CAACgB,KAAK,CAACa,QAAQ,CAAC,OAAO,CAAC,EAAEoB,SAAS,GAAG,OAAO;MAE3D,MAAMC,QAAQ,GAAGlD,KAAK,CAACgB,KAAK,CAACF,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;MAC5C,MAAMqC,UAAU,GAAGxE,QAAQ,CAACyE,IAAI,CAAElB,GAAG,IAAKA,GAAG,CAACP,QAAQ,KAAKuB,QAAQ,CAAC;MAEpElE,gBAAgB,CAACiE,SAAS,CAAC;MAC3B/D,gBAAgB,CAACiB,IAAI,CAAC;MACtBf,iBAAiB,CAAC,CAAA+D,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEpC,EAAE,KAAI,EAAE,CAAC;IACzC;IAEA,IAAI;MAAA,IAAAsC,aAAA,EAAAC,SAAA;MACF;MACA,MAAMC,WAAW,GAAG,MAAM9D,KAAK,CAAC,oCAAoCO,KAAK,CAACe,EAAE,aAAa,CAAC;MAC1F,IAAI,CAACwC,WAAW,CAACC,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAClE,MAAMC,OAAO,GAAG,MAAMH,WAAW,CAAC3D,IAAI,CAAC,CAAC;MAExC,IAAI,CAACN,YAAY,CAACC,OAAO,EAAE;MAE3B1C,gBAAgB,CAAC6G,OAAO,CAAC;MACzB,IAAI,CAAChH,OAAO,IAAIgH,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;QAClC,MAAMC,WAAW,GAAGF,OAAO,CAACN,IAAI,CAAElB,GAAG,IAAKA,GAAG,CAACP,QAAQ,KAAKlF,IAAI,CAACkF,QAAQ,CAAC;QACzE7C,WAAW,CAAC,CAAA8E,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEhB,YAAY,MAAK,KAAK,CAAC;MAClD;;MAEA;MACA,MAAMiB,aAAa,GAAG,MAAMpE,KAAK,CAAC,oCAAoCO,KAAK,CAACe,EAAE,QAAQ,CAAC;MACvF,IAAI,CAAC8C,aAAa,CAACL,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC/D,MAAMK,SAAS,GAAG,MAAMD,aAAa,CAACjE,IAAI,CAAC,CAAC;;MAE5C;MACA4B,OAAO,CAACuC,GAAG,CAAC,WAAW,EAAEL,OAAO,CAAC;MACjClC,OAAO,CAACuC,GAAG,CAAC,aAAa,EAAED,SAAS,CAAC;;MAErC;MACA,MAAME,QAAQ,GAAG,CAAC,CAAC;MACnBF,SAAS,CAACG,OAAO,CAACC,IAAI,IAAI;QACxB;QACA,MAAMC,QAAQ,GAAGT,OAAO,CAACN,IAAI,CAAClB,GAAG,IAAIA,GAAG,CAACnB,EAAE,KAAKmD,IAAI,CAACvB,WAAW,CAAC;QACjE,IAAIwB,QAAQ,EAAE;UACZH,QAAQ,CAACG,QAAQ,CAACxC,QAAQ,CAAC,GAAGuC,IAAI,CAACA,IAAI;QACzC;MACF,CAAC,CAAC;MAEF1C,OAAO,CAACuC,GAAG,CAAC,YAAY,EAAEC,QAAQ,CAAC,CAAC,CAAC;MACrC7G,gBAAgB,CAAC6G,QAAQ,CAAC;;MAE1B;MACA,MAAMI,eAAe,GAAG,EAAAf,aAAA,GAAAK,OAAO,CAACN,IAAI,CAAClB,GAAG,IAAIA,GAAG,CAACP,QAAQ,MAAKlF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEkF,QAAQ,EAAC,cAAA0B,aAAA,uBAApDA,aAAA,CAAsD1B,QAAQ,KACnF,EAAA2B,SAAA,GAAAI,OAAO,CAAC,CAAC,CAAC,cAAAJ,SAAA,uBAAVA,SAAA,CAAY3B,QAAQ,KAAI,EAAG;MAC9B1E,2BAA2B,CAACmH,eAAe,CAAC;IAE9C,CAAC,CAAC,OAAO3C,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,IAAInC,YAAY,CAACC,OAAO,EAAE;QACxB1C,gBAAgB,CAAC,EAAE,CAAC;QACpBM,gBAAgB,CAAC,CAAC,CAAC,CAAC;MACtB;IACF;IAEA,IAAImC,YAAY,CAACC,OAAO,EAAErB,cAAc,CAAC,IAAI,CAAC;EAChD,CAAC;EAED,MAAMmG,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI,CAAChH,aAAa,EAAE,OAAO,KAAK;IAChC,MAAMiH,GAAG,GAAG,IAAI7D,IAAI,CAAC,CAAC;IACtB,MAAMtE,KAAK,GAAG,IAAIsE,IAAI,CAACpD,aAAa,CAAClB,KAAK,CAAC;IAC3C,MAAMC,GAAG,GAAG,IAAIqE,IAAI,CAACpD,aAAa,CAACjB,GAAG,CAAC;IACvC,OAAOkI,GAAG,IAAInI,KAAK,IAAImI,GAAG,IAAIlI,GAAG;EACnC,CAAC;EAED,MAAMmI,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAAClH,aAAa,IAAI,CAACL,wBAAwB,EAAE;MAC/CY,aAAa,CAAC;QAAEC,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAgC,CAAC,CAAC;MAC3E;IACF;IAEA,IAAI;MACFJ,WAAW,CAAC,IAAI,CAAC;MACjBE,aAAa,CAAC;QAAEC,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAE;MAAG,CAAC,CAAC;;MAE7C;MACA,MAAMqG,QAAQ,GAAGvH,aAAa,CAACwG,IAAI,CAAClB,GAAG,IAAIA,GAAG,CAACP,QAAQ,KAAK3E,wBAAwB,CAAC;MACrF,IAAI,CAACmH,QAAQ,IAAI,CAACzH,OAAO,EAAE;QACzB,MAAM,IAAI+G,KAAK,CAAC,oCAAoC,CAAC;MACvD;;MAEA;MACA,MAAMe,UAAU,GAAGtH,aAAa,CAACF,wBAAwB,CAAC,IAAI,EAAE;MAEhE,MAAMyH,QAAQ,GAAG,MAAMhF,KAAK,CAAC,sCAAsC,EAAE;QACnE4C,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,QAAQ,EAAErF,aAAa,CAAC0D,EAAE;UAC1B4B,WAAW,EAAEwB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEpD,EAAE;UAAE;UAC3B2D,KAAK,EAAEF,UAAU;UACjBG,QAAQ,EAAEjI,OAAO,CAAC;QACpB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAAC+H,QAAQ,CAACjB,EAAE,EAAE;QAChB,MAAMoB,SAAS,GAAG,MAAMH,QAAQ,CAAC7E,IAAI,CAAC,CAAC,CAAC0B,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,IAAImC,KAAK,CAACmB,SAAS,CAACnD,KAAK,IAAImD,SAAS,CAAC9G,OAAO,IAAI,sBAAsB,CAAC;MACjF;;MAEA;MACAX,gBAAgB,CAACyE,IAAI,KAAK;QACxB,GAAGA,IAAI;QACP,CAAC5E,wBAAwB,GAAGwH;MAC9B,CAAC,CAAC,CAAC;MAEH5G,aAAa,CAAC;QACZC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,2BAA2B;QACpC+G,SAAS,EAAE,IAAIpE,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;MACpC,CAAC,CAAC;;MAEF;MACA,IAAI;QACF,MAAMgD,aAAa,GAAG,MAAMpE,KAAK,CAAC,oCAAoCpC,aAAa,CAAC0D,EAAE,QAAQ,CAAC;QAC/F,IAAI8C,aAAa,CAACL,EAAE,EAAE;UACpB,MAAMM,SAAS,GAAG,MAAMD,aAAa,CAACjE,IAAI,CAAC,CAAC;UAC5C,MAAMkF,YAAY,GAAG,CAAC,CAAC;UACvBhB,SAAS,CAACG,OAAO,CAACC,IAAI,IAAI;YACxB,MAAMhC,GAAG,GAAGtF,aAAa,CAACwG,IAAI,CAAC2B,CAAC,IAAIA,CAAC,CAAChE,EAAE,KAAKmD,IAAI,CAACvB,WAAW,CAAC;YAC9D,IAAIT,GAAG,EAAE4C,YAAY,CAAC5C,GAAG,CAACP,QAAQ,CAAC,GAAGuC,IAAI,CAACA,IAAI;UACjD,CAAC,CAAC;UACF/G,gBAAgB,CAAC2H,YAAY,CAAC;QAChC;MACF,CAAC,CAAC,OAAOE,YAAY,EAAE;QACrBxD,OAAO,CAACyD,IAAI,CAAC,yBAAyB,EAAED,YAAY,CAAC;MACvD;IAEF,CAAC,CAAC,OAAOzD,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;MACzC3D,aAAa,CAAC;QACZC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAEyD,GAAG,CAACzD,OAAO,IAAI;MAC1B,CAAC,CAAC;IACJ,CAAC,SAAS;MACRJ,WAAW,CAAC,KAAK,CAAC;IACpB;EACF,CAAC;EAGD,MAAMwH,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAIzG,iBAAiB,CAACkF,MAAM,KAAK,CAAC,IAAI,CAACtF,YAAY,IAAI,CAACE,YAAY,EAAE;MACpE4G,KAAK,CAAC,yBAAyB,CAAC;MAChC;IACF;IAEA,MAAM;MAAEhJ,KAAK;MAAEC;IAAI,CAAC,GAAGH,gBAAgB,CAACsC,YAAY,CAAC;IACrD,MAAM2B,aAAa,GAAG,GAAG7B,YAAY,IAAIlC,KAAK,EAAE;IAChD,IAAIkE,WAAW;IAEf,IAAI9B,YAAY,KAAK,SAAS,IAAInC,GAAG,KAAK,OAAO,EAAE;MACjD,MAAMoE,OAAO,GAAG,IAAIC,IAAI,CAACpC,YAAY,CAAC;MACtCmC,OAAO,CAACE,OAAO,CAACF,OAAO,CAACG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;MACtC,MAAMC,UAAU,GAAGJ,OAAO,CAACK,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACtDT,WAAW,GAAG,GAAGO,UAAU,IAAIxE,GAAG,EAAE;IACtC,CAAC,MAAM;MACLiE,WAAW,GAAG,GAAGhC,YAAY,IAAIjC,GAAG,EAAE;IACxC;IAIA,MAAMgJ,uBAAuB,GAAGzG,QAAQ,CAACmD,MAAM,CAAEI,GAAG,IAClDzD,iBAAiB,CAACoD,QAAQ,CAACK,GAAG,CAACP,QAAQ,CACzC,CAAC;IAED,IAAI;MACF,KAAK,IAAIO,GAAG,IAAIkD,uBAAuB,EAAE;QACvC,MAAMX,QAAQ,GAAG,MAAMhF,KAAK,CAC1B,wCAAwC,EACxC;UACE4C,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBtC,IAAI,EAAE9B,YAAY;YAAE;YACpBiC,UAAU,EAAE/B,YAAY,CAAC8G,WAAW,CAAC,CAAC;YACtCC,YAAY,EAAE,CAACpD,GAAG,CAACnB,EAAE,CAAC;YACtB5E,KAAK,EAAE+D,aAAa;YACpB9D,GAAG,EAAEiE;UACP,CAAC;QACH,CACF,CAAC;QAED,MAAMR,IAAI,GAAG,MAAM4E,QAAQ,CAAC7E,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC6E,QAAQ,CAACjB,EAAE,EAAE;UAChB2B,KAAK,CAAC,SAAS,GAAGtF,IAAI,CAAC4B,KAAK,CAAC;UAC7B;QACF;MACF;MAEAjC,WAAW,CAAC,CAAC;MACb2F,KAAK,CAAC,gCAAgC,CAAC;IACzC,CAAC,CAAC,OAAO5D,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;MAC7C4D,KAAK,CAAC,oDAAoD,CAAC;IAC7D;IAEA/G,iBAAiB,CAAC,KAAK,CAAC;IACxBM,oBAAoB,CAAC,EAAE,CAAC;EAC1B,CAAC;EAGD,MAAM6G,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MAAA,IAAAC,cAAA;MACF,MAAMC,OAAO,GAAGpI,aAAa,CAAC0D,EAAE;MAEhC,MAAM;QAAE5E,KAAK;QAAEC;MAAI,CAAC,GAAGH,gBAAgB,CAAC8C,aAAa,CAAC;MACtD,MAAMmB,aAAa,GAAG,IAAIO,IAAI,CAAC,GAAGxB,aAAa,IAAI9C,KAAK,EAAE,CAAC;MAC3D,IAAIkE,WAAW,GAAG,IAAII,IAAI,CAAC,GAAGxB,aAAa,IAAI7C,GAAG,EAAE,CAAC;MACrD,IAAIA,GAAG,KAAK,OAAO,EAAE;QACnBiE,WAAW,CAACK,OAAO,CAACL,WAAW,CAACM,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;MAChD;MAEA,MAAM+E,gBAAgB,GACpB,EAAAF,cAAA,GAAA7G,QAAQ,CAACyE,IAAI,CAAElB,GAAG,IAAKA,GAAG,CAACnB,EAAE,KAAK5B,cAAc,CAAC,cAAAqG,cAAA,uBAAjDA,cAAA,CAAmD7D,QAAQ,KAAI,EAAE;MAEnE,MAAMgE,WAAW,GAAG7I,MAAM,CAACmF,IAAI,CAAEjC,KAAK,IAAK;QACzC,MAAM4F,SAAS,GAAG,IAAInF,IAAI,CAACT,KAAK,CAAC7D,KAAK,CAAC,CAAC0J,OAAO,CAAC,CAAC,KAAK3F,aAAa,CAAC2F,OAAO,CAAC,CAAC;QAC7E,MAAMC,OAAO,GAAG,IAAIrF,IAAI,CAACT,KAAK,CAAC5D,GAAG,CAAC,CAACyJ,OAAO,CAAC,CAAC,KAAKxF,WAAW,CAACwF,OAAO,CAAC,CAAC;QACvE,MAAME,YAAY,GAAG/F,KAAK,CAACgB,KAAK,CAACa,QAAQ,CAAC6D,gBAAgB,CAAC;QAC3D,MAAMM,cAAc,GAAGC,MAAM,CAACjG,KAAK,CAACe,EAAE,CAAC,KAAKkF,MAAM,CAACR,OAAO,CAAC;QAC3D,OAAOO,cAAc,IAAIJ,SAAS,IAAIE,OAAO,IAAIC,YAAY;MAC/D,CAAC,CAAC;MAEF,IAAIJ,WAAW,EAAE;QACfR,KAAK,CAAC,4CAA4C,CAAC;QACnD;MACF;MAEA,MAAMV,QAAQ,GAAG,MAAMhF,KAAK,CAAC,sCAAsC,EAAE;QACnE4C,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,QAAQ,EAAE+C,OAAO;UACjBtF,IAAI,EAAElB,aAAa;UACnBqB,UAAU,EAAEvB,aAAa,CAACsG,WAAW,CAAC,CAAC;UACvC1C,WAAW,EAAExD;QACf,CAAC;MACH,CAAC,CAAC;MACF,MAAM+G,MAAM,GAAG,MAAMzB,QAAQ,CAAC7E,IAAI,CAAC,CAAC;MACpC,IAAI,CAAC6E,QAAQ,CAACjB,EAAE,EAAE;QAChB2B,KAAK,CAAC,SAAS,GAAGe,MAAM,CAACzE,KAAK,CAAC;QAC/B;MACF;MACAjC,WAAW,CAAC,CAAC;MACbtB,cAAc,CAAC,KAAK,CAAC;MACrBiH,KAAK,CAAC,6BAA6B,CAAC;IACtC,CAAC,CAAC,OAAO5D,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClB4D,KAAK,CAAC,uBAAuB,CAAC;IAChC;EACF,CAAC;EACD,MAAMgB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMhF,KAAK,CAAC,wCAAwC,EAAE;QACrE4C,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,QAAQ,EAAErF,aAAa,CAAC0D;QAAG,CAAC;MACrD,CAAC,CAAC;MACF,MAAMmF,MAAM,GAAG,MAAMzB,QAAQ,CAAC7E,IAAI,CAAC,CAAC;MACpC,IAAI,CAAC6E,QAAQ,CAACjB,EAAE,EAAE;QAChB2B,KAAK,CAAC,SAAS,GAAGe,MAAM,CAACzE,KAAK,CAAC;QAC/B;MACF;MACAjC,WAAW,CAAC,CAAC;MACbtB,cAAc,CAAC,KAAK,CAAC;MACrBiH,KAAK,CAAC,6BAA6B,CAAC;IACtC,CAAC,CAAC,OAAO5D,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClB4D,KAAK,CAAC,yBAAyB,CAAC;IAClC;EACF,CAAC;EAED,MAAMiB,gBAAgB,GAAIC,GAAG,IAAK;IAChC,IAAIA,GAAG,CAAClG,IAAI,CAACmG,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE,OAAO,OAAO;IAC7C,IAAID,GAAG,CAAClG,IAAI,CAACmG,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE,OAAO,SAAS;IAC/C,IAAID,GAAG,CAAClG,IAAI,CAACmG,QAAQ,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,SAAS;IAChD,OAAO,EAAE;EACX,CAAC;EAED,MAAMC,eAAe,GAAIF,GAAG,IAAK;IAC/B,MAAMG,IAAI,GAAGH,GAAG,CAAClG,IAAI,CAACmG,QAAQ,CAAC,CAAC;IAChC,IAAIE,IAAI,KAAK,CAAC,IAAIA,IAAI,KAAK,CAAC,IAAIA,IAAI,KAAK,EAAE,EAAE;MAC3C,OAAO;QAAEC,OAAO,EAAE;MAAO,CAAC;IAC5B;IACA,OAAO,IAAI;EACb,CAAC;EAED,oBACE5K,OAAA;IAAK6K,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B9K,OAAA;MAAK6K,SAAS,EAAC,iBAAiB;MAAAC,QAAA,GAC7BjK,OAAO,iBACNb,OAAA;QACE+K,OAAO,EAAEA,CAAA,KAAMxI,iBAAiB,CAAC,IAAI,CAAE;QACvCsI,SAAS,EAAC,eAAe;QAAAC,QAAA,EAC1B;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT,eACDnL,OAAA,CAACP,YAAY;QACX2L,aAAa,EAAGlE,IAAI,IAAK;UACvB,MAAM0C,OAAO,GAAG1C,IAAI,CAACC,KAAK,CAACjC,EAAE;;UAI7B;UACA,IAAI,CAAC3D,aAAa,CAACmC,OAAO,CAACkG,OAAO,CAAC,EAAE;YACnC,MAAMyB,WAAW,GAAG7H,cAAc,CAAC8H,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGhI,cAAc,CAACsE,MAAM,CAAC,CAAC;YACrFvG,aAAa,CAACmC,OAAO,CAACkG,OAAO,CAAC,GAAGyB,WAAW;UAC9C;UACA,MAAMI,KAAK,GAAGlK,aAAa,CAACmC,OAAO,CAACkG,OAAO,CAAC;UAC5C1C,IAAI,CAACwE,EAAE,CAACC,KAAK,CAACC,eAAe,GAAGH,KAAK;UACrCvE,IAAI,CAACwE,EAAE,CAACC,KAAK,CAACF,KAAK,GAAG,MAAM;UAC5BvE,IAAI,CAACwE,EAAE,CAACC,KAAK,CAACE,WAAW,GAAGJ,KAAK;;UAGjC;UACA,IAAIK,MAAM,CAACC,WAAW,IAAI7E,IAAI,CAACwE,EAAE,EAAE;YACjCI,MAAM,CAACC,WAAW,CAACC,IAAI,CAAC9E,IAAI,CAACwE,EAAE,EAAE;cAE/BO,KAAK,EAAE,IAAI;cACX,WAAW,EAAE;YAEf,CAAC,CAAC;UACJ;QACF,CAAE;QAEFC,OAAO,EAAE,CAACxM,aAAa,EAAEC,cAAc,EAAEC,iBAAiB,CAAE;QAC5DuM,WAAW,EAAC,cAAc;QAC1BC,YAAY,EAAC,UAAU;QACvBC,iBAAiB,EAAE;UAAEC,KAAK,EAAE;QAAE,CAAE;QAChCC,UAAU,EAAE,KAAM;QAClBC,WAAW,EAAC,UAAU;QACtBC,WAAW,EAAC,UAAU;QACtBC,MAAM,EAAEzL,MAAO;QACf0L,UAAU,EAAE1F,gBAAiB;QAC7BsD,gBAAgB,EAAEA,gBAAiB;QACnCqC,gBAAgB,EAAE,KAAM;QACxBlC,eAAe,EAAEA,eAAgB;QACjCmC,aAAa,EAAE;UACbC,IAAI,EAAE,iBAAiB;UACvBC,MAAM,EAAE,OAAO;UACfC,KAAK,EAAE;QACT,CAAE;QACFC,MAAM,EAAC,MAAM;QACbC,YAAY,EAAE,KAAM;QACpBC,eAAe,EAAE,IAAK;QACtBC,YAAY,EAAE,IAAK;QACnBC,gBAAgB,EAAE,KAAM;QACxBC,UAAU,EAAE,OAAQ;QACpBC,YAAY,EAAG/C,GAAG,IAAK;UACrB,MAAMgD,UAAU,GAAGhD,GAAG,CAACrD,KAAK,CAAChC,KAAK,CAACF,KAAK,CAAC,KAAK,CAAC;UAC/C,MAAMwI,UAAU,GAAGD,UAAU,CAAC,CAAC,CAAC;UAChC,MAAME,YAAY,GAAGF,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE;UACxC,MAAMG,YAAY,GAAGD,YAAY,CAC9BzI,KAAK,CAAC,GAAG,CAAC,CACVf,GAAG,CAAC,CAAC0J,IAAI,EAAEC,KAAK,KAAK,QAAQA,KAAK,GAAG,CAAC,KAAKD,IAAI,CAACE,IAAI,CAAC,CAAC,QAAQ,CAAC,CAC/DtI,IAAI,CAAC,EAAE,CAAC;UAEX,OAAO;YACLuI,IAAI,EAAE;AACpB,0BAA0BN,UAAU;AACpC,gDAAgDE,YAAY;AAC5D;UACY,CAAC;QACH;MAAE;QAAA3C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENnL,OAAA,CAACH,KAAK;MACJmO,MAAM,EAAE5L,WAAY;MACpB6L,cAAc,EAAEA,CAAA,KAAM5L,cAAc,CAAC,KAAK,CAAE;MAC5CwI,SAAS,EAAC,OAAO;MACjBqD,gBAAgB,EAAC,SAAS;MAAApD,QAAA,gBAE1B9K,OAAA;QAAA8K,QAAA,EAAI;MAAa;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACrB3J,aAAa,iBACZxB,OAAA,CAAAE,SAAA;QAAA4K,QAAA,gBACE9K,OAAA;UAAK6K,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5B9K,OAAA;YAAK6K,SAAS,EAAC,cAAc;YAAAC,QAAA,gBAC3B9K,OAAA;cAAA8K,QAAA,gBACE9K,OAAA;gBAAA8K,QAAA,EAAQ;cAAM;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,KAAC,EAAC3J,aAAa,CAAC2D,KAAK;YAAA;cAAA6F,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3C,CAAC,eACJnL,OAAA;cAAA8K,QAAA,gBACE9K,OAAA;gBAAA8K,QAAA,EAAQ;cAAM;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,EAAC,GAAG,EAC1B,IAAIvG,IAAI,CAACpD,aAAa,CAAClB,KAAK,CAAC,CAAC6N,cAAc,CAAC,CAAC;YAAA;cAAAnD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9C,CAAC,eACJnL,OAAA;cAAA8K,QAAA,gBACE9K,OAAA;gBAAA8K,QAAA,EAAQ;cAAI;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,EAAC,GAAG,EACxB,IAAIvG,IAAI,CAACpD,aAAa,CAACjB,GAAG,CAAC,CAAC4N,cAAc,CAAC,CAAC;YAAA;cAAAnD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5C,CAAC,eAEJnL,OAAA;cAAK6K,SAAS,EAAC,iBAAiB;cAAAC,QAAA,gBAC9B9K,OAAA;gBAAA8K,QAAA,EAAI;cAAmB;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC5BnL,OAAA;gBAAA8K,QAAA,EACG/J,aAAa,CAAC+G,MAAM,KAAK,CAAC,gBACzB9H,OAAA;kBAAA8K,QAAA,EAAI;gBAAqB;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,GAE9BpK,aAAa,CAACmD,GAAG,CAAEmC,GAAG,iBACpBrG,OAAA;kBAAA8K,QAAA,GACGzE,GAAG,CAACP,QAAQ,EAAC,UAAG,EAACO,GAAG,CAACU,YAAY,KAAK,KAAK,GAAG,KAAK,GAAG,IAAI;gBAAA,GADpDV,GAAG,CAACnB,EAAE;kBAAA8F,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAEX,CACL;cACF;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC,EAELtK,OAAO,iBACNb,OAAA,CAAAE,SAAA;cAAA4K,QAAA,gBACE9K,OAAA;gBAAA8K,QAAA,EAAI;cAAU;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACnBnL,OAAA;gBAAA8K,QAAA,EAAO;cAAK;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACpBnL,OAAA;gBACEoO,IAAI,EAAC,MAAM;gBACXC,KAAK,EAAEjL,aAAc;gBACrBkL,QAAQ,EAAGpF,CAAC,IAAK7F,gBAAgB,CAAC6F,CAAC,CAACqF,MAAM,CAACF,KAAK;cAAE;gBAAArD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnD,CAAC,eAEFnL,OAAA;gBAAA8K,QAAA,EAAO;cAAW;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eAC1BnL,OAAA;gBACEqO,KAAK,EAAEnL,aAAc;gBACrBoL,QAAQ,EAAGpF,CAAC,IAAK/F,gBAAgB,CAAC+F,CAAC,CAACqF,MAAM,CAACF,KAAK,CAAE;gBAAAvD,QAAA,gBAElD9K,OAAA;kBAAA8K,QAAA,EAAQ;gBAAO;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACxBnL,OAAA;kBAAA8K,QAAA,EAAQ;gBAAO;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACxBnL,OAAA;kBAAA8K,QAAA,EAAQ;gBAAK;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAChB,CAAC,eAETnL,OAAA;gBAAA8K,QAAA,EAAO;cAAS;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACxBnL,OAAA;gBACEqO,KAAK,EAAE/K,cAAe;gBACtBgL,QAAQ,EAAGpF,CAAC,IAAK3F,iBAAiB,CAAC2F,CAAC,CAACqF,MAAM,CAACF,KAAK,CAAE;gBAAAvD,QAAA,gBAEnD9K,OAAA;kBAAQqO,KAAK,EAAC,EAAE;kBAAAvD,QAAA,EAAC;gBAAe;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,EACxCrI,QAAQ,CAACoB,GAAG,CAAEmC,GAAG,iBAChBrG,OAAA;kBAAqBqO,KAAK,EAAEhI,GAAG,CAACnB,EAAG;kBAAA4F,QAAA,EAChCzE,GAAG,CAACP;gBAAQ,GADFO,GAAG,CAACnB,EAAE;kBAAA8F,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAEX,CACT,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACI,CAAC;YAAA,eACT,CACH;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eAENnL,OAAA;YAAK6K,SAAS,EAAC,eAAe;YAAAC,QAAA,gBAC5B9K,OAAA;cAAO6K,SAAS,EAAC,QAAQ;cAAAC,QAAA,EAAC;YAAiB;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,EAClDpK,aAAa,CAAC+G,MAAM,GAAG,CAAC,gBACvB9H,OAAA;cAAK6K,SAAS,EAAC,0BAA0B;cAAAC,QAAA,gBACvC9K,OAAA;gBACEqO,KAAK,EAAElN,wBAAyB;gBAChCmN,QAAQ,EAAGpF,CAAC,IAAK;kBACf9H,2BAA2B,CAAC8H,CAAC,CAACqF,MAAM,CAACF,KAAK,CAAC;gBAC7C,CAAE;gBACFxD,SAAS,EAAC,uBAAuB;gBACjC2D,QAAQ,EAAEzN,aAAa,CAAC+G,MAAM,KAAK,CAAE;gBAAAgD,QAAA,EAEpC/J,aAAa,CAACmD,GAAG,CAAEmC,GAAG,iBACrBrG,OAAA;kBAAqBqO,KAAK,EAAEhI,GAAG,CAACP,QAAS;kBAAAgF,QAAA,GACtCzE,GAAG,CAACP,QAAQ,EAAC,UACd,EAAC,CAAAlF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEkF,QAAQ,MAAKO,GAAG,CAACP,QAAQ,GAAG,QAAQ,GAAG,EAAE;gBAAA,GAFrCO,GAAG,CAACnB,EAAE;kBAAA8F,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAGX,CACT;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACI,CAAC,EACR9J,aAAa,CAACF,wBAAwB,CAAC,iBACtCnB,OAAA;gBAAK6K,SAAS,EAAC,cAAc;gBAAAC,QAAA,GAAC,gBACd,EAAC,IAAIlG,IAAI,CAAC,CAAC,CAACuJ,cAAc,CAAC,CAAC,EAAC,GAAC;cAAA;gBAAAnD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACzC,CACN;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC,gBAENnL,OAAA;cAAK6K,SAAS,EAAC,kBAAkB;cAAAC,QAAA,EAAC;YAAmC;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAC3E,eAEDnL,OAAA;cACEyO,IAAI,EAAC,IAAI;cACTJ,KAAK,EAAEhN,aAAa,CAACF,wBAAwB,CAAC,IAAI,EAAG;cACrDmN,QAAQ,EAAGpF,CAAC,IAAK;gBACf,MAAMwF,QAAQ,GAAG;kBAAE,GAAGrN;gBAAc,CAAC;gBACrCqN,QAAQ,CAACvN,wBAAwB,CAAC,GAAG+H,CAAC,CAACqF,MAAM,CAACF,KAAK;gBACnD/M,gBAAgB,CAACoN,QAAQ,CAAC;cAC5B,CAAE;cACFF,QAAQ,EACN,CAAC3N,OAAO,KACP,CAAC2H,aAAa,CAAC,CAAC,IAAI,CAAA5H,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEkF,QAAQ,MAAK3E,wBAAwB,CACjE;cACD0J,SAAS,EACP,CAAChK,OAAO,IAAI,CAAAD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEkF,QAAQ,MAAK3E,wBAAwB,GACnD,0BAA0B,GAC1B,gBACL;cACDwN,UAAU,EAAC,OAAO;cAClBC,WAAW,EACT/N,OAAO,GACH,2BAA2B,GAC3B2H,aAAa,CAAC,CAAC,GACb,CAAA5H,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEkF,QAAQ,MAAK3E,wBAAwB,GACzC,gCAAgC,GAChC,8CAA8C,GAChD;YACP;cAAA6J,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC,EAED,CAAC3C,aAAa,CAAC,CAAC,IAAI,CAAC3H,OAAO,iBAC3Bb,OAAA;cAAK6K,SAAS,EAAC,uBAAuB;cAAAC,QAAA,EAAC;YAEvC;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CACN;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAENnL,OAAA;UAAK6K,SAAS,EAAC,eAAe;UAAAC,QAAA,GAC3BlJ,QAAQ,iBAAI5B,OAAA;YAAK6K,SAAS,EAAC,oBAAoB;YAAAC,QAAA,EAAC;UAAS;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EAC/DrJ,UAAU,CAACG,OAAO,iBACjBjC,OAAA;YAAK6K,SAAS,EAAE,eAAe/I,UAAU,CAACE,OAAO,GAAG,SAAS,GAAG,OAAO,EAAG;YAAA8I,QAAA,EACvEhJ,UAAU,CAACG;UAAO;YAAA+I,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChB,CACN,eAEDnL,OAAA;YACE+K,OAAO,EAAErC,UAAW;YACpB8F,QAAQ,EAAG,CAAChG,aAAa,CAAC,CAAC,IAAI,CAAC3H,OAAO,IAAKe,QAAS;YACrDiJ,SAAS,EAAC,oBAAoB;YAAAC,QAAA,EAE7BlJ,QAAQ,gBACP5B,OAAA,CAAAE,SAAA;cAAA4K,QAAA,gBACE9K,OAAA;gBAAM6K,SAAS,EAAC;cAAS;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,cACnC;YAAA,eAAE,CAAC,GAEH;UACD;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACK,CAAC,EAER,CAACtK,OAAO,iBACPb,OAAA;YAAK6K,SAAS,EAAC,qBAAqB;YAAAC,QAAA,gBAClC9K,OAAA;cACEoO,IAAI,EAAC,UAAU;cACflJ,EAAE,EAAC,WAAW;cACd2F,SAAS,EAAC,QAAQ;cAClBgE,OAAO,EAAE7L,QAAS;cAClBsL,QAAQ,EAAEhI,eAAgB;cAC1BkI,QAAQ,EAAE,CAACrI,aAAa,CAAC;YAAE;cAAA6E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5B,CAAC,eACFnL,OAAA;cAAO8O,OAAO,EAAC,WAAW;cAAAhE,QAAA,gBACxB9K,OAAA;gBAAM6K,SAAS,EAAC,eAAe;gBAAAC,QAAA,EAAC;cAAM;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eAC7CnL,OAAA;gBAAM6K,SAAS,EAAC,qBAAqB;gBAAAC,QAAA,gBACnC9K,OAAA;kBAAM6K,SAAS,EAAC,oBAAoB;kBAACc,KAAK,EAAE;oBAAEF,KAAK,EAAE;kBAAM,CAAE;kBAAAX,QAAA,EAAC;gBAE9D;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eACPnL,OAAA;kBAAM6K,SAAS,EAAC,kBAAkB;kBAACc,KAAK,EAAE;oBAAEF,KAAK,EAAE;kBAAO,CAAE;kBAAAX,QAAA,EAAC;gBAE7D;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CACN,EAEAtK,OAAO,iBACNb,OAAA,CAAAE,SAAA;YAAA4K,QAAA,gBACE9K,OAAA;cAAQ+K,OAAO,EAAErB,eAAgB;cAACmB,SAAS,EAAC,oBAAoB;cAAAC,QAAA,EAAC;YAEjE;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTnL,OAAA;cAAQ+K,OAAO,EAAET,iBAAkB;cAACO,SAAS,EAAC,sBAAsB;cAAAC,QAAA,EAAC;YAErE;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA,eACT,CACH,eAEDnL,OAAA;YACE+K,OAAO,EAAEA,CAAA,KAAM1I,cAAc,CAAC,KAAK,CAAE;YACrCwI,SAAS,EAAC,sBAAsB;YAAAC,QAAA,EACjC;UAED;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA,eACN,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,eAGRnL,OAAA,CAACH,KAAK;MACJmO,MAAM,EAAE1L,cAAe;MACvB2L,cAAc,EAAEA,CAAA,KAAM1L,iBAAiB,CAAC,KAAK,CAAE;MAC/CsI,SAAS,EAAC,OAAO;MACjBqD,gBAAgB,EAAC,SAAS;MAAApD,QAAA,gBAE1B9K,OAAA;QAAA8K,QAAA,EAAI;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBnL,OAAA;QAAA8K,QAAA,EAAO;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACpBnL,OAAA;QACEoO,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE7L,YAAa;QACpB8L,QAAQ,EAAGpF,CAAC,IAAKzG,eAAe,CAACyG,CAAC,CAACqF,MAAM,CAACF,KAAK;MAAE;QAAArD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC,eAEFnL,OAAA;QAAA8K,QAAA,EAAO;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC1BnL,OAAA;QACEqO,KAAK,EAAE3L,YAAa;QACpB4L,QAAQ,EAAGpF,CAAC,IAAKvG,eAAe,CAACuG,CAAC,CAACqF,MAAM,CAACF,KAAK,CAAE;QAAAvD,QAAA,gBAEjD9K,OAAA;UAAA8K,QAAA,EAAQ;QAAO;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACxBnL,OAAA;UAAA8K,QAAA,EAAQ;QAAO;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACxBnL,OAAA;UAAA8K,QAAA,EAAQ;QAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChB,CAAC,eAETnL,OAAA;QAAA8K,QAAA,EAAO;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAChCnL,OAAA;QAAK6K,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAClChI,QAAQ,CAACoB,GAAG,CAAEmC,GAAG,iBAChBrG,OAAA;UAAkB6K,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAC7C9K,OAAA;YACEoO,IAAI,EAAC,UAAU;YACflJ,EAAE,EAAE,OAAOmB,GAAG,CAACnB,EAAE,EAAG;YACpB2J,OAAO,EAAEjM,iBAAiB,CAACoD,QAAQ,CAACK,GAAG,CAACP,QAAQ,CAAE;YAClDwI,QAAQ,EAAEA,CAAA,KAAMzI,oBAAoB,CAACQ,GAAG,CAACP,QAAQ;UAAE;YAAAkF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpD,CAAC,eACFnL,OAAA;YAAO8O,OAAO,EAAE,OAAOzI,GAAG,CAACnB,EAAE,EAAG;YAAA4F,QAAA,EAAEzE,GAAG,CAACP;UAAQ;YAAAkF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAP/C9E,GAAG,CAACnB,EAAE;UAAA8F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQX,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAINnL,OAAA;QAAK6K,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5B9K,OAAA;UACE+K,OAAO,EAAE1B,cAAe;UACxBwB,SAAS,EAAC,oBAAoB;UAAAC,QAAA,EAC/B;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTnL,OAAA;UACE+K,OAAO,EAAEA,CAAA,KAAMxI,iBAAiB,CAAC,KAAK,CAAE;UACxCsI,SAAS,EAAC,sBAAsB;UAAAC,QAAA,EACjC;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACxK,EAAA,CAl1BID,MAAM;EAAA,QACOZ,OAAO;AAAA;AAAAiP,EAAA,GADpBrO,MAAM;AAo1BZ,eAAeA,MAAM;AAAC,IAAAqO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}