{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\Portal\\\\soc-portal\\\\src\\\\pages\\\\Shifts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport Modal from \"react-modal\";\nimport { useAuth } from \"../context/AuthContext\";\nimport \"../styles/Shifts.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst shiftTimeMapping = {\n  Morning: {\n    start: \"08:00\",\n    end: \"16:00\"\n  },\n  Evening: {\n    start: \"16:00\",\n    end: \"24:00\"\n  },\n  Night: {\n    start: \"00:00\",\n    end: \"08:00\"\n  }\n};\nconst Shifts = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const isAdmin = (user === null || user === void 0 ? void 0 : user.role) === \"admin\";\n  const [shifts, setShifts] = useState([]);\n  const [selectedShift, setSelectedShift] = useState(null);\n  const [comment, setComment] = useState(\"\");\n  const [commentsMap, setCommentsMap] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [newShiftDate, setNewShiftDate] = useState(\"\");\n  const [newShiftType, setNewShiftType] = useState(\"Morning\");\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\n  const [analysts, setAnalysts] = useState([]);\n  const [editShiftType, setEditShiftType] = useState(\"Morning\");\n  const [editShiftDate, setEditShiftDate] = useState(\"\");\n  const [editEmployeeId, setEditEmployeeId] = useState(\"\");\n  useEffect(() => {\n    fetch(\"http://192.168.29.194:5000/api/shifts\").then(res => res.json()).then(data => setShifts(data)).catch(err => console.error(\"Failed to fetch shifts:\", err));\n    fetch(\"http://192.168.29.194:5000/api/analysts\").then(res => res.json()).then(data => setAnalysts(data)).catch(err => console.error(\"Failed to fetch analysts:\", err));\n  }, []);\n  const handleEmployeeToggle = username => {\n    setSelectedEmployees(prev => prev.includes(username) ? prev.filter(u => u !== username) : [...prev, username]);\n  };\n  const handleEventClick = info => {\n    const shift = info.event;\n    setSelectedShift(shift);\n    setComment(commentsMap[shift.id] || \"\");\n    if (isAdmin) {\n      const date = shift.start.toISOString().slice(0, 10);\n      let shiftType = \"Morning\";\n      if (shift.title.includes(\"Morning\")) shiftType = \"Morning\";else if (shift.title.includes(\"Evening\")) shiftType = \"Evening\";else if (shift.title.includes(\"Night\")) shiftType = \"Night\";\n      const firstEmp = shift.title.split(\" - \")[0].split(\", \")[0];\n      const matchedEmp = analysts.find(emp => emp.username === firstEmp);\n      setEditShiftType(shiftType);\n      setEditShiftDate(date);\n      setEditEmployeeId((matchedEmp === null || matchedEmp === void 0 ? void 0 : matchedEmp.id) || \"\");\n    }\n    setIsModalOpen(true);\n  };\n  const isWithinShift = () => {\n    if (!selectedShift) return false;\n    const now = new Date();\n    const start = new Date(selectedShift.start);\n    const end = new Date(selectedShift.end);\n    return now >= start && now <= end;\n  };\n  const handleSave = () => {\n    if (selectedShift) {\n      setCommentsMap(prev => ({\n        ...prev,\n        [selectedShift.id]: comment\n      }));\n    }\n    setIsModalOpen(false);\n  };\n  const handleAddShift = async () => {\n    if (selectedEmployees.length === 0 || !newShiftDate || !newShiftType) {\n      alert(\"Please fill all fields.\");\n      return;\n    }\n    const {\n      start,\n      end\n    } = shiftTimeMapping[newShiftType];\n    const startDateTime = new Date(`${newShiftDate}T${start}`);\n    let endDateTime = new Date(`${newShiftDate}T${end}`);\n    if (end === \"00:00\") {\n      endDateTime.setDate(endDateTime.getDate() + 1);\n    }\n    const usernames = selectedEmployees.join(\", \");\n    const isDuplicate = shifts.some(shift => new Date(shift.start).getTime() === startDateTime.getTime() && new Date(shift.end).getTime() === endDateTime.getTime() && shift.title === `${usernames} - ${newShiftType}`);\n    if (isDuplicate) {\n      alert(\"This shift already exists with selected employees.\");\n      return;\n    }\n    try {\n      const employeeIds = analysts.filter(emp => selectedEmployees.includes(emp.username)).map(emp => emp.id);\n      const response = await fetch(\"http://192.168.29.194:5000/api/create_shift\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          date: newShiftDate,\n          shift_type: newShiftType.toLowerCase(),\n          employee_ids: employeeIds\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        alert(\"Error: \" + data.error);\n        return;\n      }\n      const newShiftEvent = {\n        title: usernames + \" - \" + newShiftType,\n        start: startDateTime.toISOString(),\n        end: endDateTime.toISOString(),\n        id: data.shift_id\n      };\n      setShifts(prev => [...prev, newShiftEvent]);\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to create shift.\");\n    }\n    setIsAddModalOpen(false);\n    setSelectedEmployees([]);\n    alert(\"Shift created successfully!\");\n  };\n  const handleEditShift = async () => {\n    try {\n      var _analysts$find2;\n      const shiftId = selectedShift.id;\n      const {\n        start,\n        end\n      } = shiftTimeMapping[editShiftType];\n      const startDateTime = new Date(`${editShiftDate}T${start}`);\n      let endDateTime = new Date(`${editShiftDate}T${end}`);\n      if (end === \"00:00\") {\n        endDateTime.setDate(endDateTime.getDate() + 1);\n      }\n      const isDuplicate = shifts.some(shift => {\n        var _analysts$find;\n        const sameStart = new Date(shift.start).getTime() === startDateTime.getTime();\n        const sameEnd = new Date(shift.end).getTime() === endDateTime.getTime();\n        const selectedUsername = ((_analysts$find = analysts.find(emp => emp.id === editEmployeeId)) === null || _analysts$find === void 0 ? void 0 : _analysts$find.username) || \"\";\n        const sameEmployee = shift.title.includes(selectedUsername);\n        const differentShift = String(shift.id) !== String(shiftId);\n        return differentShift && sameStart && sameEnd && sameEmployee;\n      });\n      if (isDuplicate) {\n        alert(\"Another shift already exists in that slot!\");\n        return;\n      }\n      const response = await fetch(\"http://192.168.29.194:5000/api/edit_shift\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          shift_id: shiftId,\n          date: editShiftDate,\n          shift_type: editShiftType.toLowerCase(),\n          employee_id: editEmployeeId\n        })\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        alert(\"Error: \" + result.error);\n        return;\n      }\n      const newUsername = ((_analysts$find2 = analysts.find(emp => emp.id === editEmployeeId)) === null || _analysts$find2 === void 0 ? void 0 : _analysts$find2.username) || selectedShift.title.split(\" - \")[0];\n      const updatedShifts = shifts.map(shift => shift.id === shiftId ? {\n        ...shift,\n        title: newUsername + \" - \" + editShiftType,\n        start: startDateTime.toISOString(),\n        end: endDateTime.toISOString()\n      } : shift);\n      setShifts(updatedShifts);\n      setIsModalOpen(false);\n      alert(\"Shift updated successfully!\");\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to edit shift.\");\n    }\n  };\n  const handleDeleteShift = async () => {\n    try {\n      const response = await fetch(\"http://192.168.29.194:5000/api/delete_shift\", {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          shift_id: selectedShift.id\n        })\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        alert(\"Error: \" + result.error);\n        return;\n      }\n      setShifts(prev => prev.filter(shift => shift.id !== selectedShift.id));\n      setIsModalOpen(false);\n      alert(\"Shift deleted successfully!\");\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to delete shift.\");\n    }\n  };\n\n  // Custom slot rendering\n  const slotLabelContent = arg => {\n    // Only show custom labels for the three main slots\n    if (arg.date.getHours() === 8) return \"Morning\";\n    if (arg.date.getHours() === 16) return \"Evening\";\n    if (arg.date.getHours() === 0) return \"Night\";\n    return \"\";\n  };\n\n  // Filter out slots we don't want to display\n  const slotLaneContent = arg => {\n    const hour = arg.date.getHours();\n    // Only show our three main slots (Morning: 8-16, Evening: 16-24, Night: 0-8)\n    return hour >= 8 && hour < 16 ? \"Morning\" : hour >= 16 && hour < 24 ? \"Evening\" : \"Night\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"shifts\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Shift Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: \"dayGridMonth\",\n      events: shifts,\n      dateClick: handleEventClick,\n      slotLabelContent: slotLabelContent,\n      slotLaneContent: slotLaneContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Shift\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Shift Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: editShiftType,\n          onChange: e => setEditShiftType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Morning\",\n            children: \"Morning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Evening\",\n            children: \"Evening\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Night\",\n            children: \"Night\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: editShiftDate,\n          onChange: e => setEditShiftDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Employee:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: editEmployeeId,\n          onChange: e => setEditEmployeeId(e.target.value),\n          children: analysts.map(emp => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: emp.id,\n            children: emp.username\n          }, emp.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEditShift,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteShift,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsModalOpen(false),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isAddModalOpen,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create Shift\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: newShiftDate,\n          onChange: e => setNewShiftDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Shift Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: newShiftType,\n          onChange: e => setNewShiftType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Morning\",\n            children: \"Morning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Evening\",\n            children: \"Evening\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Night\",\n            children: \"Night\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Employees:\", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: analysts.map(emp => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onChange: () => handleEmployeeToggle(emp.username),\n              checked: selectedEmployees.includes(emp.username)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }, this), emp.username]\n          }, emp.username, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddShift,\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsAddModalOpen(false),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 5\n  }, this);\n};\n_s(Shifts, \"QO8ZjenuG1G47/evisl5qGOKhds=\", false, function () {\n  return [useAuth];\n});\n_c = Shifts;\nexport default Shifts;\nvar _c;\n$RefreshReg$(_c, \"Shifts\");","map":{"version":3,"names":["React","useState","useEffect","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","Modal","useAuth","jsxDEV","_jsxDEV","setAppElement","shiftTimeMapping","Morning","start","end","Evening","Night","Shifts","_s","user","isAdmin","role","shifts","setShifts","selectedShift","setSelectedShift","comment","setComment","commentsMap","setCommentsMap","isModalOpen","setIsModalOpen","isAddModalOpen","setIsAddModalOpen","newShiftDate","setNewShiftDate","newShiftType","setNewShiftType","selectedEmployees","setSelectedEmployees","analysts","setAnalysts","editShiftType","setEditShiftType","editShiftDate","setEditShiftDate","editEmployeeId","setEditEmployeeId","fetch","then","res","json","data","catch","err","console","error","handleEmployeeToggle","username","prev","includes","filter","u","handleEventClick","info","shift","event","id","date","toISOString","slice","shiftType","title","firstEmp","split","matchedEmp","find","emp","isWithinShift","now","Date","handleSave","handleAddShift","length","alert","startDateTime","endDateTime","setDate","getDate","usernames","join","isDuplicate","some","getTime","employeeIds","map","response","method","headers","body","JSON","stringify","shift_type","toLowerCase","employee_ids","ok","newShiftEvent","shift_id","handleEditShift","_analysts$find2","shiftId","_analysts$find","sameStart","sameEnd","selectedUsername","sameEmployee","differentShift","String","employee_id","result","newUsername","updatedShifts","handleDeleteShift","slotLabelContent","arg","getHours","slotLaneContent","hour","className","children","fileName","_jsxFileName","lineNumber","columnNumber","plugins","initialView","events","dateClick","isOpen","value","onChange","e","target","type","onClick","checked","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/Portal/soc-portal/src/pages/Shifts.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport Modal from \"react-modal\";\r\nimport { useAuth } from \"../context/AuthContext\";\r\nimport \"../styles/Shifts.css\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nconst shiftTimeMapping = {\r\n  Morning: { start: \"08:00\", end: \"16:00\" },\r\n  Evening: { start: \"16:00\", end: \"24:00\" },\r\n  Night: { start: \"00:00\", end: \"08:00\" },\r\n};\r\n\r\nconst Shifts = () => {\r\n  const { user } = useAuth();\r\n  const isAdmin = user?.role === \"admin\";\r\n\r\n  const [shifts, setShifts] = useState([]);\r\n  const [selectedShift, setSelectedShift] = useState(null);\r\n  const [comment, setComment] = useState(\"\");\r\n  const [commentsMap, setCommentsMap] = useState({});\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\r\n  const [newShiftDate, setNewShiftDate] = useState(\"\");\r\n  const [newShiftType, setNewShiftType] = useState(\"Morning\");\r\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n  const [analysts, setAnalysts] = useState([]);\r\n\r\n  const [editShiftType, setEditShiftType] = useState(\"Morning\");\r\n  const [editShiftDate, setEditShiftDate] = useState(\"\");\r\n  const [editEmployeeId, setEditEmployeeId] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://192.168.29.194:5000/api/shifts\")\r\n      .then((res) => res.json())\r\n      .then((data) => setShifts(data))\r\n      .catch((err) => console.error(\"Failed to fetch shifts:\", err));\r\n\r\n    fetch(\"http://192.168.29.194:5000/api/analysts\")\r\n      .then((res) => res.json())\r\n      .then((data) => setAnalysts(data))\r\n      .catch((err) => console.error(\"Failed to fetch analysts:\", err));\r\n  }, []);\r\n\r\n  const handleEmployeeToggle = (username) => {\r\n    setSelectedEmployees((prev) =>\r\n      prev.includes(username)\r\n        ? prev.filter((u) => u !== username)\r\n        : [...prev, username]\r\n    );\r\n  };\r\n\r\n  const handleEventClick = (info) => {\r\n    const shift = info.event;\r\n    setSelectedShift(shift);\r\n    setComment(commentsMap[shift.id] || \"\");\r\n\r\n    if (isAdmin) {\r\n      const date = shift.start.toISOString().slice(0, 10);\r\n      let shiftType = \"Morning\";\r\n      if (shift.title.includes(\"Morning\")) shiftType = \"Morning\";\r\n      else if (shift.title.includes(\"Evening\")) shiftType = \"Evening\";\r\n      else if (shift.title.includes(\"Night\")) shiftType = \"Night\";\r\n\r\n      const firstEmp = shift.title.split(\" - \")[0].split(\", \")[0];\r\n      const matchedEmp = analysts.find((emp) => emp.username === firstEmp);\r\n\r\n      setEditShiftType(shiftType);\r\n      setEditShiftDate(date);\r\n      setEditEmployeeId(matchedEmp?.id || \"\");\r\n    }\r\n\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const isWithinShift = () => {\r\n    if (!selectedShift) return false;\r\n    const now = new Date();\r\n    const start = new Date(selectedShift.start);\r\n    const end = new Date(selectedShift.end);\r\n    return now >= start && now <= end;\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (selectedShift) {\r\n      setCommentsMap((prev) => ({\r\n        ...prev,\r\n        [selectedShift.id]: comment,\r\n      }));\r\n    }\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const handleAddShift = async () => {\r\n    if (selectedEmployees.length === 0 || !newShiftDate || !newShiftType) {\r\n      alert(\"Please fill all fields.\");\r\n      return;\r\n    }\r\n\r\n    const { start, end } = shiftTimeMapping[newShiftType];\r\n    const startDateTime = new Date(`${newShiftDate}T${start}`);\r\n    let endDateTime = new Date(`${newShiftDate}T${end}`);\r\n    if (end === \"00:00\") {\r\n      endDateTime.setDate(endDateTime.getDate() + 1);\r\n    }\r\n\r\n    const usernames = selectedEmployees.join(\", \");\r\n\r\n    const isDuplicate = shifts.some(\r\n      (shift) =>\r\n        new Date(shift.start).getTime() === startDateTime.getTime() &&\r\n        new Date(shift.end).getTime() === endDateTime.getTime() &&\r\n        shift.title === `${usernames} - ${newShiftType}`\r\n    );\r\n\r\n    if (isDuplicate) {\r\n      alert(\"This shift already exists with selected employees.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const employeeIds = analysts\r\n        .filter((emp) => selectedEmployees.includes(emp.username))\r\n        .map((emp) => emp.id);\r\n\r\n      const response = await fetch(\"http://192.168.29.194:5000/api/create_shift\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          date: newShiftDate,\r\n          shift_type: newShiftType.toLowerCase(),\r\n          employee_ids: employeeIds,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        alert(\"Error: \" + data.error);\r\n        return;\r\n      }\r\n\r\n      const newShiftEvent = {\r\n        title: usernames + \" - \" + newShiftType,\r\n        start: startDateTime.toISOString(),\r\n        end: endDateTime.toISOString(),\r\n        id: data.shift_id,\r\n      };\r\n\r\n      setShifts((prev) => [...prev, newShiftEvent]);\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"Failed to create shift.\");\r\n    }\r\n\r\n    setIsAddModalOpen(false);\r\n    setSelectedEmployees([]);\r\n    alert(\"Shift created successfully!\");\r\n  };\r\n\r\n  const handleEditShift = async () => {\r\n    try {\r\n      const shiftId = selectedShift.id;\r\n\r\n      const { start, end } = shiftTimeMapping[editShiftType];\r\n      const startDateTime = new Date(`${editShiftDate}T${start}`);\r\n      let endDateTime = new Date(`${editShiftDate}T${end}`);\r\n      if (end === \"00:00\") {\r\n        endDateTime.setDate(endDateTime.getDate() + 1);\r\n      }\r\n\r\n      const isDuplicate = shifts.some((shift) => {\r\n        const sameStart = new Date(shift.start).getTime() === startDateTime.getTime();\r\n        const sameEnd = new Date(shift.end).getTime() === endDateTime.getTime();\r\n        const selectedUsername = analysts.find((emp) => emp.id === editEmployeeId)?.username || \"\";\r\n        const sameEmployee = shift.title.includes(selectedUsername);\r\n        const differentShift = String(shift.id) !== String(shiftId);\r\n        return differentShift && sameStart && sameEnd && sameEmployee;\r\n      });\r\n\r\n      if (isDuplicate) {\r\n        alert(\"Another shift already exists in that slot!\");\r\n        return;\r\n      }\r\n\r\n      const response = await fetch(\"http://192.168.29.194:5000/api/edit_shift\", {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          shift_id: shiftId,\r\n          date: editShiftDate,\r\n          shift_type: editShiftType.toLowerCase(),\r\n          employee_id: editEmployeeId,\r\n        }),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (!response.ok) {\r\n        alert(\"Error: \" + result.error);\r\n        return;\r\n      }\r\n\r\n      const newUsername =\r\n        analysts.find((emp) => emp.id === editEmployeeId)?.username ||\r\n        selectedShift.title.split(\" - \")[0];\r\n\r\n      const updatedShifts = shifts.map((shift) =>\r\n        shift.id === shiftId\r\n          ? {\r\n              ...shift,\r\n              title: newUsername + \" - \" + editShiftType,\r\n              start: startDateTime.toISOString(),\r\n              end: endDateTime.toISOString(),\r\n            }\r\n          : shift\r\n      );\r\n\r\n      setShifts(updatedShifts);\r\n      setIsModalOpen(false);\r\n      alert(\"Shift updated successfully!\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"Failed to edit shift.\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteShift = async () => {\r\n    try {\r\n      const response = await fetch(\"http://192.168.29.194:5000/api/delete_shift\", {\r\n        method: \"DELETE\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ shift_id: selectedShift.id }),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (!response.ok) {\r\n        alert(\"Error: \" + result.error);\r\n        return;\r\n      }\r\n\r\n      setShifts((prev) => prev.filter((shift) => shift.id !== selectedShift.id));\r\n      setIsModalOpen(false);\r\n      alert(\"Shift deleted successfully!\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"Failed to delete shift.\");\r\n    }\r\n  };\r\n\r\n  // Custom slot rendering\r\n  const slotLabelContent = (arg) => {\r\n    // Only show custom labels for the three main slots\r\n    if (arg.date.getHours() === 8) return \"Morning\";\r\n    if (arg.date.getHours() === 16) return \"Evening\";\r\n    if (arg.date.getHours() === 0) return \"Night\";\r\n    return \"\";\r\n  };\r\n\r\n  // Filter out slots we don't want to display\r\n  const slotLaneContent = (arg) => {\r\n    const hour = arg.date.getHours();\r\n    // Only show our three main slots (Morning: 8-16, Evening: 16-24, Night: 0-8)\r\n    return hour >= 8 && hour < 16 ? \"Morning\" : hour >= 16 && hour < 24 ? \"Evening\" : \"Night\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"shifts\">\r\n      <h1>Shift Management</h1>\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n        initialView=\"dayGridMonth\"\r\n        events={shifts}\r\n        dateClick={handleEventClick}\r\n        slotLabelContent={slotLabelContent}\r\n        slotLaneContent={slotLaneContent}\r\n      />\r\n\r\n      {/* Modals */}\r\n      <Modal isOpen={isModalOpen}>\r\n        <h2>Edit Shift</h2>\r\n        <label>\r\n          Shift Type:\r\n          <select\r\n            value={editShiftType}\r\n            onChange={(e) => setEditShiftType(e.target.value)}\r\n          >\r\n            <option value=\"Morning\">Morning</option>\r\n            <option value=\"Evening\">Evening</option>\r\n            <option value=\"Night\">Night</option>\r\n          </select>\r\n        </label>\r\n        <label>\r\n          Date:\r\n          <input\r\n            type=\"date\"\r\n            value={editShiftDate}\r\n            onChange={(e) => setEditShiftDate(e.target.value)}\r\n          />\r\n        </label>\r\n        <label>\r\n          Employee:\r\n          <select\r\n            value={editEmployeeId}\r\n            onChange={(e) => setEditEmployeeId(e.target.value)}\r\n          >\r\n            {analysts.map((emp) => (\r\n              <option key={emp.id} value={emp.id}>\r\n                {emp.username}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <button onClick={handleEditShift}>Save</button>\r\n        <button onClick={handleDeleteShift}>Delete</button>\r\n        <button onClick={() => setIsModalOpen(false)}>Close</button>\r\n      </Modal>\r\n\r\n      {/* Add Shift Modal */}\r\n      <Modal isOpen={isAddModalOpen}>\r\n        <h2>Create Shift</h2>\r\n        <label>\r\n          Date:\r\n          <input\r\n            type=\"date\"\r\n            value={newShiftDate}\r\n            onChange={(e) => setNewShiftDate(e.target.value)}\r\n          />\r\n        </label>\r\n        <label>\r\n          Shift Type:\r\n          <select\r\n            value={newShiftType}\r\n            onChange={(e) => setNewShiftType(e.target.value)}\r\n          >\r\n            <option value=\"Morning\">Morning</option>\r\n            <option value=\"Evening\">Evening</option>\r\n            <option value=\"Night\">Night</option>\r\n          </select>\r\n        </label>\r\n        <label>\r\n          Employees:\r\n          <div>\r\n            {analysts.map((emp) => (\r\n              <div key={emp.username}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  onChange={() => handleEmployeeToggle(emp.username)}\r\n                  checked={selectedEmployees.includes(emp.username)}\r\n                />\r\n                {emp.username}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </label>\r\n        <button onClick={handleAddShift}>Create</button>\r\n        <button onClick={() => setIsAddModalOpen(false)}>Close</button>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Shifts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}