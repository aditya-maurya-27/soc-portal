{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\Portal\\\\soc-portal\\\\src\\\\pages\\\\HomePage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport \"../styles/HomePage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HomePage() {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const App = {\n      canvas: null,\n      ctx: null,\n      width: 0,\n      height: 0,\n      particles: [],\n      deathCount: 0,\n      stepCount: 0,\n      drawnInLastFrame: 0,\n      animationFrame: null,\n      setup: function () {\n        const canvas = canvasRef.current;\n        const container = canvas.parentElement;\n        this.width = container.clientWidth;\n        this.height = container.clientHeight;\n        canvas.width = this.width;\n        canvas.height = this.height;\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n        this.dataToImageRatio = 1;\n        this.ctx.imageSmoothingEnabled = false;\n        this.xC = this.width / 2;\n        this.yC = this.height / 2;\n\n        // Your custom parameters\n        this.lifespan = 1000;\n        this.popPerBirth = 5;\n        this.maxPop = 500;\n        this.birthFreq = 3;\n        this.gridSize = 8;\n        this.gridSteps = Math.floor(1000 / this.gridSize);\n        this.grid = [];\n\n        // Build grid\n        let i = 0;\n        const gridArea = 1000;\n        const gridRadius = gridArea / 2;\n        for (let xx = -gridRadius; xx < gridRadius; xx += this.gridSize) {\n          for (let yy = -gridRadius; yy < gridRadius; yy += this.gridSize) {\n            const r = Math.sqrt(xx * xx + yy * yy);\n            const r0 = 100;\n            let field;\n            if (r < r0) field = 255 / r0 * r;else field = 255 - Math.min(255, (r - r0) / 2);\n            this.grid.push({\n              x: xx,\n              y: yy,\n              busyAge: 0,\n              spotIndex: i,\n              isEdge: xx === -gridRadius || xx >= gridRadius - this.gridSize || yy === -gridRadius || yy >= gridRadius - this.gridSize,\n              field: field\n            });\n            i++;\n          }\n        }\n        this.gridMaxIndex = i;\n\n        // Click to spawn worms\n        canvas.addEventListener('click', e => {\n          const rect = canvas.getBoundingClientRect();\n          const clickX = e.clientX - rect.left;\n          const clickY = e.clientY - rect.top;\n\n          // Convert to grid coordinates\n          const gridX = (clickX - this.xC) / (1.6 * this.dataToImageRatio);\n          const gridY = (clickY - this.yC) / (1.6 * this.dataToImageRatio);\n\n          // Find nearest grid spot\n          let closestSpot = this.grid[0];\n          let minDist = Infinity;\n          this.grid.forEach(spot => {\n            const dist = Math.sqrt(Math.pow(spot.x - gridX, 2) + Math.pow(spot.y - gridY, 2));\n            if (dist < minDist) {\n              minDist = dist;\n              closestSpot = spot;\n            }\n          });\n\n          // Spawn 10 worms at this location\n          for (let i = 0; i < 10; i++) {\n            this.birthAt(closestSpot.x, closestSpot.y);\n          }\n        });\n        this.initDraw();\n        const animate = () => {\n          this.evolve();\n          this.animationFrame = requestAnimationFrame(animate);\n        };\n        animate();\n      },\n      birthAt: function (x, y) {\n        const gridSpotIndex = Math.floor(Math.random() * this.gridMaxIndex);\n        const particle = {\n          hue: 260 + Math.sin(Date.now() * 0.001) * 20,\n          sat: 100,\n          lum: 50,\n          x: x,\n          y: y,\n          xLast: x,\n          yLast: y,\n          xSpeed: 0,\n          ySpeed: 0,\n          age: 0,\n          ageSinceStuck: 0,\n          attractor: {\n            oldIndex: gridSpotIndex,\n            gridSpotIndex: gridSpotIndex\n          },\n          name: 'worm-' + Date.now() + '-' + Math.random()\n        };\n        this.particles.push(particle);\n      },\n      evolve: function () {\n        this.stepCount++;\n        this.grid.forEach(e => e.busyAge > 0 && e.busyAge++);\n        this.move();\n        this.draw();\n      },\n      kill: function (particleName) {\n        this.particles = this.particles.filter(p => p.name !== particleName);\n      },\n      move: function () {\n        for (let i = 0; i < this.particles.length; i++) {\n          const p = this.particles[i];\n          p.xLast = p.x;\n          p.yLast = p.y;\n          let index = p.attractor.gridSpotIndex;\n          let gridSpot = this.grid[index];\n          if (Math.random() < 0.5) {\n            if (!gridSpot.isEdge) {\n              const topIndex = index - 1;\n              const bottomIndex = index + 1;\n              const leftIndex = index - this.gridSteps;\n              const rightIndex = index + this.gridSteps;\n              const neighbors = [];\n              if (gridSpot.isEdge !== 'top') neighbors.push(this.grid[topIndex]);\n              if (gridSpot.isEdge !== 'bottom') neighbors.push(this.grid[bottomIndex]);\n              if (gridSpot.isEdge !== 'left') neighbors.push(this.grid[leftIndex]);\n              if (gridSpot.isEdge !== 'right') neighbors.push(this.grid[rightIndex]);\n              if (neighbors.length > 0) {\n                const chaos = 30;\n                const maxFieldSpot = neighbors.reduce((max, spot) => spot.field + chaos * Math.random() > max.field + chaos * Math.random() ? spot : max);\n                if (maxFieldSpot.busyAge === 0 || maxFieldSpot.busyAge > 15) {\n                  p.ageSinceStuck = 0;\n                  p.attractor.oldIndex = index;\n                  p.attractor.gridSpotIndex = maxFieldSpot.spotIndex;\n                  gridSpot = maxFieldSpot;\n                  gridSpot.busyAge = 1;\n                } else {\n                  p.ageSinceStuck++;\n                }\n              }\n              if (p.ageSinceStuck === 10) this.kill(p.name);\n            }\n          }\n          const k = 8,\n            visc = 0.4;\n          const dx = p.x - gridSpot.x;\n          const dy = p.y - gridSpot.y;\n          p.xSpeed += -k * dx;\n          p.ySpeed += -k * dy;\n          p.xSpeed *= visc;\n          p.ySpeed *= visc;\n          p.x += 0.1 * p.xSpeed;\n          p.y += 0.1 * p.ySpeed;\n          p.age++;\n          if (p.age > this.lifespan) this.kill(p.name);\n        }\n      },\n      draw: function () {\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n        for (const p of this.particles) {\n          const h = p.hue + this.stepCount / 30;\n          const last = this.dataXYtoCanvasXY(p.xLast, p.yLast);\n          const now = this.dataXYtoCanvasXY(p.x, p.y);\n\n          // Draw worm trail\n          this.ctx.beginPath();\n          this.ctx.strokeStyle = `hsla(${h}, ${p.sat}%, ${p.lum}%, 1)`;\n          this.ctx.moveTo(last.x, last.y);\n          this.ctx.lineTo(now.x, now.y);\n          this.ctx.lineWidth = 1.5;\n          this.ctx.stroke();\n\n          // Draw worm head\n          const attracSpot = this.grid[p.attractor.gridSpotIndex];\n          const attracXY = this.dataXYtoCanvasXY(attracSpot.x, attracSpot.y);\n          const oldAttracXY = this.dataXYtoCanvasXY(this.grid[p.attractor.oldIndex].x, this.grid[p.attractor.oldIndex].y);\n          this.ctx.beginPath();\n          this.ctx.strokeStyle = `hsla(${h}, ${p.sat}%, ${p.lum}%, 0.5)`;\n          this.ctx.moveTo(oldAttracXY.x, oldAttracXY.y);\n          this.ctx.lineTo(attracXY.x, attracXY.y);\n          this.ctx.arc(attracXY.x, attracXY.y, 1.5, 0, Math.PI * 2);\n          this.ctx.stroke();\n        }\n      },\n      dataXYtoCanvasXY: function (x, y) {\n        const zoom = 1.6;\n        return {\n          x: this.xC + x * zoom * this.dataToImageRatio,\n          y: this.yC + y * zoom * this.dataToImageRatio\n        };\n      },\n      initDraw: function () {\n        this.ctx.fillStyle = 'black';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n      }\n    };\n    App.setup();\n    return () => {\n      if (App.animationFrame) {\n        cancelAnimationFrame(App.animationFrame);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"effect-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"particle-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"banner\",\n        children: \"Cyber Vigiliance Centre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","HomePage","_s","canvasRef","App","canvas","ctx","width","height","particles","deathCount","stepCount","drawnInLastFrame","animationFrame","setup","current","container","parentElement","clientWidth","clientHeight","getContext","dataToImageRatio","imageSmoothingEnabled","xC","yC","lifespan","popPerBirth","maxPop","birthFreq","gridSize","gridSteps","Math","floor","grid","i","gridArea","gridRadius","xx","yy","r","sqrt","r0","field","min","push","x","y","busyAge","spotIndex","isEdge","gridMaxIndex","addEventListener","e","rect","getBoundingClientRect","clickX","clientX","left","clickY","clientY","top","gridX","gridY","closestSpot","minDist","Infinity","forEach","spot","dist","pow","birthAt","initDraw","animate","evolve","requestAnimationFrame","gridSpotIndex","random","particle","hue","sin","Date","now","sat","lum","xLast","yLast","xSpeed","ySpeed","age","ageSinceStuck","attractor","oldIndex","name","move","draw","kill","particleName","filter","p","length","index","gridSpot","topIndex","bottomIndex","leftIndex","rightIndex","neighbors","chaos","maxFieldSpot","reduce","max","k","visc","dx","dy","fillStyle","fillRect","h","last","dataXYtoCanvasXY","beginPath","strokeStyle","moveTo","lineTo","lineWidth","stroke","attracSpot","attracXY","oldAttracXY","arc","PI","zoom","cancelAnimationFrame","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/Portal/soc-portal/src/pages/HomePage.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport \"../styles/HomePage.css\";\r\n\r\nfunction HomePage() {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const App = {\r\n      canvas: null,\r\n      ctx: null,\r\n      width: 0,\r\n      height: 0,\r\n      particles: [],\r\n      deathCount: 0,\r\n      stepCount: 0,\r\n      drawnInLastFrame: 0,\r\n      animationFrame: null,\r\n\r\n      setup: function() {\r\n        const canvas = canvasRef.current;\r\n        const container = canvas.parentElement;\r\n        \r\n        this.width = container.clientWidth;\r\n        this.height = container.clientHeight;\r\n        canvas.width = this.width;\r\n        canvas.height = this.height;\r\n        \r\n        this.canvas = canvas;\r\n        this.ctx = canvas.getContext(\"2d\");\r\n        this.dataToImageRatio = 1;\r\n        this.ctx.imageSmoothingEnabled = false;\r\n        this.xC = this.width / 2;\r\n        this.yC = this.height / 2;\r\n        \r\n        // Your custom parameters\r\n        this.lifespan = 1000;\r\n        this.popPerBirth = 5;\r\n        this.maxPop = 500;\r\n        this.birthFreq = 3;\r\n        this.gridSize = 8;\r\n        this.gridSteps = Math.floor(1000 / this.gridSize);\r\n        this.grid = [];\r\n        \r\n        // Build grid\r\n        let i = 0;\r\n        const gridArea = 1000;\r\n        const gridRadius = gridArea / 2;\r\n        for (let xx = -gridRadius; xx < gridRadius; xx += this.gridSize) {\r\n          for (let yy = -gridRadius; yy < gridRadius; yy += this.gridSize) {\r\n            const r = Math.sqrt(xx*xx + yy*yy);\r\n            const r0 = 100;\r\n            let field;\r\n            \r\n            if (r < r0) field = 255 / r0 * r;\r\n            else field = 255 - Math.min(255, (r - r0)/2);\r\n            \r\n            this.grid.push({\r\n              x: xx,\r\n              y: yy,\r\n              busyAge: 0,\r\n              spotIndex: i,\r\n              isEdge: (xx === -gridRadius || \r\n                      xx >= (gridRadius - this.gridSize) || \r\n                      yy === -gridRadius || \r\n                      yy >= (gridRadius - this.gridSize)),\r\n              field: field\r\n            });\r\n            i++;\r\n          }\r\n        }\r\n        this.gridMaxIndex = i;\r\n        \r\n        // Click to spawn worms\r\n        canvas.addEventListener('click', (e) => {\r\n          const rect = canvas.getBoundingClientRect();\r\n          const clickX = e.clientX - rect.left;\r\n          const clickY = e.clientY - rect.top;\r\n          \r\n          // Convert to grid coordinates\r\n          const gridX = (clickX - this.xC) / (1.6 * this.dataToImageRatio);\r\n          const gridY = (clickY - this.yC) / (1.6 * this.dataToImageRatio);\r\n          \r\n          // Find nearest grid spot\r\n          let closestSpot = this.grid[0];\r\n          let minDist = Infinity;\r\n          \r\n          this.grid.forEach(spot => {\r\n            const dist = Math.sqrt(\r\n              Math.pow(spot.x - gridX, 2) + \r\n              Math.pow(spot.y - gridY, 2)\r\n            );\r\n            if (dist < minDist) {\r\n              minDist = dist;\r\n              closestSpot = spot;\r\n            }\r\n          });\r\n          \r\n          // Spawn 10 worms at this location\r\n          for (let i = 0; i < 10; i++) {\r\n            this.birthAt(closestSpot.x, closestSpot.y);\r\n          }\r\n        });\r\n        \r\n        this.initDraw();\r\n        \r\n        const animate = () => {\r\n          this.evolve();\r\n          this.animationFrame = requestAnimationFrame(animate);\r\n        };\r\n        animate();\r\n      },\r\n\r\n      birthAt: function(x, y) {\r\n        const gridSpotIndex = Math.floor(Math.random() * this.gridMaxIndex);\r\n        const particle = {\r\n          hue: 260 + Math.sin(Date.now()*0.001)*20,\r\n          sat: 100,\r\n          lum: 50,\r\n          x: x, \r\n          y: y,\r\n          xLast: x, \r\n          yLast: y,\r\n          xSpeed: 0, \r\n          ySpeed: 0,\r\n          age: 0,\r\n          ageSinceStuck: 0,\r\n          attractor: {\r\n            oldIndex: gridSpotIndex,\r\n            gridSpotIndex: gridSpotIndex,\r\n          },\r\n          name: 'worm-' + Date.now() + '-' + Math.random()\r\n        };\r\n        this.particles.push(particle);\r\n      },\r\n\r\n      evolve: function() {\r\n        this.stepCount++;\r\n        this.grid.forEach(e => e.busyAge > 0 && e.busyAge++);\r\n        this.move();\r\n        this.draw();\r\n      },\r\n\r\n      kill: function(particleName) {\r\n        this.particles = this.particles.filter(p => p.name !== particleName);\r\n      },\r\n\r\n      move: function() {\r\n        for (let i = 0; i < this.particles.length; i++) {\r\n          const p = this.particles[i];\r\n          p.xLast = p.x; \r\n          p.yLast = p.y;\r\n          \r\n          let index = p.attractor.gridSpotIndex;\r\n          let gridSpot = this.grid[index];\r\n          \r\n          if (Math.random() < 0.5) {\r\n            if (!gridSpot.isEdge) {\r\n              const topIndex = index - 1;\r\n              const bottomIndex = index + 1;\r\n              const leftIndex = index - this.gridSteps;\r\n              const rightIndex = index + this.gridSteps;\r\n              \r\n              const neighbors = [];\r\n              if (gridSpot.isEdge !== 'top') neighbors.push(this.grid[topIndex]);\r\n              if (gridSpot.isEdge !== 'bottom') neighbors.push(this.grid[bottomIndex]);\r\n              if (gridSpot.isEdge !== 'left') neighbors.push(this.grid[leftIndex]);\r\n              if (gridSpot.isEdge !== 'right') neighbors.push(this.grid[rightIndex]);\r\n              \r\n              if (neighbors.length > 0) {\r\n                const chaos = 30;\r\n                const maxFieldSpot = neighbors.reduce((max, spot) => \r\n                  (spot.field + chaos * Math.random()) > \r\n                  (max.field + chaos * Math.random()) ? spot : max\r\n                );\r\n                \r\n                if (maxFieldSpot.busyAge === 0 || maxFieldSpot.busyAge > 15) {\r\n                  p.ageSinceStuck = 0;\r\n                  p.attractor.oldIndex = index;\r\n                  p.attractor.gridSpotIndex = maxFieldSpot.spotIndex;\r\n                  gridSpot = maxFieldSpot;\r\n                  gridSpot.busyAge = 1;\r\n                } else {\r\n                  p.ageSinceStuck++;\r\n                }\r\n              }\r\n              \r\n              if (p.ageSinceStuck === 10) this.kill(p.name);\r\n            }\r\n          }\r\n          \r\n          const k = 8, visc = 0.4;\r\n          const dx = p.x - gridSpot.x;\r\n          const dy = p.y - gridSpot.y;\r\n          \r\n          p.xSpeed += -k * dx; \r\n          p.ySpeed += -k * dy;\r\n          p.xSpeed *= visc; \r\n          p.ySpeed *= visc;\r\n          \r\n          p.x += 0.1 * p.xSpeed; \r\n          p.y += 0.1 * p.ySpeed;\r\n          p.age++;\r\n          \r\n          if (p.age > this.lifespan) this.kill(p.name);\r\n        }\r\n      },\r\n\r\n      draw: function() {\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        \r\n        for (const p of this.particles) {\r\n          const h = p.hue + this.stepCount/30;\r\n          const last = this.dataXYtoCanvasXY(p.xLast, p.yLast);\r\n          const now = this.dataXYtoCanvasXY(p.x, p.y);\r\n          \r\n          // Draw worm trail\r\n          this.ctx.beginPath();\r\n          this.ctx.strokeStyle = `hsla(${h}, ${p.sat}%, ${p.lum}%, 1)`;\r\n          this.ctx.moveTo(last.x, last.y);\r\n          this.ctx.lineTo(now.x, now.y);\r\n          this.ctx.lineWidth = 1.5;\r\n          this.ctx.stroke();\r\n          \r\n          // Draw worm head\r\n          const attracSpot = this.grid[p.attractor.gridSpotIndex];\r\n          const attracXY = this.dataXYtoCanvasXY(attracSpot.x, attracSpot.y);\r\n          const oldAttracXY = this.dataXYtoCanvasXY(\r\n            this.grid[p.attractor.oldIndex].x, \r\n            this.grid[p.attractor.oldIndex].y\r\n          );\r\n          \r\n          this.ctx.beginPath();\r\n          this.ctx.strokeStyle = `hsla(${h}, ${p.sat}%, ${p.lum}%, 0.5)`;\r\n          this.ctx.moveTo(oldAttracXY.x, oldAttracXY.y);\r\n          this.ctx.lineTo(attracXY.x, attracXY.y);\r\n          this.ctx.arc(attracXY.x, attracXY.y, 1.5, 0, Math.PI * 2);\r\n          this.ctx.stroke();\r\n        }\r\n      },\r\n\r\n      dataXYtoCanvasXY: function(x, y) {\r\n        const zoom = 1.6;\r\n        return {\r\n          x: this.xC + x * zoom * this.dataToImageRatio,\r\n          y: this.yC + y * zoom * this.dataToImageRatio\r\n        };\r\n      },\r\n\r\n      initDraw: function() {\r\n        this.ctx.fillStyle = 'black';\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n      }\r\n    };\r\n\r\n    App.setup();\r\n\r\n    return () => {\r\n      if (App.animationFrame) {\r\n        cancelAnimationFrame(App.animationFrame);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      <div className=\"effect-area\">\r\n        <canvas ref={canvasRef} className=\"particle-canvas\" />\r\n        <p className=\"banner\">Cyber Vigiliance Centre</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}