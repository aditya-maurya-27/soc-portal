{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\Portal\\\\soc-portal\\\\src\\\\pages\\\\HomePage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport \"../styles/HomePage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HomePage() {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const App = {\n      canvas: null,\n      ctx: null,\n      width: 0,\n      height: 0,\n      particles: [],\n      deathCount: 0,\n      stepCount: 0,\n      drawnInLastFrame: 0,\n      animationFrame: null,\n      setup: function () {\n        const canvas = canvasRef.current;\n        const container = canvas.parentElement;\n        this.width = container.clientWidth;\n        this.height = container.clientHeight;\n        canvas.width = this.width;\n        canvas.height = this.height;\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n        this.dataToImageRatio = 1;\n        this.ctx.imageSmoothingEnabled = false;\n        this.xC = this.width / 2;\n        this.yC = this.height / 2;\n\n        // Parameters for worm-like effect\n        this.lifespan = 800;\n        this.popPerBirth = 1;\n        this.maxPop = 120;\n        this.birthFreq = 5;\n        this.gridSize = 8;\n        this.gridSteps = Math.floor(1000 / this.gridSize);\n        this.grid = [];\n\n        // Build grid with proper worm behavior\n        let i = 0;\n        const gridArea = 1000;\n        const gridRadius = gridArea / 2;\n        for (let xx = -gridRadius; xx < gridRadius; xx += this.gridSize) {\n          for (let yy = -gridRadius; yy < gridRadius; yy += this.gridSize) {\n            const r = Math.sqrt(xx * xx + yy * yy);\n            const r0 = 120;\n            let field;\n            if (r < r0) field = 255 / r0 * r;else field = 255 - Math.min(255, (r - r0) / 5);\n            this.grid.push({\n              x: xx,\n              y: yy,\n              busyAge: 0,\n              spotIndex: i,\n              isEdge: xx === -gridRadius || xx >= gridRadius - this.gridSize || yy === -gridRadius || yy >= gridRadius - this.gridSize,\n              field: field\n            });\n            i++;\n          }\n        }\n        this.gridMaxIndex = i;\n        this.initDraw();\n        const animate = () => {\n          this.evolve();\n          this.animationFrame = requestAnimationFrame(animate);\n        };\n        animate();\n      },\n      evolve: function () {\n        this.stepCount++;\n        this.grid.forEach(function (e) {\n          if (e.busyAge > 0) e.busyAge++;\n        });\n        if (this.stepCount % this.birthFreq === 0 && this.particles.length + this.popPerBirth < this.maxPop) {\n          this.birth();\n        }\n        this.move();\n        this.draw();\n      },\n      birth: function () {\n        // Spawn worms in a circular pattern\n        const angle = Math.random() * Math.PI * 2;\n        const radius = Math.sqrt(Math.random()) * 500;\n        const x = radius * Math.cos(angle);\n        const y = radius * Math.sin(angle);\n\n        // Find closest grid spot\n        let closestSpot = this.grid[0];\n        let minDist = Infinity;\n        this.grid.forEach(spot => {\n          const dist = Math.hypot(spot.x - x, spot.y - y);\n          if (dist < minDist) {\n            minDist = dist;\n            closestSpot = spot;\n          }\n        });\n        const particle = {\n          hue: 270 + Math.sin(Date.now() * 1) * 400,\n          sat: 100,\n          lum: 65,\n          x: closestSpot.x,\n          y: closestSpot.y,\n          xLast: closestSpot.x,\n          yLast: closestSpot.y,\n          xSpeed: 0,\n          ySpeed: 0,\n          age: 0,\n          ageSinceStuck: 0,\n          attractor: {\n            oldIndex: closestSpot.spotIndex,\n            gridSpotIndex: closestSpot.spotIndex\n          },\n          name: 'worm-' + Math.ceil(10000000 * Math.random())\n        };\n        this.particles.push(particle);\n      },\n      move: function () {\n        for (let i = 0; i < this.particles.length; i++) {\n          const p = this.particles[i];\n          p.xLast = p.x;\n          p.yLast = p.y;\n          let index = p.attractor.gridSpotIndex;\n          let gridSpot = this.grid[index];\n\n          // Original worm movement logic\n          if (Math.random() < 0.3) {\n            if (!gridSpot.isEdge) {\n              const topIndex = index - 1;\n              const bottomIndex = index + 1;\n              const leftIndex = index - this.gridSteps;\n              const rightIndex = index + this.gridSteps;\n              const neighbors = [];\n              if (topIndex >= 0) neighbors.push(this.grid[topIndex]);\n              if (bottomIndex < this.grid.length) neighbors.push(this.grid[bottomIndex]);\n              if (leftIndex >= 0) neighbors.push(this.grid[leftIndex]);\n              if (rightIndex < this.grid.length) neighbors.push(this.grid[rightIndex]);\n              if (neighbors.length > 1) {\n                const chaos = 5;\n                const maxFieldSpot = neighbors.reduce((max, spot) => spot.field + chaos * Math.random() > max.field + chaos * Math.random() ? spot : max);\n                if (maxFieldSpot.busyAge === 0 || maxFieldSpot.busyAge > 15) {\n                  p.ageSinceStuck = 0;\n                  p.attractor.oldIndex = index;\n                  p.attractor.gridSpotIndex = maxFieldSpot.spotIndex;\n                  gridSpot = maxFieldSpot;\n                  gridSpot.busyAge = 1;\n                } else {\n                  p.ageSinceStuck++;\n                }\n              }\n              if (p.ageSinceStuck === 10) {\n                this.particles.splice(i, 1);\n                i--;\n                continue;\n              }\n            }\n          }\n\n          // Spring physics for organic movement\n          const k = 8,\n            visc = 0.4;\n          const dx = p.x - gridSpot.x;\n          const dy = p.y - gridSpot.y;\n          p.xSpeed += -k * dx;\n          p.ySpeed += -k * dy;\n          p.xSpeed *= visc;\n          p.ySpeed *= visc;\n          p.x += 0.1 * p.xSpeed;\n          p.y += 0.1 * p.ySpeed;\n          p.age++;\n          if (p.age > this.lifespan) {\n            this.particles.splice(i, 1);\n            i--;\n          }\n        }\n      },\n      draw: function () {\n        this.ctx.fillStyle = 'rgba(10, 10, 10, 0.01)';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n        for (const p of this.particles) {\n          const h = p.hue + this.stepCount / 200;\n\n          // Draw worm trail\n          const last = this.dataXYtoCanvasXY(p.xLast, p.yLast);\n          const now = this.dataXYtoCanvasXY(p.x, p.y);\n          this.ctx.beginPath();\n          this.ctx.strokeStyle = `hsla(${h}, ${p.sat}%, ${p.lum}%, 1)`;\n          this.ctx.moveTo(last.x, last.y);\n          this.ctx.lineTo(now.x, now.y);\n          this.ctx.lineWidth = 1.5;\n          this.ctx.stroke();\n\n          // Draw worm head\n          const attracSpot = this.grid[p.attractor.gridSpotIndex];\n          const attracXY = this.dataXYtoCanvasXY(attracSpot.x, attracSpot.y);\n          const oldAttracXY = this.dataXYtoCanvasXY(this.grid[p.attractor.oldIndex].x, this.grid[p.attractor.oldIndex].y);\n          this.ctx.beginPath();\n          this.ctx.strokeStyle = `hsla(${h}, ${p.sat}%, ${p.lum}%, 0.5)`;\n          this.ctx.moveTo(oldAttracXY.x, oldAttracXY.y);\n          this.ctx.lineTo(attracXY.x, attracXY.y);\n          this.ctx.arc(attracXY.x, attracXY.y, 2.0, 0, Math.PI * 2);\n          this.ctx.stroke();\n        }\n      },\n      dataXYtoCanvasXY: function (x, y) {\n        const zoom = 1.6;\n        return {\n          x: this.xC + x * zoom * this.dataToImageRatio,\n          y: this.yC + y * zoom * this.dataToImageRatio\n        };\n      },\n      initDraw: function () {\n        this.ctx.fillStyle = '';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n      }\n    };\n    App.setup();\n    return () => {\n      if (App.animationFrame) {\n        cancelAnimationFrame(App.animationFrame);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"effect-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"particle-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"package\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"package2\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"banner\",\n            children: \"CYBER VIGILANCE CENTRE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","HomePage","_s","canvasRef","App","canvas","ctx","width","height","particles","deathCount","stepCount","drawnInLastFrame","animationFrame","setup","current","container","parentElement","clientWidth","clientHeight","getContext","dataToImageRatio","imageSmoothingEnabled","xC","yC","lifespan","popPerBirth","maxPop","birthFreq","gridSize","gridSteps","Math","floor","grid","i","gridArea","gridRadius","xx","yy","r","sqrt","r0","field","min","push","x","y","busyAge","spotIndex","isEdge","gridMaxIndex","initDraw","animate","evolve","requestAnimationFrame","forEach","e","length","birth","move","draw","angle","random","PI","radius","cos","sin","closestSpot","minDist","Infinity","spot","dist","hypot","particle","hue","Date","now","sat","lum","xLast","yLast","xSpeed","ySpeed","age","ageSinceStuck","attractor","oldIndex","gridSpotIndex","name","ceil","p","index","gridSpot","topIndex","bottomIndex","leftIndex","rightIndex","neighbors","chaos","maxFieldSpot","reduce","max","splice","k","visc","dx","dy","fillStyle","fillRect","h","last","dataXYtoCanvasXY","beginPath","strokeStyle","moveTo","lineTo","lineWidth","stroke","attracSpot","attracXY","oldAttracXY","arc","zoom","cancelAnimationFrame","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/Portal/soc-portal/src/pages/HomePage.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport \"../styles/HomePage.css\";\r\n\r\nfunction HomePage() {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const App = {\r\n      canvas: null,\r\n      ctx: null,\r\n      width: 0,\r\n      height: 0,\r\n      particles: [],\r\n      deathCount: 0,\r\n      stepCount: 0,\r\n      drawnInLastFrame: 0,\r\n      animationFrame: null,\r\n\r\n      setup: function () {\r\n        const canvas = canvasRef.current;\r\n        const container = canvas.parentElement;\r\n\r\n        this.width = container.clientWidth;\r\n        this.height = container.clientHeight;\r\n        canvas.width = this.width;\r\n        canvas.height = this.height;\r\n\r\n        this.canvas = canvas;\r\n        this.ctx = canvas.getContext(\"2d\");\r\n        this.dataToImageRatio = 1;\r\n        this.ctx.imageSmoothingEnabled = false;\r\n        this.xC = this.width / 2;\r\n        this.yC = this.height / 2;\r\n\r\n        // Parameters for worm-like effect\r\n        this.lifespan = 800;\r\n        this.popPerBirth = 1;\r\n        this.maxPop = 120;\r\n        this.birthFreq = 5;\r\n        this.gridSize = 8;\r\n        this.gridSteps = Math.floor(1000 / this.gridSize);\r\n        this.grid = [];\r\n\r\n        // Build grid with proper worm behavior\r\n        let i = 0;\r\n        const gridArea = 1000;\r\n        const gridRadius = gridArea / 2;\r\n        for (let xx = -gridRadius; xx < gridRadius; xx += this.gridSize) {\r\n          for (let yy = -gridRadius; yy < gridRadius; yy += this.gridSize) {\r\n            const r = Math.sqrt(xx * xx + yy * yy);\r\n            const r0 = 120;\r\n            let field;\r\n            if (r < r0) field = 255 / r0 * r;\r\n            else field = 255 - Math.min(255, (r - r0) / 5);\r\n            this.grid.push({\r\n              x: xx,\r\n              y: yy,\r\n              busyAge: 0,\r\n              spotIndex: i,\r\n              isEdge: (xx === -gridRadius ||\r\n                xx >= (gridRadius - this.gridSize) ||\r\n                yy === -gridRadius ||\r\n                yy >= (gridRadius - this.gridSize)),\r\n              field: field\r\n            });\r\n            i++;\r\n          }\r\n        }\r\n        this.gridMaxIndex = i;\r\n\r\n        this.initDraw();\r\n\r\n        const animate = () => {\r\n          this.evolve();\r\n          this.animationFrame = requestAnimationFrame(animate);\r\n        };\r\n        animate();\r\n      },\r\n\r\n      evolve: function () {\r\n        this.stepCount++;\r\n\r\n        this.grid.forEach(function (e) {\r\n          if (e.busyAge > 0) e.busyAge++;\r\n        });\r\n\r\n        if (this.stepCount % this.birthFreq === 0 &&\r\n          (this.particles.length + this.popPerBirth) < this.maxPop) {\r\n          this.birth();\r\n        }\r\n        this.move();\r\n        this.draw();\r\n      },\r\n\r\n      birth: function () {\r\n        // Spawn worms in a circular pattern\r\n        const angle = Math.random() * Math.PI * 2;\r\n        const radius = Math.sqrt(Math.random()) * 500;\r\n\r\n        const x = radius * Math.cos(angle);\r\n        const y = radius * Math.sin(angle);\r\n\r\n        // Find closest grid spot\r\n        let closestSpot = this.grid[0];\r\n        let minDist = Infinity;\r\n        this.grid.forEach(spot => {\r\n          const dist = Math.hypot(spot.x - x, spot.y - y);\r\n          if (dist < minDist) {\r\n            minDist = dist;\r\n            closestSpot = spot;\r\n          }\r\n        });\r\n\r\n        const particle = {\r\n          hue: 270 + Math.sin(Date.now() * 1) * 400,\r\n          sat: 100,\r\n          lum: 65,\r\n          x: closestSpot.x,\r\n          y: closestSpot.y,\r\n          xLast: closestSpot.x,\r\n          yLast: closestSpot.y,\r\n          xSpeed: 0,\r\n          ySpeed: 0,\r\n          age: 0,\r\n          ageSinceStuck: 0,\r\n          attractor: {\r\n            oldIndex: closestSpot.spotIndex,\r\n            gridSpotIndex: closestSpot.spotIndex,\r\n          },\r\n          name: 'worm-' + Math.ceil(10000000 * Math.random())\r\n        };\r\n        this.particles.push(particle);\r\n      },\r\n\r\n      move: function () {\r\n        for (let i = 0; i < this.particles.length; i++) {\r\n          const p = this.particles[i];\r\n          p.xLast = p.x;\r\n          p.yLast = p.y;\r\n\r\n          let index = p.attractor.gridSpotIndex;\r\n          let gridSpot = this.grid[index];\r\n\r\n          // Original worm movement logic\r\n          if (Math.random() < 0.3) {\r\n            if (!gridSpot.isEdge) {\r\n              const topIndex = index - 1;\r\n              const bottomIndex = index + 1;\r\n              const leftIndex = index - this.gridSteps;\r\n              const rightIndex = index + this.gridSteps;\r\n\r\n              const neighbors = [];\r\n              if (topIndex >= 0) neighbors.push(this.grid[topIndex]);\r\n              if (bottomIndex < this.grid.length) neighbors.push(this.grid[bottomIndex]);\r\n              if (leftIndex >= 0) neighbors.push(this.grid[leftIndex]);\r\n              if (rightIndex < this.grid.length) neighbors.push(this.grid[rightIndex]);\r\n\r\n              if (neighbors.length > 1) {\r\n                const chaos = 5;\r\n                const maxFieldSpot = neighbors.reduce((max, spot) =>\r\n                  (spot.field + chaos * Math.random()) >\r\n                    (max.field + chaos * Math.random()) ? spot : max\r\n                );\r\n\r\n                if (maxFieldSpot.busyAge === 0 || maxFieldSpot.busyAge > 15) {\r\n                  p.ageSinceStuck = 0;\r\n                  p.attractor.oldIndex = index;\r\n                  p.attractor.gridSpotIndex = maxFieldSpot.spotIndex;\r\n                  gridSpot = maxFieldSpot;\r\n                  gridSpot.busyAge = 1;\r\n                } else {\r\n                  p.ageSinceStuck++;\r\n                }\r\n              }\r\n\r\n              if (p.ageSinceStuck === 10) {\r\n                this.particles.splice(i, 1);\r\n                i--;\r\n                continue;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Spring physics for organic movement\r\n          const k = 8, visc = 0.4;\r\n          const dx = p.x - gridSpot.x;\r\n          const dy = p.y - gridSpot.y;\r\n\r\n          p.xSpeed += -k * dx;\r\n          p.ySpeed += -k * dy;\r\n          p.xSpeed *= visc;\r\n          p.ySpeed *= visc;\r\n\r\n          p.x += 0.1 * p.xSpeed;\r\n          p.y += 0.1 * p.ySpeed;\r\n          p.age++;\r\n\r\n          if (p.age > this.lifespan) {\r\n            this.particles.splice(i, 1);\r\n            i--;\r\n          }\r\n        }\r\n      },\r\n\r\n      draw: function () {\r\n        this.ctx.fillStyle = 'rgba(10, 10, 10, 0.01)';\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n\r\n        for (const p of this.particles) {\r\n          const h = p.hue + this.stepCount / 200;\r\n\r\n          // Draw worm trail\r\n          const last = this.dataXYtoCanvasXY(p.xLast, p.yLast);\r\n          const now = this.dataXYtoCanvasXY(p.x, p.y);\r\n\r\n          this.ctx.beginPath();\r\n          this.ctx.strokeStyle = `hsla(${h}, ${p.sat}%, ${p.lum}%, 1)`;\r\n          this.ctx.moveTo(last.x, last.y);\r\n          this.ctx.lineTo(now.x, now.y);\r\n          this.ctx.lineWidth = 1.5;\r\n          this.ctx.stroke();\r\n\r\n          // Draw worm head\r\n          const attracSpot = this.grid[p.attractor.gridSpotIndex];\r\n          const attracXY = this.dataXYtoCanvasXY(attracSpot.x, attracSpot.y);\r\n          const oldAttracXY = this.dataXYtoCanvasXY(\r\n            this.grid[p.attractor.oldIndex].x,\r\n            this.grid[p.attractor.oldIndex].y\r\n          );\r\n\r\n          this.ctx.beginPath();\r\n          this.ctx.strokeStyle = `hsla(${h}, ${p.sat}%, ${p.lum}%, 0.5)`;\r\n          this.ctx.moveTo(oldAttracXY.x, oldAttracXY.y);\r\n          this.ctx.lineTo(attracXY.x, attracXY.y);\r\n          this.ctx.arc(attracXY.x, attracXY.y, 2.0, 0, Math.PI * 2);\r\n          this.ctx.stroke();\r\n        }\r\n      },\r\n\r\n      dataXYtoCanvasXY: function (x, y) {\r\n        const zoom = 1.6;\r\n        return {\r\n          x: this.xC + x * zoom * this.dataToImageRatio,\r\n          y: this.yC + y * zoom * this.dataToImageRatio\r\n        };\r\n      },\r\n\r\n      initDraw: function () {\r\n        this.ctx.fillStyle = '';\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n      }\r\n    };\r\n\r\n    App.setup();\r\n\r\n    return () => {\r\n      if (App.animationFrame) {\r\n        cancelAnimationFrame(App.animationFrame);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      <div className=\"effect-area\">\r\n        <canvas ref={canvasRef} className=\"particle-canvas\" />\r\n        <div className=\"package\">\r\n          <div className=\"package2\"><p className=\"banner\">CYBER VIGILANCE CENTRE</p></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}